{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to gradle quality plugin","text":"<p>Plugin configures quality tools for java and groovy projects.</p> <ul> <li>Auto enabled plugins: Checkstyle,  PMD, CodeNarc.</li> <li>External plugins (configured when manually applied): SpotBugs, CPD,  AnimalSniffer,</li> </ul> <p>Plugin unifies console output for all quality plugins, which greatly simplifies developer workflow:  only console required for working with violations and makes it feel the same as java compiler errors.</p> <p>Also, plugin provides default (opinionated) configurations for quality tools, so you  can use them with zero configuration.</p> <p>Release Notes - History  - License</p>"},{"location":"#main-features","title":"Main Features","text":"<ul> <li>Zero configuration by default: provided opinionated configs applied to all quality plugins<ul> <li>Default configuration files may be customized</li> </ul> </li> <li>Adds extra javac lint options to see more warnings</li> <li>Complete console output for all quality plugins</li> <li>Html and xml reports for all plugins (custom xsl used for findbugs html report because it can't generate both xml and html reports)</li> <li>Grouping tasks to run registered quality plugins for exact source set (e.g. checkQualityMain)</li> </ul> <p>Note</p> <p>The plugin is compatible with the gradle configuration cache</p>"},{"location":"#how-to-use-docs","title":"How to use docs","text":"<ul> <li>Getting started covers installation and main usage info. Ideal for introduction.</li> <li>User guide section contain detailed behavior description. Good to read, but if no time, read as you need it.<ul> <li>Configuration - configuration reference</li> </ul> </li> <li>Tools section describes exact quality tool configuration and usage aspects. Use it as a hand book.</li> <li>Tasks section describes custom tasks.</li> </ul>"},{"location":"#samples","title":"Samples","text":"<ul> <li>Java project</li> <li>Groovy project</li> <li>Java + generated code + exclusion by source dir</li> <li>Java + generated code + exclusion by source path</li> <li>Java + apt</li> <li>CPD</li> <li>AnimalSniffer</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Plugin is available from maven central, and gradle plugins portal.</p> <pre><code>plugins {\n    id 'ru.vyarus.quality' version '6.0.0'\n}\n</code></pre> <p>OR</p> <pre><code>buildscript {\n    repositories {\n        mavenCentral()\n        gradlePluginPortal()\n    }\n    dependencies {\n        classpath 'ru.vyarus:gradle-quality-plugin:6.0.0'\n    }\n}\napply plugin: 'ru.vyarus.quality'\n</code></pre> <p>Warning</p> <p>Plugin must be applied after <code>java</code>, <code>java-library</code> or <code>groovy</code> plugins. Otherwise, it will do nothing.</p> <p>Note</p> <p>Requires java 8 and gradle &gt;= 7.1</p> <p>If you are using lower java versions use previous plugin releases.</p>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>Plugin will auto detect java and groovy sources and activate required quality plugins. All tools will be configured with the default opinionated configs.</p> <p>See init configs task to modify default configs </p> <pre><code>$ gradlew check\n</code></pre> <p>Will execute all quality plugins. Alternatively, you can use grouping task to run checks without tests.</p> <p>If any violations were found then build will fail with all violations printed to console. For example like this:</p> <pre><code>23 PMD rule violations were found in 2 files\n\n[Comments | CommentRequired] sample.(Sample.java:3) \n  headerCommentRequirement Required\n  https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired\n\n...  \n</code></pre> <p>Or you can use build task (which also calls check): </p> <pre><code>$ gradlew build\n</code></pre> <p>Tip</p> <p>It's better to fix all quality issues before commit.</p>"},{"location":"getting-started/#spotbugs","title":"SpotBugs","text":"<p>Spotbugs plugin (java code checks) is not bundled with gradle and so you need to  manually apply it:</p> <pre><code>plugins {\n    id 'java'\n    id 'ru.vyarus.quality' version '6.0.0'\n    id 'com.github.spotbugs' version '6.2.5'\n}\n</code></pre> <p>For multi-module projects, add it in the root module:</p> <pre><code>plugins {\n    id 'com.github.spotbugs' version '6.2.5' apply false\n}\n</code></pre> <p>Quality plugin will apply it automatically in submodules (it must be present in the build classpath so plugin could apply it).</p> <p>Note</p> <p>Before, spotbugs plugin was bundled as a transitive dependency, and so direct plugin declaration was not required. But the actual spotbugs plugin requires java 11, and keeping it as a transitive dependency would mean java 8 compatibility loose, even for groovy projects (not requiring spotbugs at all).</p>"},{"location":"getting-started/#non-strict-mode","title":"Non strict mode","text":"<p>You can switch off strict mode to avoid build failure when quality violations are found:</p> <pre><code>quality {\n    strict = false\n}\n</code></pre> <p>You will still see all violations in the output.</p>"},{"location":"getting-started/#suppress","title":"Suppress","text":"<p>Sometimes a tool could be \"wrong\" for your specific situation.  In this case, a violation could be suppressed: see the exact tool page for suppression hints) (e.g. checstyle suppress).</p> <p>It is completely normal to suppress some warnings! But don't do it too much often. When you put a suppression annotation, you mean: \"I know about this violation, but it is ok for this case\"</p> <p>Note that check name is always printed in square braces:</p> <p><pre><code>[Comments | CommentRequired] sample.(Sample.java:3)\n</code></pre> Use it for suppression (e.g. <code>@SuppressWarnings(\"PMD.CommentRequired\")</code> in case of PMD.</p>"},{"location":"getting-started/#java-projects","title":"Java projects","text":"<p>Note</p> <p>Spotbugs tool requires java 11 and checkstyle requires java 17.</p> <p>You may develop locally on java 17, but run project on java 8 on CI (keep it in mind).</p> <p>See java support notes for details. </p>"},{"location":"getting-started/#examples","title":"Examples","text":"<p>See example projects</p>"},{"location":"about/compatibility/","title":"Gradle compatibility","text":"<p>Plugin compiled for java 8, compatible with java 11 and above</p> Gradle Version 7.1-9 6.0.0 7.0 5.0.0 5.6-6 4.9.0 5.1 4.2.2 4.1 3.4.0 older 2.4.0 <p>Java requirements for quality tools:</p> Tool Default version Java version Checkstyle 11.0.0 17 PMD 7.16.0 8 SpotBugs 4.9.4 11 CodeNarc 3.6.0 8 <p>Incompatible tools will not be enabled: for example, on java 11 Checkstyle will not be enabled.</p>"},{"location":"about/history/","title":"Version history","text":""},{"location":"about/history/#600-2025-08-26","title":"6.0.0 (2025-08-26)","text":"<ul> <li>(BREAKING) Drop gradle 7.0 support (7.1 min requirement due to spotbugs plugin)</li> <li>Update checkstyle 10.12.7 -&gt; 11.0.0 (java 21 records support)<ul> <li>Add PatternVariableAssignment</li> <li>Add UnnecessaryNullCheckWithInstanceOf</li> <li>Add ConstructorsDeclarationGrouping</li> <li>(BREAKING) Remove checkstyle support for java 8 due to remove of the backport project (including maven central)<ul> <li>quality.checkstyleBackport property removed</li> <li>On java 8 checkstyle plugin simply isn't applied</li> </ul> </li> <li>(BREAKING) Checkstyle 11.0 requires java 17 and so for java &lt; 17 it would be disabled<ul> <li>On java 11 you can manually configure 10.26.1 to enable checkstyle   (or use new option fallbackToCompatibleToolVersion to downgrade automatically)</li> </ul> </li> </ul> </li> <li>Update spotbugs 4.8.3 -&gt; 4.9.4 (requires java 11)<ul> <li>On java 8 you can manually configure 4.8.6 to enable spotbugs   (or new option fallbackToCompatibleToolVersion to downgrade automatically)</li> <li>Add <code>quality.spotbugsQuiet = true</code> option which could be used to remove spotbugs warnings   like \"The following classes needed for analysis were missing:\"</li> </ul> </li> <li>Update pmd 6.55 -&gt; 7.16.0 (java 25 support)<ul> <li>Fix gradle plugin for pmd 7 (pmd 7 split jar so plugin classpath must be overridden )</li> <li>Pmd config:<ul> <li>Remove legacy rules</li> <li>Remove AvoidLiteralsInIfCondition</li> <li>Remove AvoidSynchronizedStatement</li> <li>Remove AvoidSynchronizedAtMethodLevel</li> <li>Remove ImplicitFunctionalInterface</li> <li>Change CouplingBetweenObjects 20 -&gt; 25</li> <li>Remove pmdIncremental property (it was useful for already not supported gradle 5.6 - 6.3)</li> </ul> </li> </ul> </li> <li>Update codenarc 3.4.0 -&gt; 3.6.0<ul> <li>Remove new rule NonSerializableFieldInSerializableClass   to avoid enhanced rules enabled warning (and potential problems)</li> </ul> </li> <li>Fix CPD plugin compatibility for version 3.5<ul> <li>Update default xsl file (for html report)</li> </ul> </li> <li>(BREAKING) Spotbugs plugin:<ul> <li>Spotbugs plugin 6.x support</li> <li>Spotbugs plugin is not installed automatically anymore: it should be applied manually   (and quality plugin will configure it as before) because<ul> <li>The latest spotbugs plugin (6.x) requires java 11 (direct dependency would drop java 8 support for the entire plugin)</li> <li>For java 8 spotbugs plugin 5.x could be used</li> </ul> </li> <li>For multimodule projects it is enough to specify spotbugs plugin in the root project (with \"apply false\")</li> <li>Custom spotbugs plugin is not used anymore: now extra dependencies cleared from the check task</li> <li>Fix spotbugs exclusions for multiple affected source sets</li> </ul> </li> <li>Fix default configs caching on plugin version change</li> <li>Add <code>qualityToolVersions</code> task to show applied tools versions. Could be useful for debug   because now spotbugs and checkstyle versions depend on a used java version</li> <li>(BREAKING) Quality extension properties are now wrapped with Property:<ul> <li>groovy builds must use '=': quality.prop = value</li> <li>kotlin builds might require explicit .set(value)</li> </ul> </li> <li>Add <code>quality.fallbackToCompatibleToolVersion</code> option to automatically lower checkstyle   version for java 11 and spotbugs for java 8. False by default (used for tests)</li> <li>Add <code>quality.animalsniffer</code> option to be able to disable animalsniffer plugin configuration</li> <li>quality.checkstyle and quality.spotbugs by default analyze configured tool versions   and, if version is compatible with current jvm, enable tool (no need to manually enable tool, just set version)</li> <li>(BREAKING) <code>quality.sourceSets</code> option now accept strings to simplify configuration   Legacy way with source set objects is available with method: <code>quality.sourceSet(project.sourceSets.main)</code></li> <li>Fix quality tasks up-to-date check</li> <li>Fix build cache for checkstyle tasks</li> <li>Configuration cache support<ul> <li>There is now a separate task copyQualityConfigs actually performing default configs copying   allowing gradle to properly cache default config files</li> </ul> </li> </ul>"},{"location":"about/history/#500-2024-02-01","title":"5.0.0 (2024-02-01)","text":"<ul> <li>(BREAKING) Drop gradle 5 and 6 support</li> <li>Update spotbugs plugin to 5.2.5 (#94)<ul> <li>Remove spotbugsShowStackTraces option because it's not used by spotbugs anymore</li> <li>Custom xsl file is not used for html report - native html report generation used instead</li> <li>Add spotbugs-annotations dependency automatically with compileOnly (to simplify @SuppressFBWarnings usage)   Could be disabled with quality.spotbugsAnnotations = false configuration</li> </ul> </li> <li>Update checkstyle 10.6.0 -&gt; 10.12.7 (gradle metadata fix applied)<ul> <li>Fix links to checkstyle site (site structure changed)</li> </ul> </li> <li>Update spotbugs 4.7.3 -&gt; 4.8.3</li> <li>Update pmd 6.54 -&gt; 6.55 (java 20 support)</li> <li>Update codenarc 3.2.0 -&gt; 3.4.0</li> <li>Remove deprecated gradle apis usage<ul> <li>The plugin is still NOT compatible with configuration cache</li> </ul> </li> </ul>"},{"location":"about/history/#490-2023-02-18","title":"4.9.0 (2023-02-18)","text":"<ul> <li>Gradle 8 support (#77)</li> <li>Update checkstyle 10.3.1 -&gt; 10.6.0</li> <li>Update pmd 6.47 -&gt; 6.54 (java 19 support)</li> <li>Update pmd config:<ul> <li>Disable TestClassWithoutTestCases</li> <li>Rename excluded rule BeanMembersShouldSerialize to NonSerializableClass</li> </ul> </li> <li>Update spotbugs 4.7.1 -&gt; 4.7.3</li> <li>Update codenarc 3.1.0 -&gt; 3.2.0</li> <li>Fix codenarc for groovy4 support: change to x.x-groovy-4.0 version instead of codenarc-groovy4 artifact</li> </ul>"},{"location":"about/history/#480-2022-07-02","title":"4.8.0 (2022-07-02)","text":"<ul> <li>Update checkstyle 9.1 -&gt; 10.3.1   IMPORTANT: Checkstyle 10 requires java 11, but plugin will automatically switch to   backports for lower jre.   Additional maven repository would be registered if required (LIMITED to checkstyle only)   Warning in log would clearly indicate when backport is used</li> <li>New option: quality.checkstyleBackport (by default true for jre &lt; 11)   Option might be used to force backport for java &gt;=11 or to disable backport at all</li> <li>Update checkstyle config:<ul> <li>Add UnusedLocalVariable</li> <li>Change MultipleStringLiterals   to react on strings more than 2 chars only and allow 2 duplicates (to avoid warning in trivial cases)</li> </ul> </li> <li>Update pmd 6.34 -&gt; 6.47 (java 17-18 support)</li> <li>Update pmd config:<ul> <li>Disable AvoidAccessibilityAlteration</li> <li>Change CognitiveComplexity reportLevel to 21 (default 15)</li> <li>Disable ReturnEmptyArrayRatherThanNull as deprecated</li> </ul> </li> <li>Update codenarc 2.2.0 -&gt; 3.1.0  (groovy 4 support)</li> <li>New option: quality.codenarcGroovy4 (by default, true)   Since codenarc 3.1 separate groovy4-based codenarc jar produced (codenarc-groovy4)   It would be used by default because groovy 4 has better adoption for newer JDKs   (codenarc task started with its own groovy so it does not restrict gradle version)   If you need to use older codenarc version then switch this option off manually</li> <li>Update spotbugs 4.4.2 -&gt; 4.7.1</li> <li>Update spotbugs plugin 4.7.9 -&gt; 4.8.0</li> </ul>"},{"location":"about/history/#470-2021-11-10","title":"4.7.0 (2021-11-10)","text":"<ul> <li>Fix gradle 7 deprecation warnings (#30)</li> <li>Update spotbugs plugin 4.7.1 -&gt; 4.7.9   (maven group changed: gradle.plugin.com.github.spotbugs.snom -&gt; com.github.spotbugs.snom)</li> <li>Add spotbugsShowStackTraces option with default to false.   Option introduced to change the default for spotbug's showStackTraces option   to avoid additional stacktrace in logs in non-strict mode (when plugin not fails on errors)</li> <li>Update spotbugs 4.2.3 -&gt; 4.4.2</li> <li>Update spotbugs exclusions:<ul> <li>Exclude EI_EXPOSE_REP   due to confusing false positives</li> <li>Exclude EI_EXPOSE_REP2   due to confusing false positives</li> </ul> </li> <li>Update codenarc 2.1.0 -&gt; 2.2.0</li> <li>Deprecate quality.pmdIncremental property because incremental analysis is enabled by default   since gradle 6.4 (property only useful for enabling it in gradle 5.6 - 6.3)</li> <li>Update checkstyle 8.42 -&gt; 9.1</li> <li>Update checkstyle config:<ul> <li>Add NoWhitespaceBeforeCaseDefaultColon</li> </ul> </li> </ul>"},{"location":"about/history/#460-2021-05-01","title":"4.6.0 (2021-05-01)","text":"<ul> <li>Fix gradle 7 compatibility (for checkstyle plugin)</li> <li>Fix console output on windows (remove special unicode separator characters, appearing incorrectly)</li> <li>Update checkstyle 8.39 -&gt; 8.42</li> <li>Update checkstyle config:<ul> <li>Add RecordComponentName</li> <li>Disable Indentation as causing problems too often   (currently in regression since 8.40)</li> <li>Disable UnnecessaryParentheses due   to often false complains in if statements (especially many misses in 8.42)</li> </ul> </li> <li>Update pmd 6.31 -&gt; 6.34 (java 16 support)</li> <li>Update pmd config:<ul> <li>Disable deprecated UnusedImports,   DuplicateImports,   ImportFromSamePackage,   DontImportJavaLang   (replaced by new UnnecessaryImport rule)</li> </ul> </li> <li>Update spotbugs 4.2.1 -&gt; 4.2.3</li> <li>Update spotbugs plugin 4.6.0 -&gt; 4.7.1</li> <li>Update codenarc 2.0.0 -&gt; 2.1.0</li> </ul>"},{"location":"about/history/#450-2021-02-06","title":"4.5.0 (2021-02-06)","text":"<ul> <li>Fix report separating lines disappear in intellij IDEA output (appears when gradle output recognized as junit test output).   Extra zero-width space symbol used to prevent trims.</li> <li>Update checkstyle 8.36.2 -&gt; 8.39 (not 8.40 due to Indentation check regression)</li> <li>Update checkstyle config:<ul> <li>Add JavadocMissingLeadingAsterisk</li> <li>Disable LambdaBodyLength   as method length check is enough</li> <li>Add optional external suppressions file support:   just create gradle/config/checkstyle/suppressions.xml and it will be used automatically with the default config</li> </ul> </li> <li>Update pmd 6.28 -&gt; 6.31</li> <li>Update pmd config:<ul> <li>Remove AvoidInstantiatingObjectsInLoops   because its useless most of the time</li> <li>Remove AssignmentInOperand   because its quite common technique</li> <li>Remove AvoidUsingVolatile   because it's not an issue but attention pointer</li> <li>Update NcssCount   methodReportLevel from 30 to 40, classReportLevel from 300 to 500</li> </ul> </li> <li>Update spotbugs 4.1.3 -&gt; 4.2.1</li> <li>Update spotbugs plugin 4.5.1 -&gt; 4.6.0</li> <li>Set checkstyle.configDirectory property: required for ${config_loc} variable (#29)</li> </ul>"},{"location":"about/history/#440-2020-10-11","title":"4.4.0 (2020-10-11)","text":"<ul> <li>Update codenarc 1.5 -&gt; 2.0.0 (groovy 3 and java 14 support, requires java 7)</li> <li>Update codenarc config:<ul> <li>Disable new rule ImplicitReturnStatement     because it will cause too many warnings on typical projects and sometimes don't see existing return</li> </ul> </li> <li>Update pmd 6.23 -&gt; 6.28 (java 15 support, text block syntax)</li> <li>Update checkstyle 8.32 -&gt; 8.36.2 (java 14 records support, text block syntax)</li> <li>Update checkstyle config<ul> <li>Add NoCodeInFile</li> <li>Add IllegalIdentifierName</li> <li>Add RecordComponentNumber</li> <li>Add RecordTypeParameterName</li> <li>Add PatternVariableName</li> </ul> </li> <li>Update spotbugs 4.0.3 -&gt; 4.1.3</li> <li>Update spotbugs plugin 4.1.0 -&gt; 4.5.1   </li> <li>Fix exclusions apply for spotbugs (#27)</li> <li>Automatically exclude apt-generated sources for spotbugs    (apt processor(s) assumed to be specified with annotationProcessor configuration)   </li> </ul>"},{"location":"about/history/#430-2020-05-13","title":"4.3.0 (2020-05-13)","text":"<ul> <li>Update spotbugs plugin to 4.1.0 (#26)<ul> <li>Fixes gradle 6.4 compatibility.</li> <li>The new plugin is a re-write of the original spotbugs plugin. But quality plugin    makes it work as before, so you shouldn't see any difference.</li> <li>Minimal supported gradle is now 5.6 (due to spotbugs plugin)  </li> <li>New spotbugs plugin can generate html report itself, but this option is not used</li> </ul> </li> <li>Update spotbugs 4.0.2 -&gt; 4.0.3</li> <li>Update checkstyle 8.31 -&gt; 8.32</li> <li>Update checkstyle config:<ul> <li>New rule JavadocMissingWhitespaceAfterAsterisk</li> </ul> </li> <li>Update pmd 6.22 -&gt; 6.23        </li> </ul> <p>NOTE:     * New spotbugs plugin does not support build cache (https://github.com/spotbugs/spotbugs-gradle-plugin/issues/244)     * Spotbugs task always show an exception when violations found (not a problem, just confusing)</p>"},{"location":"about/history/#422-2020-04-23","title":"4.2.2 (2020-04-23)","text":"<ul> <li>Remove spotbugs configuration \"tuning\" (added in the last version) because it eventually works incorrectly (causing warnings).   Spotbugs 4.0.2 depends on slf4j 1.8 which should avoid compatiblity problems (at least for some time).</li> </ul>"},{"location":"about/history/#421-2020-04-16","title":"4.2.1 (2020-04-16)","text":"<ul> <li>Update spotbugs 4.0.1 -&gt; 4.0.2</li> <li>Revert (and change) spotbugs configuration customizations:<ul> <li>Remove explicit asm dependency for \"spotbugs\" configuration   It was added by mistake: dependency-management plugin applied for all configurations    was actually guilty of incorrect asm version (case description added to documentation)</li> <li>Force correct version of sl4j-simple instead of removing dependency   (nasty warnings introduced in previous release will disappear now)</li> </ul> </li> </ul> <p>Warnings from the previous version are no more actual (except new plugin version (4)).           </p>"},{"location":"about/history/#420-2020-04-15","title":"4.2.0 (2020-04-15)","text":"<ul> <li>Fix gradle configuration fail: \"Cannot access last() element from an empty List\"   (project with explicit quality configuration fails to open in the new IDEA)</li> <li>Fix concurrent default configs initialization clash (#22) </li> <li>Update spotbugs 3.1.12 -&gt; 4.0.1   </li> <li>Spotbugs classpath changes (\"spotbugs\" configuration):<ul> <li>Removed <code>sl4j-simple</code> dependency: you will see default slf4j warnings    but everything will work in all cases and will no more fail due to sl4j version class with gradle's own sl4j (#20)</li> <li><code>asm</code> 7.3.1 is directly specified to force 7.3.1 because otherwise gradle (5.6) downgrades it to 7.2 (which leads to execution fails \"no class def found\").         </li> </ul> </li> <li>Update codenarc 1.4 -&gt; 1.5</li> <li>Update codenarc config:<ul> <li>Disable new rule ImplicitClosureParameter</li> </ul> </li> <li>Fix codenarc link in console report (docs moved from sourceforge to github)</li> <li>Update checkstyle 8.29 -&gt; 8.31</li> <li>Update checkstyle rules:<ul> <li>New rule UnnecessarySemicolonAfterOuterTypeDeclaration</li> <li>Disable new rule AvoidDoubleBraceInitialization</li> <li>Update NewlineAtEndOfFile      lineSeparator configuration to default (lf_cr_crlf) because rule fixed in 8.30 and now may cause too many violations </li> </ul> </li> <li>Fix checkstyle link in console report (sourceforge.net changed to sourceforge.io to avoid redirect)</li> <li>Update pmd 6.21 -&gt; 6.22 </li> </ul> <p>WARNING (spotbugs related):  1. If you want to downgrade spotbugs version (with <code>quality.spotbugsVersion = ..</code>) then you'll have    to also force correct asm version on spotbugs configuration. 2. If you need to see spotbugs logs, then manually add <code>slf4j-simple</code> dependency to spotbugs configuration.    (normally, spotbugs logs are not important and removing dependency fixes some environments) 3. If you don't want to see sl4j default warnings then simply put <code>slf4j-nop</code> dependency into spotbugs     configuration. I can't do it automatically because I may introduce new sl4j compatibility problems due to incorrect version.      4. I know, there is a new spotbugs plugin 4.0.5,    but it is conceptually different, so old version would be used for some time. (I tried to upgrade, but it requires time to resolve all issues) 5. BUT with all this, spotbugs 4 should work without problems for everyone!    </p>"},{"location":"about/history/#410-2020-02-15","title":"4.1.0 (2020-02-15)","text":"<ul> <li>Fix disabled plugin execution with no-tasks gradle run (pure initialization) (#21)</li> <li>Update checkstyle 8.26 -&gt; 8.29</li> <li>Update checkstyle config:<ul> <li>Add new checks:<ul> <li>AvoidNoArgumentSuperConstructorCall</li> <li>NoEnumTrailingComma</li> <li>NoArrayTrailingComma</li> <li>JavadocContentLocation</li> </ul> </li> </ul> </li> <li>Update pmd 6.17.0 -&gt; 6.21.0 </li> <li>Update pmd config:<ul> <li>Disabled rule <code>InvalidSlf4jMessageFormat</code> name changed to <code>InvalidLogMessageFormat</code></li> </ul> </li> </ul>"},{"location":"about/history/#400-2019-11-16","title":"4.0.0  (2019-11-16)","text":"<ul> <li>Gradle 6.0 compatibility<ul> <li>(breaking) Removed findbugs plugin support because it was removed in gradle 6</li> </ul> </li> <li>(breaking) Minimal required gradle is now 5.1     </li> <li>Update spotbugs 3.1.11 -&gt; 3.1.12</li> <li>Update com.github.spotbugs plugin: 1.6.5 -&gt; 2.0.1<ul> <li>Note that plugin group changed: gradle.plugin.com.github.spotbugs -&gt; com.github.spotbugs</li> </ul> </li> <li>Add spotbugs-related options:<ul> <li>spotbugsMaxHeapSize setting may be used to increase default spotbugs memory (reduced to 512mb in gradle 5).     Option does not override maxHeapSize manually set on spotbugs task (to not break working builds) (#12)</li> <li>spotbugsMaxRank setting allows to filter low-ranked rules (ranks are different from priorities!) (#15)     Option modifies excludes.xml file (the only way to apply rank threshold)</li> <li>spotbugsPlugin shortcut method to simplify plugins declaration (without afterEvaluate block or manual spotbugs plugin declaration)    </li> </ul> </li> <li>Spotbugs console report changes:<ul> <li>Show both rule rank and priority : <code>[priority 2 / rank 14]</code></li> <li>Identify rules from plugins: <code>[fb-contrib project | Correctness | FCBL_FIELD_COULD_BE_LOCAL]</code> </li> </ul> </li> <li>Update codenarc 1.3 -&gt; 1.4</li> <li>Update checkstyle 8.17 -&gt; 8.26</li> <li>Update checkstyle config:<ul> <li>Disable TrailingComment     as not useful and contradicting with PMD suppression syntax (<code>// NOPMD</code>)</li> <li>Add new checks:<ul> <li>MissingJavadocPackage</li> <li>MissingJavadocType</li> <li>UnnecessarySemicolonInTryWithResources</li> <li>UnnecessarySemicolonInEnumeration</li> <li>UnnecessarySemicolonAfterTypeMemberDeclaration</li> <li>InvalidJavadocPosition </li> <li>JavadocBlockTagLocation</li> </ul> </li> <li>Disable new checks:<ul> <li>OrderedProperties</li> <li>MissingJavadocMethod </li> </ul> </li> </ul> </li> <li>Update pmd 6.11.0 -&gt; 6.17.0     NOTE: 6.18 or 6.19 can't be used due to regression (should be fixed in 6.20) </li> <li>Update pmd config:<ul> <li>Add 1 as allowed \"magic number\" for AvoidLiteralsInIfCondition</li> <li>Disable new rule AvoidUncheckedExceptionsInSignatures     because it produces false positives for implemented interfaces (and generally not useful)</li> <li>Remove <code>java.lang.AutoCloseable</code> in CloseResource rule     because it produces too many false positives    </li> </ul> </li> <li>Add <code>pmdIncremental</code> option - shortcut for gradle's <code>pmd.incrementalAnalysis</code> option. Disabled by default.    </li> <li>Add PMD's CPD tool support through de.aaschmid.cpd plugin. (#4) <ul> <li>CPD gradle plugin must be applied manually: no automatic plugin enabling  </li> <li>Sets pmd version and silent mode. </li> <li>Sources configured according to quality configuration. Exclusions (source and pattern) are supported too </li> <li>Html report generated (using style recommended by pmd; style file added as overridable config)</li> <li>Full console report (like for other quality plugins)  </li> <li>Support for multi-module projects (where cpd plugin applied in root project and quality in subprojects)</li> </ul> </li> <li>Use gradle configuration avoidance to prevent not used quality tasks creation</li> <li>Use <code>compilerArgumentProviders</code> instead of direct options modification (<code>JavaCompile.options.compilerArgs</code>) to workaround      possible immutable list usage in options (#19)</li> </ul>"},{"location":"about/history/#340-2019-02-16","title":"3.4.0  (2019-02-16)","text":"<ul> <li>Fix source files root detection (#13)</li> <li>Set spotbugs tasks default heap size to 1g to mimic old behaviour in gradle 5 (#12)</li> <li>Update pmd 6.9.0 -&gt; 6.11.0   </li> <li>Update checkstyle 8.14 -&gt; 8.17</li> <li>Update spotbugs 3.1.9 -&gt; 3.1.11</li> <li>Update codenarc 1.2.1 -&gt; 1.3</li> <li>Update codenarc config:<ul> <li>Add new ruleset Comments</li> <li>Disable new rule ClassStartsWithBlankLine</li> <li>Disable new rule ClassEndsWithBlankLine</li> </ul> </li> </ul>"},{"location":"about/history/#330-2018-11-23","title":"3.3.0 (2018-11-23)","text":"<ul> <li>Update pmd config:<ul> <li>Allow camel cased enum constants for FieldNamingConventions</li> </ul> </li> <li>Update spotbugs 3.1.6 -&gt; 3.1.9</li> <li>Update com.github.spotbugs plugin 1.6.3 -&gt; 1.6.5 </li> <li>Update checkstyle 8.12 -&gt; 8.14</li> <li>Update pmd 6.7.0 -&gt; 6.9.0    </li> </ul>"},{"location":"about/history/#320-2018-09-11","title":"3.2.0 (2018-09-11)","text":"<ul> <li>Gradle 4.10 compatibility:<ul> <li>updated com.github.spotbugs plugin 1.6.2 -&gt; 1.6.3  </li> </ul> </li> <li>Update checkstyle 8.11 -&gt; 8.12    </li> <li>Update pmd 6.5.0 -&gt; 6.7.0     </li> <li>Update codenarc 1.2 -&gt; 1.2.1</li> </ul>"},{"location":"about/history/#311-2018-07-22","title":"3.1.1 (2018-07-22)","text":"<ul> <li>Fix maven central and jcenter artifacts (missed dependency) (#9)</li> <li>Update spotbugs 3.1.5 -&gt; 3.1.6 </li> </ul>"},{"location":"about/history/#310-2018-07-13","title":"3.1.0 (2018-07-13)","text":"<ul> <li>Gradle 4.8 compatibility:<ul> <li>updated com.github.spotbugs plugin 1.6.1 -&gt; 1.6.2  </li> <li>fix exclusions support </li> </ul> </li> <li>Update checkstyle 8.8 -&gt; 8.11</li> <li>Update checkstyle config:<ul> <li>New check LambdaParameterName </li> </ul> </li> <li>Update pmd 6.1.0 -&gt; 6.5.0 </li> <li>Update pmd config:<ul> <li>Disable ClassNamingConventions</li> </ul> </li> <li>Update spotbugs 3.1.2 -&gt; 3.1.5 </li> <li>Update codenarc 1.1 -&gt; 1.2</li> <li>Update codenarc config:<ul> <li>Disable new check NoJavaUtilDate </li> </ul> </li> <li>Option to disable html reports: quality.htmlReports=false (#5)</li> </ul>"},{"location":"about/history/#300-2018-03-25","title":"3.0.0 (2018-03-25)","text":"<ul> <li>Update codenarc 1.0 -&gt; 1.1</li> <li>Update checkstyle 8.2 -&gt; 8.8</li> <li>Update pmd 5.8.1 -&gt; 6.1.0</li> <li>Update pmd config:<ul> <li>(breaking) All rules reordered according to new groups</li> <li>Disable CommentDefaultAccessModifier as not useful</li> <li>Disable ExcessiveClassLength     and ExcessiveMethodLength     in favor of new rule NcssCount (which counts lengths without empty lines and comments)</li> <li>Defaults for NcssCount (which counts length without empty lines and comments) changed:     30 lines for method and 300 for class (with previous Excessive* rules it was 50 and 500 accordingly)</li> <li>Disable new rule DataClass as too strict for general cases</li> <li>Switch from ModifiedCyclomaticComplexity (deprecated) to     CyclomaticComplexity with ignoreBooleanPaths option                 </li> </ul> </li> <li>(breaking) use Spotbugs (3.1.2) instead of Findbugs by default (as successor)<ul> <li>com.github.spotbugs external plugin applied (quality plugin brings it as a dependency)</li> <li>Spotbugs plugin will use configs from different folder (spotbugs/), so if custom findbugs configs were used move them to spotbugs/ folder    </li> <li>Findbugs support is deprecated and will be removed someday (but not soon). </li> <li>To use findbugs (as before): disable spotbugs support (quality.spotbugs = false)     or enable findbugs plugin manually (in this case spotbugs plugin will not be registered)  </li> </ul> </li> <li>Update spotbugs exclusions:<ul> <li>Exclude NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION      check as it prevents @Nullable override, which may be required for guava functions</li> <li>Exclude NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE      check as misleading and not useful </li> </ul> </li> </ul>"},{"location":"about/history/#240-2017-09-21","title":"2.4.0 (2017-09-21)","text":"<ul> <li>Support gradle 4.2 (#3)    </li> <li>Update checkstyle 8.0 -&gt; 8.2</li> <li>Update codenarc 0.27.0 -&gt; 1.0</li> <li>Update checkstyle config:<ul> <li>Move SuppressionCommentFilter inside TreeWalker (8.1 breaking change)</li> <li>Remove FileContentsHolder (8.2 breaking change) </li> <li>New check AnnotationOnSameLine (added in 8.2) added to config, but disabled</li> </ul> </li> </ul>"},{"location":"about/history/#230-2017-07-24","title":"2.3.0 (2017-07-24)","text":"<ul> <li>Update checkstyle 7.6 -&gt; 8.0</li> <li>Update pmd 5.5.4 -&gt; 5.8.1</li> <li>Update pmd config:<ul> <li>Add description to avoid warning</li> <li>Disable AccessorMethodGeneration check as it makes sense for android projects and not so important for java.  Moreover, possible fixes will contradict with checkstyle's VisibilityModifier </li> </ul> </li> </ul>"},{"location":"about/history/#220-2017-03-21","title":"2.2.0 (2017-03-21)","text":"<ul> <li>Update checkstyle 7.4 -&gt; 7.6</li> <li>Update pmd 5.5.2 -&gt; 5.5.4</li> <li>Update codenarc 0.26.0 -&gt; 0.27.0</li> <li>Update pmd config:<ul> <li>Disable NullAssignment check due to false positives</li> </ul> </li> <li>Add unified exclusion patterns (glob) configuration: exclude (#2)<ul> <li>Does not affect animalsniffer because it's a different type of check</li> <li>Findbugs did not support direct exclusions, so plugin resolves excluded classes and adds them to exclusion xml (default or user defined)</li> </ul> </li> <li>Add configuration to directly exclude source files from check (for exceptional cases when pattern exclusion cant help): excludeSources<ul> <li>Does not affect animalsniffer</li> <li>For findbugs excluded classes will be added to exclusions xml filter   </li> </ul> </li> </ul>"},{"location":"about/history/#210-2017-01-24","title":"2.1.0 (2017-01-24)","text":"<ul> <li>Update checkstyle 7.1 -&gt; 7.4</li> <li>Update pmd 5.5.1 -&gt; 5.5.2</li> <li>Update codenarc 0.25.2 -&gt; 0.26.0</li> <li>Update pmd config:<ul> <li>Disable junit4 migration rules which cause false positives for non test code: JUnit4TestShouldUseBeforeAnnotation, JUnit4TestShouldUseAfterAnnotation, JUnit4TestShouldUseTestAnnotation </li> </ul> </li> </ul>"},{"location":"about/history/#200-2016-09-03","title":"2.0.0 (2016-09-03)","text":"<ul> <li>Update checkstyle 6.17 -&gt; 7.1 (requires min jdk 8)</li> <li>Update checkstyle config:<ul> <li>Add SingleSpaceSeparator check (since 6.19)</li> <li>Disable FileLength check in favour of more correct PMD ExcessiveClassLength check (which checks actual class length not file)</li> <li>Enable ReturnCount to replace pmd OnlyOneReturn check</li> </ul> </li> <li>Update pmd 5.4.1 -&gt; 5.5.1 (requires min jdk 7)</li> <li>Update pmd config:<ul> <li>Disable UselessParentheses because of too many false positives</li> <li>Disable OnlyOneReturn in favour of checkstyle ReturnCount</li> <li>Disable InvalidSlf4jMessageFormat due to known bug</li> <li>Disable CyclomaticComplexity and StdCyclomaticComplexity as duplicate rules for ModifiedCyclomaticComplexity</li> </ul> </li> <li>Update codenarc 0.25.1 -&gt; 0.25.2</li> <li>(breaking) quality.lintOptions configuration now applies to all JavaCompile tasks (not only to compileJava as before) </li> <li>Fix multi-module projects reporting (remove duplicate reports)</li> <li>Fix generated html reports links (redundant slash on linux)</li> <li>Fix newline in reporters (use platform specific)</li> <li>Change reporting format so intelliJ IDEA can recognize class reference and show link (eclipse will probably too). Reference line ranges are not shown anymore (pmd, findbugs and column in checkstyle) - always exact line.</li> <li>(breaking) configure manually registered plugins, even if plugin not supposed to be used due to sources auto detection. Configuration may be disabled using quality configuration flags.</li> <li>Add ability to disable automatic plugins registration: quality.autoRegistration = false. Only manually registered plugins will be configured.</li> <li>Add ability to disable quality tasks with configuration property: quality.enabled = false. Quality tasks will still work if called directly or through grouping task (e.g. checkQualityMain).</li> <li>(breaking) Remove checkstyle html report generation: gradle can generate html report since 2.10 and when gradle generates html report, it puts link to it into main error message</li> <li>Findbugs html report is always generated (not only when errors found like before)</li> <li>Add ability to disable console reporting with configuration property: quality.consoleReporting = false</li> <li>Add grouping tasks for registered quality plugins: checkQualityMain, checkQualityTest (per source set). Allows running quality tasks for exact source set or run quality tasks not enabled for 'check' task.</li> </ul>"},{"location":"about/history/#130-2016-03-30","title":"1.3.0 (2016-03-30)","text":"<ul> <li>Update checkstyle 6.14.1 -&gt; 6.17</li> <li>Update codenarc 0.24.1 -&gt; 0.25.1 </li> <li>Disable default checkstyle html report (enabled in gradle &gt;=2.10) to avoid duplicate report generation</li> <li>Add reporting execution time logging (visible with --info option)</li> <li>Update default checkstyle config:<ul> <li>Disable Misc/UncommentedMain</li> </ul> </li> </ul>"},{"location":"about/history/#120-2016-01-01","title":"1.2.0 (2016-01-01)","text":"<ul> <li>Update default configs: <ul> <li>Disable Pmd/Controversial/AvoidFinalLocalVariable</li> <li>Pmd/Design/AvoidDeeplyNestedIfStmts default set to 4</li> <li>Checkstyle/Coding/NestedIfDepth default set to 3</li> <li>Add disabled check in config Checkstyle/Naming/CatchParameterName </li> </ul> </li> <li>Update checkstyle 6.13 -&gt; 6.14.1     </li> </ul>"},{"location":"about/history/#111-2015-12-24","title":"1.1.1 (2015-12-24)","text":"<ul> <li>Fix AnimalSniffer version configuration</li> </ul>"},{"location":"about/history/#110-2015-12-21","title":"1.1.0 (2015-12-21)","text":"<ul> <li>Add ru.vyarus.animalsniffer plugin configuration support</li> <li>Improve FindBugs console output</li> </ul>"},{"location":"about/history/#103-2015-12-11","title":"1.0.3 (2015-12-11)","text":"<ul> <li>Delay default configs copying to actual task execution to avoid problems with clean task</li> </ul>"},{"location":"about/history/#102-2015-12-06","title":"1.0.2 (2015-12-06)","text":"<ul> <li>Unescape CodeNarc messages</li> <li>Update checkstyle 6.12.1 -&gt; 6.13</li> <li>Update pmd 5.4.0 -&gt; 5.4.1</li> </ul>"},{"location":"about/history/#101-2015-12-04","title":"1.0.1 (2015-12-04)","text":"<ul> <li>Don't activate CodeNarc if groovy plugin enabled but no groovy sources folder exists</li> </ul>"},{"location":"about/history/#100-2015-11-19","title":"1.0.0 (2015-11-19)","text":"<ul> <li>Initial release</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright \u00a9 2015-2025 Vyacheslav Rusakov</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/release-notes/","title":"6.0.0 Release notes","text":"<p>Summary:</p> <ul> <li>Configuration cache support</li> <li><code>quality.sourceSets</code> configuration use source set names (instead of objects)</li> <li>\"UP-TO-DATE\"-related fixes for quality tasks (proper build cache support)</li> <li>New default tools side effects:<ul> <li>Checkstyle 11 requires java 17  (not enabled on java &lt; 17)</li> <li>Spotbugs 4.9.4 requires java 11 (not enabled on java &lt; 11)</li> </ul> </li> <li>Spotbugs plugin dependency is not auto-applied anymore (plugin must be declared manually now)</li> <li>New tasks:<ul> <li><code>copyQualityConfigs</code> (used to prepare default quality configs)</li> <li><code>qualityToolVersions</code> (used to show active tool versions)</li> </ul> </li> <li>New options:<ul> <li><code>quality.fallbackToCompatibleToolVersion</code>  - auto downgrade spotbugs and checkstyle versions based on current java (for tests)</li> <li><code>quality.animalsniffer</code> - ability to disable animalsniffer plugin configuration</li> <li><code>quality.spotbugsQuiet</code> - disable spotbugs warnings (for annoying warnings)</li> </ul> </li> <li>Gradle 7.1 as minimal requirement</li> </ul> <p>Migration guide</p>"},{"location":"about/release-notes/#breaking-changes","title":"Breaking changes","text":""},{"location":"about/release-notes/#extension","title":"Extension","text":"<p><code>quality</code> extension now use gradle properties instead of fields.</p> <p>For groovy builds, you'll have to use <code>=</code> to assign values: <code>quality.key = value</code>. For kotlin builds, it might be required to use <code>quality.key.set(value)</code> (in some cases).</p> <p><code>quality.sourceSets</code> option now accept strings instead of source set objects. This was done to simplify configuration (especially for kotlin): instead of <code>sourceSets = [project.sourceSets.main]</code> now use <code>sourceSets = ['main']</code></p> <p>Legacy configuration with object is available with method:</p> <pre><code>quality.sourceSets(project.sourceSets.main, project.sourceSets.test)\n</code></pre> <p>or with list</p> <pre><code>quality.sourceSets([project.sourceSets.main, project.sourceSets.test])\n</code></pre>"},{"location":"about/release-notes/#checkstyle","title":"Checkstyle","text":"<p>Checkstyle java 8 backport project disappeared (removed in maven central and from github),  so checkstyle plugin can't be used on java 8 anymore. </p> <p>Checkstyle 11 (configured by default) requires java 17.</p> <p>New behavior</p> <p>Plugin will use checkstyle 11 on java 17 and disable checkstyle automatically on java 8-16. If checkstyle 10 is configured manually: <code>quality.checkstyleVersion = '10.26.1'</code>, plugin would be enabled automatically on java 11.</p>"},{"location":"about/release-notes/#spotbugs","title":"Spotbugs","text":"<p>The latest spotbugs plugin 6.x requiers java 11 (also the latest spotbugs itself). In order to not lose java 8 compatibility for projects not requiring spotbugs at all, plugin will not automatically apply spotbugs dependency anymore.</p> <p>New behavior</p> <p>Now you need to apply spotbugs plugin manually: <pre><code>plugins {\n    id 'java'\n    id 'ru.vyarus.quality' version '6.0.0'\n    id 'com.github.spotbugs' version '6.2.5'\n}\n</code></pre> When spotbugs plugin is detected in classpath, it would be configured automatically.</p> <p>Note that for multi-module builds, you can apply spotbugs plugin only in root module:</p> <pre><code>plugins {\n    id 'com.github.spotbugs' version '6.2.5' apply false\n}\n</code></pre> <p>And quality plugin would enable it in submodules automatically.</p> <p>Spotbugs plugin 5.x could be used if java 8 compatibility is required:</p> <pre><code>plugins {\n    id 'com.github.spotbugs' version '5.2.5' apply false\n}\n</code></pre> <p>\"apply false\" is required because otherwise spotbugs plugin would be active on java 8</p>"},{"location":"about/release-notes/#quiet-mode","title":"Quiet mode","text":"<p>Sometimes spotbugs produce nasty warnings like:</p> <pre><code>The following classes needed for analysis were missing:\n  org.junit.Before\n  org.junit.After\n</code></pre> <p>Moreover, you will see it 2 times (for each generated report).</p> <p>There is nothing you could do about it, so using spotbugs -quiet option is a good choice. To automatically apply quiet for all spotbugs tasks:</p> <pre><code>quality.spotbugsQuiet = true\n</code></pre>"},{"location":"about/release-notes/#java-11-support","title":"Java 11 support","text":"<p>If your project runs on java 11 - 16 and requires checkstyle run on it: by default, plugin will disable checkstyle on java 11 (it is completely ok to run quality tools only on java 17).</p> <p>If you need to run checkstyle on java 11 (16) then specify checkstyle 10.x: <code>quality.checkstyleVersion = '10.26.1'</code> and plugin will enable checkstyle automatically (recognize a compatible version).</p> <p>No changes for projects not using checkstyle.</p> <p>See migration guide for more details.</p>"},{"location":"about/release-notes/#java-8-support","title":"Java 8 support","text":"<p>If your project runs on java 8 (for example, on CI) and you need spotbugs: then you can't use spotbugs plugin 6.x  (there is no way in gradle to disable plugin for specific java version).</p> <p>You'll have to use spotbugs plugin 5.x (it is compatible with java 8) and reduce spotbugs version:</p> <pre><code>plugins {\n    id 'java'\n    id 'ru.vyarus.quality' version '6.0.0'\n    id 'com.github.spotbugs' version '5.2.5' apply false\n}\n\nquality {\n    spotbugsVersion = '4.8.6'\n}\n</code></pre> <p>See migration guide for more details.</p> <p>No changes for projects not using spotbugs.</p>"},{"location":"about/release-notes/#gradle-70","title":"Gradle 7.0","text":"<p>Gradle 7.0 is not supported anymore. Minimal supported version is 7.1.</p> <p>This is due to minimal requirement of spotbugs plugin 6.x (gradle 7.0 simply not tested now  for compatibility)</p>"},{"location":"about/release-notes/#gradle-caches","title":"Gradle caches","text":"<p>Before, plugin was using doFirst/doLast hooks on quality tasks to configure them. It was causing problems with configuration and even build cache (quality tasks UP-TO-DATE checks).</p> <p>Plugin is now fully compatible with configuration cache</p> <p>To solve cache problems, plugin now use a separate task: <code>copyQualityConfigs</code>, which prepares all required config files (default configs) for quality tasks.</p> <p>As the task prepares config files before quality tasks execution, quality tasks UP-TO-DATE check (build cache) is correct now (you'll see fewer executions)</p> <p>Note</p> <p>Quality plugin prints console output even for UP-TO-DATE quality tasks (so task may not execute,  but a console report would be shown)</p>"},{"location":"about/release-notes/#tool-versions-task","title":"Tool versions task","text":"<p>There is a new <code>qualityToolVersions</code> task, showing configured versions for active tools.</p> <p>For example, for java project output would look like:</p> <pre><code>&gt; Task :qualityToolVersions\nJava version: 17\nGradle version: 8.14.3\nCheckstyle: 11.0.0\nPMD: 7.16.0\n</code></pre> <p>If some tools were disabled (but applicable for current project sources),  it would be notified:</p> <pre><code>&gt; Task :qualityToolVersions\nJava version: 8\nGradle version: 8.14.3\nCheckstyle: disabled\nPMD: 7.16.0\nSpotBugs: disabled\n</code></pre>"},{"location":"about/release-notes/#cpd","title":"CPD","text":"<ul> <li>Fixed cpd plugin 3.5 compatibility</li> <li>Updated default xsl file (used for html report creation)</li> </ul>"},{"location":"about/release-notes/#animlansiffer","title":"Animlansiffer","text":"<p>Added <code>quality.animalsniffer</code> option to be able to diable animalsniffer plugin configuration:</p> <pre><code>quality.animalsniffer = false\n</code></pre>"},{"location":"about/release-notes/#updated-tools-and-default-configs","title":"Updated tools and default configs","text":"<p>Updated tool versions:</p> Tool Old version New version Notes Checkstyle 10.12.7 11.0.0 java 21 records support, requires java 17 Spotbugs 4.8.3 4.9.4 requires java 11 PMD 6.55 7.16.0 java 25 support CodeNarc 3.4.0 3.6.0"},{"location":"about/release-notes/#checkstyle_1","title":"Checkstyle","text":"<p>Default value for <code>quality.checkstyle</code> now depends on configured <code>checkstyleVersion</code>:</p> <ul> <li>For checkstyle 11 (default) <code>quality.checkstyle = false</code> on java &lt; 17</li> <li>For checkstyle 10 (manually declared <code>quality.checkstyleVersion = '10.26.1'</code>) <code>quality.checkstyle = false</code> on java &lt; 11</li> </ul> <p>Default config changes:</p> <ul> <li>Add PatternVariableAssignment</li> <li>Add UnnecessaryNullCheckWithInstanceOf</li> <li>Add ConstructorsDeclarationGrouping</li> </ul>"},{"location":"about/release-notes/#spotbugs_1","title":"Spotbugs","text":"<p>Default value for <code>qulity.spotbugs</code> now depends on configured <code>spotbugsVersion</code>:</p> <ul> <li>For spotbugs 4.9 (default) <code>quality.spotbugs = false</code> on java &lt; 11</li> <li>For spotbugs 4.8 (manually declared <code>quality.spotbugsVersion = '4.8.6'</code>) <code>quality.spotbugs = true</code></li> </ul> <p>Fixed support for <code>quality.exclude</code> and <code>quality.excludeSources</code> exclusions for multiple souces sets (such excludes applied as dynamically generated rules in spotbugs exclusion xml config)</p>"},{"location":"about/release-notes/#pmd","title":"PMD","text":"<p>Pmd 7 now requires two separate jars: pmd-ant and pmd-java. Native pmd 7 support was added in gradle 8.3</p> <p>To support running pmd on older (&lt;8.3) gradle versions, the plugin will manually override the default pmd classpath:</p> <pre><code>dependencies {\n    pmd(\"net.sourceforge.pmd:pmd-ant:${quality.pmdVersion.get()}\")\n    pmd(\"net.sourceforge.pmd:pmd-java:${quality.pmdVersion.get()}\")\n}\n</code></pre> <p>Updated default config:</p> <ul> <li>Remove legacy rules</li> <li>Remove AvoidLiteralsInIfCondition</li> <li>Remove AvoidSynchronizedStatement</li> <li>Remove AvoidSynchronizedAtMethodLevel</li> <li>Remove ImplicitFunctionalInterface</li> <li>Change CouplingBetweenObjects 20 -&gt; 25</li> </ul> <p>Removed stale <code>quality.pmdIncremental</code> property. It was required for gradle 5.6 - 6.3 only (currently not supported).</p>"},{"location":"about/release-notes/#codenarc","title":"CodeNarc","text":"<p>Update default config:</p> <ul> <li>Remove new rule NonSerializableFieldInSerializableClass   to avoid enhanced rules enabled warning (and potential problems)</li> </ul>"},{"location":"about/release-notes/#auto-fallback-tools","title":"Auto fallback tools","text":"<p>There is a new option to automatically fallback spotbugs and checkstyle versions according to context java version:</p> <pre><code>quality.fallbackToCompatibleToolVersion = true\n</code></pre> <p>Warning</p> <p>This option was added to simplify plugin testing. It is not recommended to use it in production because, if you run project on different java versions (on CI), then different tool versions would be used, which may cause different results. Better restrict quality tasks to  upper-most compatible java version.</p>"},{"location":"about/release-notes/#migration-guide","title":"Migration guide","text":"<p>For groovy build scripts it is required to use <code>=</code> for extension properties assignment:</p> <pre><code>quality.spotbugs = true\n</code></pre> <p>For kotlin builds it might be required to use <code>property.set(value)</code> in some cases</p> <p><code>quality.sourceSets</code> now accept source set names, so instead of <code>[project.sourceSets.main]</code> use <code>['main']</code> as value. Legacy configuration is available with method: <code>quality.sourceSets(project.sourceSets.main)</code></p> <p>The following only affects java projects, using checkstyle and/or spotbugs.</p>"},{"location":"about/release-notes/#spotbugs_2","title":"Spotbugs","text":"<p>If you want to use spotbugs, apply plugin manually:</p> <pre><code> plugins {\n    id 'java'\n    id 'ru.vyarus.quality' version '6.0.0'\n    id 'com.github.spotbugs' version '6.2.5'\n}\n</code></pre> <p>In multi-module projects, it would be enough to apply spotbugs plugin only in root module:</p> <pre><code>plugins {\n    id 'com.github.spotbugs' version '6.2.5' apply false\n}\n</code></pre>"},{"location":"about/release-notes/#java-11-support_1","title":"Java 11 support","text":"<p>Checkstyle 11 (configured by default) will be disabled on java 11 automatically.  This is completely fine: no need to run tools on multiple java versions.</p> <p>If you only use java 11 then checkstyle could be enabled by downgrading its version:</p> <pre><code>quality.checkstyleVersion = '10.26.1'\n</code></pre>"},{"location":"about/release-notes/#java-8-support_1","title":"Java 8 support","text":"<p>There is no way to enable checkstyle on java 8. But it would not be a problem:  plugin will not try to enable checkstyle on java 8. </p> <p>Spotbugs plugin 6.x is not compatible with java 8. In case when you use multiple jvm on CI: 8, 11, 17, there is no way to use spotbugs plugin 6.x only on java 11 and 17 (not possible to apply plugin conditionally).</p> <p>You can only downgrade spotbugs plugin to 5.x (compatible with java 8):</p> <pre><code>plugins {\n    id 'com.github.spotbugs' version '5.2.5' apply false\n}\n</code></pre> <p>\"apply false\" is required because otherwise spotbugs plugin would be active on java 8</p> <p>Alternative (not recommended)</p> <p>The problem with spotbugs plugin 6.x on java 8 would be that gradle would not be able to find a compatible version (thanks to gradle metadata). But you can cheat gradle to ignore  java version checks:</p> <p><pre><code>import org.gradle.api.attributes.java.TargetJvmVersion\n\nbuildscript {\n    configurations.classpath.attributes.attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 11)\n}\n\nplugins {\n    id 'java'\n    id 'ru.vyarus.quality' version '6.0.0'\n    id 'com.github.spotbugs' version '6.2.5' apply false\n}\n</code></pre> This way, gradle would apply spotbugs plugin 6.x on java 8, but the quality plugin will not activate it, and so everything would work fine.</p> <p>Also, spotbugs 4.9.x (tool) is also not compatible with java 8.</p> <p>If you run on multiple java versions, then do nothing: plugin would not enable spotbugs on java 8 (and spotbugs would be used on java 11 and above).</p> <p>If you run only on java 8, then downgrade spotbugs to 4.8.x:</p> <pre><code>quality.spotbugsVersion = '4.8.6'\n</code></pre>"},{"location":"guide/automatic/","title":"Automatic mode","text":"<p>By default, plugin works in automatic mode and does not require configuration to run.</p>"},{"location":"guide/automatic/#plugins","title":"Plugins","text":"<p>Java quality tool plugins will be activated if java sources are present (<code>src/main/java</code>): Checkstyle,  PMD and  SpotBugs.</p> <p>Note</p> <p>Only SpotBugs plugin must be explicitly registered (quality plugin only configures it)</p> <p>Groovy quality plugins will be activated if groovy sources are present (<code>src/main/groovy</code>): CodeNarc</p> <p>If you have both java and groovy sources then all plugins will be enabled (and they will not conflict).</p> <p>If animalsniffer plugin was manually registered then it would be  configured the same way as other quality plugins (quality configuration unification).</p> <p>If cpd plugin was manually registered then it would be configured (but note  that cpd plugin differ from other plugins in behavior)</p>"},{"location":"guide/automatic/#scope","title":"Scope","text":"<p>All quality plugins register a check task per source set. For example, <code>checkstyleMain</code>, <code>checkstyleTest</code>. But <code>check</code> task depend only on quality tasks from configured scopes. </p> <p>By default, all activated plugins will check only main source set: only *Main quality tasks will be executed during <code>check</code> (or <code>build</code>). You can call quality task for not configured source set manually (e.g. <code>checkstyleTest</code>).</p> <p>Hint</p> <p>To enable test sources check: <code>quality.sourceSets = [sourceSets.main, sourceSets.test]</code></p> <p>Hint</p> <p>To run all checks for source set use grouping task</p>"},{"location":"guide/automatic/#configs","title":"Configs","text":"<p>Plugin provides default configs for all tools. These configs are opinionated: not all possible checks are enabled, just the sane majority of them. Also, some defaults were changed. Anyway, all disabled checks are commented in config files, so it would be clear what was disabled.</p> <p>You can modify one or more configs with initConfigsTask.  </p>"},{"location":"guide/automatic/#manually-registered-plugins-configuration","title":"Manually registered plugins configuration","text":"<p>If you register any quality plugin manually then it will be configured even if it's not supposed to be registered by project sources.</p> <p>For example, project contains only java sources (<code>/src/main/java</code>) and codenarc plugin registered manually:</p> <pre><code>plugins {\n    id 'groovy'\n    id 'codenarc'\n    id 'ru.vyarus.quality'\n}\n</code></pre> <p>Then quality plugin will register checkstyle, pmd and spotbugs plugins and configure codenarc plugin (which is not supposed to be used according to current sources). </p> <p>To prevent manually registered plugin configuration use referenced quality option. For example, to prevent codenarc plugin configuration in example above:</p> <pre><code>quality {\n    codenarc = false\n}\n</code></pre>"},{"location":"guide/config/","title":"Configuration","text":"<p>Use <code>quality</code> closure to configure plugin.</p> <p>Note</p> <p>All configuration options are optional. All properties use gradle <code>Property</code>, except <code>excludeSources</code>, which means kotlin configs might  require <code>property.set(value)</code> syntax</p> <p>Defaults:</p> <pre><code>quality {\n\n    // Tools versions\n\n    checkstyleVersion = '11.0.0'\n    pmdVersion = '7.16.0'    \n    spotbugsVersion = '4.9.4'\n    codenarcVersion = '3.6.0'\n\n    // works only if animalsniffer plugin applied\n    animalsnifferVersion\n\n    /**\n     * When disabled, quality plugins will not be registered automatically (according to sources). \n     * Only manually registered quality plugins will be configured. \n     */\n    autoRegistration = true\n\n    // Enable/disable tools (when auto registration disabled control configuration appliance)\n\n    checkstyle = true // would be false if checkstyle tool is not compatible with current java\n    pmd = true\n    cpd = true\n    spotbugs = true // would be false if spotbugs tool is not compatible with current java\n    codenarc = true  \n    animalsniffer = true\n\n    /**\n     * Since codenarc 3.1.0 there is a separate artifact for groovy 4 (CodeNarc-Groovy4). Gradle runs codenarc\n     * task with it's own groovy so by default groovy4 artifact is active. If you need to use earlier codenarc version\n     * then switch this option to false.\n     */\n    codenarcGroovy4 = true\n\n    /**\n     * By default, cpd looks in all sources (cpd gradle plugin behaviour). When option enabled, quality plugin will\n     * exclude all not configured source sets from cpd task sources. In case of multi-module build, where\n     * cpd project declared in root project, all subprojects with quality plugin will exclude their sourceSets not\n     * configured for quality checks. Also, all custom exclusions ({@link #exclude}, {@link #excludeSources})\n     * will also be excluded.\n     */\n    cpdUnifySources = true\n\n    /**\n     * Shortcut for spotbugs.showStackTraces. Original spotbugs property is enabled by default, causing\n     * not pretty exception logs in non strict mode (when not fails on errors). This option was introduced to change\n     * the default to false and not show that nasty stacktrace, but still provide an easy way to revert default back.\n     */\n    spotbugsShowStackTraces = false\n\n    /**\n     * The analysis effort level. The value specified should be one of min, default, or max.\n     * Higher levels increase precision and find more bugs at the expense of running time and\n     * memory consumption. Default is 'max'.\n     */\n    spotbugsEffort = 'max'\n\n    /**\n     * The priority threshold for reporting bugs. If set to low, all bugs are reported.\n     * If set to medium, medium and high priority bugs are reported.\n     * If set to high, only high priority bugs are reported. Default is 'medium'.\n     */\n    spotbugsLevel = 'medium'\n\n    /**\n     * Spotbugs rank should be an integer value between 1 and 20, where 1 to 4 are scariest, 5 to 9 scary,\n     * 10 to 14 troubling, and 15 to 20 of concern bugs.\n     * &lt;p&gt;\n     * This option allows you to filter low-priority ranks: for example, setting {@code spotbugsMaxRank=15} will\n     * filter all bugs with ranks 16-20. Note that this is not the same as {@link #spotbugsLevel}:\n     * it has a bit different meaning (note that both priority and rank are shown for each spotbugs\n     * violation in console).\n     * &lt;p&gt;\n     * The only way to apply rank filtering is through exclude filter. Plugin will automatically generate\n     * additional rule in your exclude filter or in default one. But it may conflict with manual rank rule declaration\n     * (in case if you edit exclude filter manually), so be careful when enabling this option.\n     */\n    spotbugsMaxRank = 20\n\n    /**\n     * Max memory available for spotbugs task. Note that in gradle 4 spotbugs task maximum memory was\n     * 1/4 of physical memory, but in gradle 5 it become only 512mb (default for workers api).\n     * To minify impact of this gradle 5 change, default value in extension is 1g now, but it may be not\n     * enough for large projects (and so you will have to increase it manually).\n     * &lt;p&gt;\n     * IMPORTANT: setting will not work if heap size configured directly in spotbugs task (for example, with\n     * &lt;code&gt;spotbugsMain.maxHeapSize = '2g'&lt;/code&gt;. This was done in order to not break current behaviour\n     * (when task memory is already configured) and affect only default cases (mostly caused by gradle 5 transition).\n     * &lt;p&gt;\n     * See: https://github.com/gradle/gradle/issues/6216 (Reduce default memory settings for daemon and\n     * workers).\n     */\n    spotbugsMaxHeapSize = '1g'\n\n    /**\n     * Hide spotbugs warnings by applying '-quiet' option. Disabled by default. Use it to get rid of possible\n     * \"The following classes needed for analysis were missing:\" warning message (which is printed for each report\n     * (2 times) and there is nothing you could do with it).\n     */\n    spotbugsQuiet = false\n\n    /**\n     * Apply spotbugs annotations dependency with compileOnly scope. This dependency is required for\n     * suppression of warnings ({@code @SuppressFBWarnings}). Dependency version would be the same as\n     * used spotbugs version (as described in spotbugs plugin recommendation).\n     */\n    spotbugsAnnotations = true\n\n    /**\n     * Javac lint options to show compiler warnings, not visible by default.\n     * Applies to all CompileJava tasks.\n     * Options will be added as -Xlint:option\n     * Full list of options: http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCJCABJ\n     */\n    lintOptions = ['deprecation', 'unchecked']\n\n    /**\n     * Strict quality leads to build fail on any violation found. If disabled, all violation\n     * are just printed to console.\n     */\n    strict = true\n\n    /**\n     * When false, disables quality tasks execution. Allows disabling tasks without removing plugins.\n     * Quality tasks are still registered, but skip execution, except when task called directly or through\n     * checkQualityMain (or other source set) grouping task.\n     */\n    enabled = true\n\n    /**\n     * When false, disables reporting quality issues to console. Only gradle general error messages will\n     * remain in logs. This may be useful in cases when project contains too many warnings.\n     * Also, console reporting require xml reports parsing, which could be time consuming in case of too\n     * many errors (large xml reports).\n     * True by default.\n     */\n    consoleReporting = true\n\n    /**\n     * When false, no html reports will be built. True by default.\n     */\n    htmlReports = true\n\n    /**\n     * Source sets to apply checks on.\n     * Default is ['main'] to apply only for project sources, excluding tests.\n     */\n    sourceSets = ['main']\n\n    /**\n     * Source patterns (relative to source dir) to exclude from checks. Simply sets exclusions to quality tasks.\n     * \n     * Animalsniffer is not affected because\n     * it's a different kind of check (and, also, it operates on classes so source patterns may not comply).\n     * \n     * Spotbugs does not support exclusion directly, but plugin will resolve excluded classes and apply\n     * them to xml exclude file (default one or provided by user).\n     * \n     * By default nothing is excluded.\n     * \n     * IMPORTANT: Patterns are checked relatively to source set dirs (not including them). So you can only\n     * match source files and packages, but not absolute file path (this is gradle specific, not plugin).\n     *\n     * @see org.gradle.api.tasks.SourceTask#exclude(java.lang.Iterable) (base class for all quality tasks)\n     */\n    exclude = []\n\n    /**\n     * Direct sources to exclude from checks (except animalsniffer).\n     * This is useful as last resort, when extension or package is not enough for filtering.\n     * Use {@link Project#files(java.lang.Object)} or {@link Project#fileTree(java.lang.Object)}\n     * to create initial collections and apply filter on it (using\n     * {@link org.gradle.api.file.FileTree#matching(groovy.lang.Closure)}).\n     * \n     * Plugin will include files into spotbugs exclusion filter xml (default one or provided by user).\n     * \n     * Note: this must be used when excluded classes can't be extracted to different source set and\n     * filter by package and filename is not sufficient.\n     */\n     FileCollection excludeSources   \n\n    /**\n     * User configuration files directory. Files in this directory will be used instead of default (bundled) configs.\n     */\n    configDir = 'gradle/config/'\n\n    /**\n     * Checkstyle 11 requires java 17, but checkstyle 10 could work on java 11.\n     * Spotbugs 4.9 requires java 11, but 4.8 could work on java 8.\n     * \n     * When enabled, plugin will automatically reduce checkstyle and spotbugs version according to current java.\n     * \n     * WARNING: not recommended to use because you will use DIFFERENT tools on different JDK which could lead\n     * to different quality warnings.\n     * \n     * Option exists for plugin internal use - to check compatibility with java 8 and 11 in plugin tests.\n     */\n    fallbackToCompatibleToolVersion = false\n}\n</code></pre>"},{"location":"guide/config/#source-sets","title":"Source sets","text":"<p>For simplicity, source sets configured with a names:</p> <pre><code>quality.sourceSets = ['main', 'test']\n</code></pre> <p>But it is still possible to use source set objects with a method:</p> <pre><code>quality.sourceSets(project.sourceSets.main, project.sourceSets.test)\n</code></pre> <p>or with list</p> <pre><code>quality.sourceSets([project.sourceSets.main, project.sourceSets.test])\n</code></pre>"},{"location":"guide/config/#manual-mode","title":"Manual mode","text":"<p>You can disable automatic quality plugins registration (guided by source detection)  and register required plugins manually:</p> <pre><code>plugins {\n    id 'groovy'\n    id 'checkstyle'\n    id 'pmd'\n}\n\nquality {\n    autoRegistration = false\n}\n</code></pre> <p>Here checkstyle and pmd plugins will be configured and no other plugins will be registered.</p>"},{"location":"guide/config/#disable-console-output","title":"Disable console output","text":"<p>In some cases it may not be desired to see errors in console. For example, when quality control applied on existing project and you have thousands of warnings.</p> <pre><code>quality {\n    consoleReporting = false\n}\n</code></pre> <p>Warning</p> <p>Don't turn off console warnings in other cases: people tend to ignore problems they didn't see  (practice shows that normally almost no one looks html reports of quality tools). You must see warnings for each build to finally fix them all someday (or fix them as they appear).</p> <p>Console reporting use xml reports, produced by quality plugins. In case of too many errors, xml parsing could slow down build. You may use reporting disabling to speed up build a bit. In most cases (when you don't have thousands of errors) console reporting will be fast. </p>"},{"location":"guide/config/#html-reports","title":"Html reports","text":"<p>By default, all plugins are configured to generate both xml and html reports. Xml report is required for console output and html report preserved for consultation. If you don't need html reports (e.g. on ci server) they could be disabled:</p> <pre><code>quality {\n    htmlReports = false\n}\n</code></pre>"},{"location":"guide/config/#disable-quality-plugins","title":"Disable quality plugins","text":"<p>If you want to disable all quality checks:</p> <pre><code>quality {\n    enabled = false\n}\n</code></pre> <p>This will disable all quality tasks (by setting <code>task.enabled = false</code> for each quality task). Quality tasks will still be visible, but marked as SKIPPED on execution.</p> <p>Note</p> <p><code>enable</code> state will not affect tasks called directly. For example, you set <code>quality.enabled = false</code> and call <code>checkstyleMain</code> - it will be executed. Motivation is simple - if you call task directly then you want it to work. </p> <p>Also, enabled state not affects quality tasks when quality grouping tasks called. For example, if you call <code>checkQualityMain</code> - all quality plugins will be executed, even if disabled in configuration. Motivation is the same as with direct call - you obviously want to perform quality checks.</p> <p>Note</p> <p>if quality grouping task called as dependency of other task, quality plugins will be skipped. Exceptions applies only to direct cases when expected behaviour is obvious.</p>"},{"location":"guide/config/#configuration-override","title":"Configuration override","text":"<p>It is still possible to configure quality plugins, but direct configuration closures will not work:</p> <p>Fail</p> <pre><code>checkstyle {  // will not work, because plugin will override it\n    ...\n}\n</code></pre> <p>But will work like this:</p> <p>Success</p> <pre><code>afterEvaluate {\n    checkstyle { // will be applied after plugin and override configuration\n        ...\n    }\n}\n</code></pre> <p>For plugins configuration options look:</p> <ul> <li>CheckstyleExtension</li> <li>PmdExtension</li> <li>SpotBugsExtension</li> <li>CodeNarcExtension</li> </ul>"},{"location":"guide/exclusion/","title":"Exclusions","text":""},{"location":"guide/exclusion/#exclude-files-from-check","title":"Exclude files from check","text":"<p>All quality tasks are based on SourceTask which allows excluding sources using ant patterns.</p> <p>To apply exclusion to all plugins at once use:</p> <pre><code>quality {\n    exclude '**/sample/**'\n}\n</code></pre> <p>Note</p> <p>This will not affect animalsniffer plugin, because it checks different thing (binary compatibility) and  use it's own configuration to configure exclusions.</p> <p>Info</p> <p>Spotbugs task does not support exclusions on task level, so plugin manually resolve all excluded classes and add them to spotbugs excludes filter xml file (default or custom user file). As a result, exclusion works the same way for all plugins.</p> <p>Note</p> <p>Exclusion patterns are resolved on relative paths (relative to source dir), so absolute file path matching will not work. Your pattern must match just \"package\" and file name parts. If you need to exclude on full paths then use direct source exclusion.</p>"},{"location":"guide/exclusion/#alternative-configurations","title":"Alternative configurations","text":"<p>All of the following configurations are allowed:</p> <pre><code>quality {\n    exclude '**/Sample.java', 'com/foo/**'\n}\n</code></pre> <pre><code>quality {\n    exclude '**/Sample.java' \n    exclude 'com/foo/**'\n}\n</code></pre> <pre><code>quality {\n    exclude = ['**/Sample.java', 'com/foo/**']\n}\n</code></pre>"},{"location":"guide/exclusion/#direct-source-exclusions","title":"Direct source exclusions","text":"<p>When you need to exclude sources from check, you should consider:</p> <ul> <li>Extract such sources into it's own source set and exclude this set from check. (generated classes case)</li> <li>Use pattern excludes (see above) to exclude sources based on package and (or) file name</li> </ul> <p>If non of the above works for you, then you did sources configuration not according to best practices.  Anyway, there is last resort option for such cases (when it could not be done the right way).</p> <p>Suppose we have generated sources, added to main source set:</p> <pre><code>sourceSets.main {\n    java {\n        srcDir 'build/generated/java'\n    }\n}\n</code></pre> <p>Here we have two source dirs for java sources: <code>src/main/java</code> and <code>build/generated/java</code>.</p> <p>We want to exclude them from quality check, so we try:</p> <p>Fail</p> <pre><code>quality {\n    exclude '**/generated/**'\n}\n</code></pre> <p>which WILL NOT WORK because gradle applies patterns relatively to <code>build/generated/java</code> directory and so our patter will never match.</p> <p>Instead, specify ignored files directly, using rich  gradle files api:</p> <p>Success</p> <pre><code>quality {\n    excludeSources = fileTree('build/generated')\n}\n</code></pre> <p>This will exclude all files in 'generated' directory from quality tools checks.</p> <p>Note</p> <p>As with patterns exclude, this will not affect animalsniffer. For spotbugs, plugin will add excluded classes to exclude filter.</p> <p>Another example, just to show how flexible it could be configured:</p> <pre><code>quality {\n    excludeSources = fileTree('build/generated').matching {\n        include '**/sample/**/*.java'\n    }\n}\n</code></pre> <p>Exclude all java sources in sample package (in generated directory). Include pattern here will work relatively to <code>build/generated</code> directory.</p> <p>You can use even single files:</p> <pre><code>quality {\n    excludeSources = files('build/generated/java/com/mypkg/Bad.java')\n}\n</code></pre> <p>Exclude options could be used together (exclude files and patterns).</p>"},{"location":"guide/java/","title":"Java version","text":"<p>Note</p> <p>Spotbugs tool requires java 11 and checkstyle requires java 17.</p> <p>This is only actual for java projects (groovy projects use only CodeNarc).</p> <p>Plugin will automatically disable tools on incompatible java versions.  But spotbugs case is tricky (see below).</p> <p>Important</p> <p>It is completely normal to run quality tools on higher java version only (e.g. develop with jdk 17): no need to run it on each supported java on CI.</p>"},{"location":"guide/java/#java-11-support","title":"Java 11 support","text":"<p>Checkstyle 11 (configured by default) will be disabled on java 11 automatically.</p> <p>If you only use java 11 then checkstyle could be enabled by downgrading its version:</p> <pre><code>quality.checkstyleVersion = '10.26.1'\n</code></pre> <p>(plugin enables checkstyle based on a configured version, so there is no need to manually specify <code>quality.checkstyle=true</code>)</p>"},{"location":"guide/java/#java-8-support","title":"Java 8 support","text":"<p>There is no way to enable checkstyle on java 8. But it would not be a problem: plugin will not try to enable checkstyle on java 8.</p> <p>Spotbugs plugin 6.x is not compatible with java 8. In case when you use multiple jvm on CI: 8, 11, 17, there is no way to use spotbugs plugin 6.x only on java 11 and 17 (not possible to apply plugin conditionally in gradle).</p> <p>Note</p> <p>Spotbugs plugin 6.x is a problem for java 8 because its gradle metadata set java_version=11 attribute. If your project configured for java 8 source compatibility (<code>sourceCompatibility= 1.8</code>), then gradle will gradle would fail to start because there is compatible plugin version.</p> <p>You can only downgrade spotbugs plugin to 5.x (compatible with java 8):</p> <pre><code>plugins {\n    id 'com.github.spotbugs' version '5.2.5'\n}\n</code></pre> <p>In this case gradle would be able to resolve the build classpath on java 8, but the quality plugin would not  enable spotbugs on java 8 (because recent spotbugs itself require java 11).</p> <p>Alternative (not recommended)</p> <p>You can cheat gradle to ignore java version checks for resolved plugin dependencies:</p> <p><pre><code>import org.gradle.api.attributes.java.TargetJvmVersion\n\nbuildscript {\n    configurations.classpath.attributes.attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 11)\n}\n\nplugins {\n    id 'java'\n    id 'ru.vyarus.quality' version '6.0.0'\n    id 'com.github.spotbugs' version '6.2.5' apply false\n}\n</code></pre> This way, gradle would apply spotbugs plugin 6.x on java 8, but the quality plugin will not activate it, and so everything would work fine.</p> <p>Spotbugs 4.9.x (used by default) is not compatible with java 8.</p> <p>If you run on multiple java versions, then do nothing: plugin would not enable spotbugs on java 8 (and spotbugs would be used on java 11 and above).</p> <p>If you run only on java 8, then downgrade spotbugs to 4.8.x:</p> <pre><code>quality.spotbugsVersion = '4.8.6'\n</code></pre>"},{"location":"guide/java/#auto-tools-downgrade","title":"Auto tools downgrade","text":"<p>There is a special option to automatically downgrade tools to the lowest supported version:</p> <pre><code>quality.fallbackToCompatibleToolVersion = true\n</code></pre> <p>When enabled, it would change checkstyle to 10.x on java 11 and spotbugs to 4.8.x on java 8.</p> <p>Note</p> <p>This option is was added for plugin testing and not recommended because it may cause unexpected  behavior (especially on CI): different tool versions may (and almost certainly would) produce different results.</p>"},{"location":"guide/profile/","title":"Profiling","text":"<p>Gradle profile report (<code>--profile</code> option)  shows quality tools tasks time (checkstyleMain, pmdMain etc),  which includes both tool execution time and console reporting (performed by quality plugin). </p> <p>If you need to know exact console reporting time use <code>--info</code> option. Plugin writes reporting execution time as info log  (see log messages starting with <code>[plugin:quality]</code> just after quality tools logs).</p> <p>Alternatively, you can disable console reporting and run quality tasks with <code>--profile</code> again to see \"pure\" quality plugins time. </p>"},{"location":"task/config/","title":"Copy configs task","text":"<p>initQualityConfig task</p> <p>Plugin contains predefined configurations for all plugins. During execution default files are copied into <code>$buildDir/quality-configs</code> (if no custom user configs provided).</p> <p>If you want to customize default configs then use the following task to copy everything into project:</p> <pre><code>$ gradlew initQualityConfig\n</code></pre> <p>It will copy all configs into configured (<code>quality.configDir</code>) folder (will not override existing configs).</p> <pre><code>gradle\\\n    config\\\n        checkstyle\\\n            checkstyle.xml\n            suppressions.xml        \n        codenarc\\\n            codenarc.xml        \n        cpd\\        \n            cpdhtml.xslt    \n        pmd\\\n            pmd.xml \n        spotbugs\\\n            exclude.xml         \n</code></pre> <p>Task copies all configs, but you may remove all files you don't want to customize (plugin will use default versions for them). File names are important: if you rename files plugin will not find them and use defaults.</p> <p>Configuration files contain all possible rules. Not used rules are commented (or excluded).</p>"},{"location":"task/copy/","title":"Default configs","text":"<p>copyQualityConfigs task</p> <p>Quality tools require direct access to configuration files, so default configs (inside plugin jar) must be copied into temporary location.</p> <p>It is also used for auto-generating configs (spotbugs exclusions).</p> <p>Note</p> <p>In older plugin versions, default configs copying was implicit (it was done just before quality task execution  in doFirst block), which breake build cache. Also, it was completely not compatible with the configuration cache.</p> <p>Performing all configs-related actions in scope of one task allows proper caching of its result  (temp. configs directory)</p> <p>Task is not intended to be used directly: all quality tasks depend on it. </p>"},{"location":"task/group/","title":"Grouping tasks","text":"<p>checkQuality[Main] task</p> <p>Each quality plugin (checkstyle, pmd, spotbugs etc) registers separate quality task for each source set.  For example, <code>checkstyleMain</code> and <code>checkstyleTest</code>.</p> <p>But <code>check</code>  task will only depend on tasks for configured source sets (<code>quality.sourceSets</code>).</p> <p>For example, by default, only main source set is configured, so only <code>checkstyleMain</code> assigned to <code>check</code>. Anyway, <code>checkstyleTest</code> task is registered and may be called directly (even if it's not used for project validation).</p> <p>By analogy, quality plugin register grouping task for each available source set: <code>checkQualityMain</code>, <code>checkQualityTest</code> etc. These tasks simply calls all quality tasks relative to source set.  For example, if we have java quality plugins registered then calling <code>checkQualityMain</code> will call <code>checkstyleMain</code>, <code>pmdMain</code> and <code>spotbugsMain</code>.</p> <p>This is just a handy shortcut to run quality check tasks for exact source set without running tests (like main <code>check</code>). Generally usable to periodically check code violations. </p>"},{"location":"task/versions/","title":"Versions tasks","text":"<p>qualityToolVersions task</p> <p>Task prints configured tool versions for active tools.</p> <p>Example output:</p> <pre><code>&gt; Task :qualityToolVersions\nJava version: 17\nGradle version: 8.14.3\nCheckstyle: 11.0.0\nPMD: 7.16.0\nCodeNarc: 3.6.0\n</code></pre> <p>If tool is assumed to be active (according to sources), but was disabled, it would be indicated:</p> <pre><code>&gt; Task :qualityToolVersions\nJava version: 17\nGradle version: 8.14.3\nCheckstyle: disabled\nPMD: disabled\nSpotBugs: disabled\nCodeNarc: disabled\n</code></pre>"},{"location":"tool/animalsniffer/","title":"Animalsniffer","text":"<p>Java, Groovy |  Home |  Plugin </p> <p>In contrast to other tools, animalsniffer plugin is never activated automatically. Plugin will only  apply common configuration (used source sets, strict mode) if ru.vyarus.animalsniffer  plugin manually applied:</p> <pre><code>plugins {\n    id 'ru.vyarus.animalsniffer' version '2.0.1'\n}\n</code></pre>"},{"location":"tool/animalsniffer/#config","title":"Config","text":"<p>Animalsniffer version could be defined through quality config:</p> <pre><code>quality {\n    animalsnifferVersion = '1.16'\n}\n</code></pre> <p>Default version is not declared and animalsniffer plugin driven version will be used by default.</p> <p>Quality configuration is applied to animalsniffer configuration like this:</p> <pre><code>animalsniffer {\n    toolVersion = extension.animalsnifferVersion\n    ignoreFailures = !extension.strict\n    sourceSets = extension.sourceSets    \n}\n</code></pre> <p>To disable animalsniffer plugin configuration:</p> <pre><code>quality.animalsniffer = false\n</code></pre>"},{"location":"tool/checkstyle/","title":"Checkstyle","text":"<p>Java |  Home |  Release Notes | Plugin </p> <p>By default, plugin activates if java sources available (<code>src/main/java</code>).    </p> <p>Default config contains all possible checks, but some of them are disabled (note that some checkstyle rules are opposite and  never intended to be used together). Uncomment check to enable it.</p> <p>Warning</p> <p>Checkstyle 11 requires java 17 or above. Checkstyle support will be disabled on lower java version. To enable checkstyle on java 11, use checkstyle 10 <code>quality.checkstyleVersion = '10.26.1'</code> (see java compatibility notes)</p> <p>In case you will use a custom config: checkstyle config must describe all used rules. So when new version release with new rules, config must be manually updated to add new rules (otherwise they would not be used). But if you only need to suppress some rules, you can use a separate suppressions file.</p>"},{"location":"tool/checkstyle/#output","title":"Output","text":"<pre><code>8 Checkstyle rule violations were found in 2 files\n\n[Misc | NewlineAtEndOfFile] sample.(Sample.java:1)\n  File does not end with a newline.\n  http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile\n\n...\n</code></pre>"},{"location":"tool/checkstyle/#config","title":"Config","text":"<p>Tool config options with defaults:</p> <pre><code>quality {\n    checkstyleVersion = '11.0.0'\n    checkstyle = true // false to disable automatic plugin activation\n}\n</code></pre> <p>Note</p> <p><code>checkstyle = false</code> on incompatible java version</p>"},{"location":"tool/checkstyle/#suppress","title":"Suppress","text":"<p>To suppress violation:</p> <pre><code>@SuppressWarnings(\"NewlineAtEndOfFile\")\n</code></pre> <p>Or with prefix (but require lower cased name):</p> <pre><code>@SuppressWarnings(\"checkstyle:newlineatendoffile\")\n</code></pre> <p>To suppress all violations:</p> <pre><code>@SuppressWarnings(\"all\")\n</code></pre> <p>Or using comments:</p> <pre><code>// CHECKSTYLE:OFF\n..anything..\n// CHECKSTYLE:ON\n</code></pre>"},{"location":"tool/checkstyle/#suppressions-file","title":"Suppressions file","text":"<p>You can also use external suppressions file. It may be a good option for disabling entire rules without overriding the default config file.</p> <p>Suppressions config could: 1. disable some checks in all files 2. disable checks only in some files (or file pattern) 3. disable checks in exact file and under exact lines 4. disable checks by error message</p> <p>The default config already configures optional suppressions file usage, so to use it just drop in suppressions file into checkstyle configurations dir: <code>gradle/config/checkstyle/suppressions.xml</code></p> <p>Alternatively, you can use configs init task which will bring the default (empty) suppressions.xml:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE suppressions PUBLIC\n        \"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN\"\n        \"https://checkstyle.org/dtds/suppressions_1_2.dtd\"&gt;\n\n&lt;!-- Empty suppressions file: copy it into gradle/config/checkstyle and specify required suppressions\n     (https://checkstyle.sourceforge.io/config_filters.html#SuppressionFilter)--&gt;\n&lt;suppressions&gt;\n\n    &lt;!--&lt;suppress checks=\"NewlineAtEndOfFileCheck\" files=\"Sample.java\"/&gt;--&gt;\n\n    &lt;!--&lt;suppress message=\"Missing a Javadoc comment.\"/&gt;--&gt;\n\n&lt;/suppressions&gt;\n</code></pre> <p>Warning</p> <p>Pay attention that check names in the file are all have postfix 'Check',  whereas violations in the console omit this postfix.</p> <p>There are many configuration examples in the checkstyle documentation</p>"},{"location":"tool/codenarc/","title":"Checkstyle","text":"<p>Groovy |  Home |  Release Notes | Plugin </p> <p>By default, plugin activates if groovy sources available (<code>src/main/groovy</code>).    </p> <p>Warning</p> <p>Since codenarc 3.1 there is a separate jar for groovy4 (codenarc-groovy4) and plugin use it by default. If you need to use lower codenarc version set <code>quality.codenarcGroovy4 = false</code> in order to switch to usual codenarc jar (groovy 3 based). Note that it does not relate to your project's groovy version - codenarc will use its own groovy version.</p>"},{"location":"tool/codenarc/#output","title":"Output","text":"<pre><code>24 (0 / 10 / 14) CodeNarc violations were found in 2 files\n\n[Formatting | ClassJavadoc] sample.(GSample.groovy:3)  [priority 2]\n    &gt;&gt; class GSample {\n  Class sample.GSample missing Javadoc\n  Makes sure each class and interface definition is preceded by javadoc. Enum definitions are not checked, due to strange behavior in the Groovy AST.\n  http://codenarc.sourceforge.net/codenarc-rules-formatting.html#ClassJavadoc\n\n...  \n</code></pre> <p>Counts in braces show priorities (p1/p2/p3).</p>"},{"location":"tool/codenarc/#config","title":"Config","text":"<p>Tool config options with defaults:</p> <pre><code>quality {\n    codenarcVersion = '3.6.0'\n    codenarc = true // false to disable automatic plugin activation\n    // use groovy4-based codenarc version; set to false to use groovy3-based version\n    codenarcGroovy4 = true\n}\n</code></pre>"},{"location":"tool/codenarc/#suppress","title":"Suppress","text":"<p>To suppress violation:</p> <pre><code>@SuppressWarnings(\"ClassJavadoc\")\n</code></pre> <p>Since codenarc 2.2 <code>CodeNarc.</code> prefix could be used to differentiate with pure java suppressions:</p> <pre><code>@SuppressWarnings(\"CodeNarc.ClassJavadoc\")\n</code></pre> <p>To suppress all violations use:</p> <pre><code>@SuppressWarnings('CodeNarc')\n</code></pre> <p>Also, comments may be used for disabling blocks of file.</p>"},{"location":"tool/cpd/","title":"CPD (Copy/Paste Detector)","text":"<p>Java by default, suitable for anything (groovy, jsp, simple text etc.) |  Home | Plugin </p> <p>CPD support activates only when de.aaschmid.cpd  gradle plugin applied manually:</p> <pre><code>plugins {        \n    id 'de.aaschmid.cpd' version '3.5'\n    id 'ru.vyarus.quality' version '6.0.0'\n}\n</code></pre> <p>CPD is a part of PMD project and so there is no need for additional version configuration (pmd version used). </p> <p>Note</p> <p>Special xsl file  used for manual html report generation because plugin does not support html report. This is official pmd style, but modified to show all duplicates (original script shows only duplicates &gt; 30 lines).</p>"},{"location":"tool/cpd/#output","title":"Output","text":"<pre><code>2 java duplicates were found by CPD\n\nsample.cpd.(OtherStruct1.java:3)  [16 lines / 75 tokens]\nsample.cpd.(OtherStruct2.java:3)\n  \u2502\n 3\u2502    public class OtherStruct1 {\n 4\u2502    \n 5\u2502        public static void main(String[] args) {\n 6\u2502            Math.sqrt(12);\n 7\u2502            Math.sqrt(12);\n 8\u2502            Math.sqrt(12);\n 9\u2502            Math.sqrt(12);\n10\u2502            Math.sqrt(12);\n11\u2502            Math.sqrt(12);\n12\u2502            Math.sqrt(12);\n13\u2502            Math.sqrt(12);\n14\u2502            Math.sqrt(12);\n15\u2502            Math.sqrt(12);\n16\u2502        }\n17\u2502    \n18\u2502        public void differentMethod1() {\n</code></pre> <p>Shows all files with duplicate parts and source sample from the first file.</p> <p>Note</p> <p>Order of files may vary on different environments and so you may see sources from different files in the resulted report. It doesn't matter much, just don't be surprised. </p> <p>Warning</p> <p>Tool does not search for exact matches, instead it tries to find very common blocks: for example, some code block could be copied and slightly modified and cpd will be able to match it.</p>"},{"location":"tool/cpd/#config","title":"Config","text":"<p>Config options with defaults:</p> <pre><code>quality {\n    cpd = true // false to disable plugin configuration\n    cpdUnifySources = true // false to not modify cpdCheck task sources\n}\n</code></pre> <p>Note</p> <p>CPD itself may be configured with plugin's <code>cpd</code> closure</p> <p>Configurations applied by plugin:</p> <pre><code>cpd {\n    toolVersion = quality.pmdVersion\n    ignoreFailures = !extension.strict\n}\n</code></pre> <p>If only groovy sources available, then <code>cpd.language</code> automatically set to <code>groovy</code> (but only if cpd task declared in the same module with quality plugin!). </p>"},{"location":"tool/cpd/#cpd-tasks","title":"Cpd tasks","text":"<p>In contrast to other quality tools CPD plugin registers only one task <code>cpdCheck</code> instead of task per source set (otherwise it would be impossible to find duplicates between source sets or even between different modules).</p> <p>By default, <code>cpdCheck</code> task configured to check all available source sets. But quality plugin will modify <code>chpdCheck.source</code>:</p> <ul> <li>All files from source sets, not configured for quality checks (<code>quality.sourceSets</code>) are removed. This way cpd scope is unified with other quality plugins scope. </li> <li>Global excludes are also applied. </li> </ul> <p>Source modifications could be disabled with <code>quality.cpdUnifySources = false</code> </p> <p>If multiple cpd tasks would be registered (other tasks declared manually), sources would be modified only for default <code>cpdCheck</code> task. But console reporting and HTML report will be added for all tasks. Also, all cpd tasks would be disabled with <code>quality.enabled = false</code> </p> <p>Note</p> <p>By default, CPD configured for java sources check. To change target language use:</p> <pre><code>cpd {\n    language = 'groovy'\n}\n</code></pre> <p>Warning</p> <p>CPD will try to check all files in enabled source sets. For example, if you have both java and groovy sources in main source set then CPD will try to check both and, most likely, will fail with groovy parse error (as language is java by default).</p> <p>To solve such cases either manually exclude additional sources: <pre><code>cpdCheck.exclude '*.groovy'\n</code></pre> Or split check in multiple tasks, where each task checks only one language (see below),           </p>"},{"location":"tool/cpd/#multiple-file-types-support","title":"Multiple file types support","text":"<p>If you need to check more than one type of files (for example, java and groovy sources), you'll need to configure separate tasks per each required type. For example:</p> <pre><code>cpdCheck.exclude '*.groovy'                     \n\ntask groovyCpdCheck(type:de.aaschmid.gradle.plugins.cpd.Cpd) {\n    language = 'groovy'\n    source = sourceSets.main.allGroovy \n}\n</code></pre> <p>Here groovy sources excluded from default <code>cpdCheck</code> task (because cpd plugin by default covers all source sets). Now the default task will search duplicates only in java files (and only within sources configured in quality plugin).</p> <p>New task declared for searching groovy duplicates (groovyCpdCheck).</p> <p>Both tasks will be assigned to <code>check</code>, so by calling <code>gradlew check</code> you'll run both checks. Console report will be shown for both tasks (and HTML reports generated).</p> <p>Note that task language will be also mentioned in console report:</p> <pre><code>:check\n:cpdCheck\n2 java duplicates were found by CPD\n...\n\n:groovyCpdCheck\n2 groovy duplicates were found by CPD\n...\n</code></pre> <p>Tip</p> <p>CPD understands many source languages. But if specified language cannot be found, a fallback mechanism uses <code>net.sourceforge.pmd.cpd.AnyLanguage</code> instead.  This fallback language does not run ANTLR and therefore also checks duplicates in comments.</p> <p>This way you can use cpd for searching for duplicates even in pure text files, web templates or other resources.</p>"},{"location":"tool/cpd/#multi-module-projects","title":"Multi-module projects","text":"<p>For multi-module projects, it is recommended  to apply cpd plugin in the root project. This way only one <code>cpdCheck</code> task is created (in the root project), which will check sources from all modules (it's the only way to find duplicates between different modules).</p> <p>But quality plugin, should be applied on module level (because all other quality tasks are source set scoped).</p> <p>Expected root project configuration looks like this:</p> <pre><code>plugins {\n    id 'de.aaschmid.cpd' version '3.5'\n    id 'ru.vyarus.quality' version '4.5.0' apply false\n}\ncpd {\n    // cpd configuration, if required\n}\n\n// possibly other cpd tasks \n\nsubprojects {\n    apply plugin: 'java'\n    apply plugin: 'ru.vyarus.quality'\n\n    quality {\n        // plugin configuration, if required    \n    }   \n}\n</code></pre> <p>This way each module have its own quality plugin, but quality configuration is the same in all modules.</p> <p>Quality plugin will detect cpd plugin in the root project and configure it the same way as in single module case. But as quality plugin will apply in each module, only first configured module will apply <code>cpd</code> modifications of <code>toolVersion</code> and <code>ignoreFailures</code> (assuming this settings are the same for all modules).</p> <p>Each module will exclude <code>cpdCheck</code> task sources, not covered by quality plugin configuration. For example, if only main source set configured, each module will exclude test sources. This way, each module control sources only related to its module and overall <code>cpdCheck</code> sources configuration would be correct.</p> <p>Each module will attach all root project's cpd tasks to its check (sub module's <code>check</code> depend on root project tasks). Imagine if you work in one module you may call <code>check</code> only on module level. With common quality tasks its clear - all configured module's source sets must be validated. But you may introduce duplicates (e.g. copied method from other module) and the only way to detect it is to call root project tasks (so its completely logical to assign root cpd check to module checks).  </p> <p>As an example, suppose we have 2 modules <code>mod1</code> and <code>mod2</code> with root project configuration as described above:</p> <ul> <li>root project's cpd plugin will be configured</li> <li><code>mod1</code> will exclude <code>mod1/src/test/java</code> from <code>crpCheck.sources</code></li> <li><code>:mod1:check</code> depends on <code>:cpdCheck</code></li> <li><code>mod2</code> will exclude <code>mod2/src/test/java</code> from <code>crpCheck.sources</code></li> <li><code>:mod2:check</code> depends on <code>:cpdCheck</code> </li> </ul> <p>You will also notice, that in the multi-module setup console output will identify class module:</p> <pre><code>mod1/sample.cpd.(OtherStruct1.java:3)  [16 lines / 75 tokens]\nmod2/sample.cpd.(OtherStruct2.java:3)\n  \u2502\n 3\u2502    public class OtherStruct1 {\n 4\u2502    \n 5\u2502        public static void main(String[] args) {\n 6\u2502            Math.sqrt(12);\n</code></pre> <p>Tip</p> <p>Quality plugin actually search CPD plugin not in the root-most project but in entire parent chain. So if you have complex gradle project and cpd plugin declared somewhere in the middle of projects hierarchy, everything will still be properly configured.  </p>"},{"location":"tool/cpd/#suppress","title":"Suppress","text":"<p>CPD violations could be suppressed only for some languages (Java, C/C++, Dart, Go, Javascript, Kotlin, Lua, Matlab, Objective-C, PL/SQL, Python and Swift) with comments containing CPD-OFF and CPD-ON:</p> <pre><code>public Object someParameterizedFactoryMethod(int x) throws Exception {\n    // some unignored code\n\n    // tell cpd to start ignoring code - CPD-OFF\n\n    // mission critical code, manually loop unroll\n    goDoSomethingAwesome(x + x / 2);\n    goDoSomethingAwesome(x + x / 2);\n    goDoSomethingAwesome(x + x / 2);\n    goDoSomethingAwesome(x + x / 2);\n    goDoSomethingAwesome(x + x / 2);\n    goDoSomethingAwesome(x + x / 2);\n\n    // resume CPD analysis - CPD-ON\n\n    // further code will *not* be ignored\n}\n</code></pre> <p>Java sources could be also suppressed with annotations:</p> <pre><code>//enable suppression\n@SuppressWarnings(\"CPD-START\")\npublic Object someParameterizedFactoryMethod(int x) throws Exception {\n    // any code here will be ignored for the duplication detection\n}\n\n//disable suppression\n@SuppressWarnings(\"CPD-END)\npublic void nextMethod() {\n}\n</code></pre>"},{"location":"tool/lint/","title":"Javac lint","text":"<p>Java |  Home</p> <p>Javac linter could show more useful warnings (not visible by default). See the list of all options.</p>"},{"location":"tool/lint/#configuration","title":"Configuration","text":"<p>By default, plugin will enable deprecation and unchecked warnings (as the most useful):</p> <pre><code>quality {\n    lintOptions = ['deprecation', 'unchecked']\n}\n</code></pre> <p>These lint options are applied to all registered <code>CompileJava</code> tasks.</p>"},{"location":"tool/pmd/","title":"PMD","text":"<p>Java |  Home |  Release Notes |  Plugin </p> <p>By default, plugin activates if java sources available (<code>src/main/java</code>).    </p> <p>Default config contains all java checks, but some of them are disabled. Remove exclusion to enable disabled rule.</p> <p>Warning</p> <p>Pmd 6.0 changed rule groups. Default config was  rewritten accordingly.</p>"},{"location":"tool/pmd/#output","title":"Output","text":"<pre><code>23 PMD rule violations were found in 2 files\n\n[Comments | CommentRequired] sample.(Sample.java:3) \n  headerCommentRequirement Required\n  https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired\n\n...\n</code></pre>"},{"location":"tool/pmd/#config","title":"Config","text":"<p>Tool config options with defaults:</p> <pre><code>quality {\n    pmdVersion = '7.16.0'\n    pmd = true // false to disable automatic plugin activation\n}\n</code></pre>"},{"location":"tool/pmd/#suppress","title":"Suppress","text":"<p>To suppress violation:</p> <pre><code>@SuppressWarnings(\"PMD.CommentRequired\")\n</code></pre> <p>To suppress all violations:</p> <pre><code>@SuppressWarnings(\"PMD\")\n</code></pre> <p>Single line could be suppressed with comment:</p> <pre><code>if (x &gt; 5) { // NOPMD\n}\n</code></pre>"},{"location":"tool/spotbugs/","title":"SpotBugs","text":"<p>Java |  Home |  Release Notes | Plugin </p> <p>Info</p> <p>SpotBugs is a successor project to deprecated FindBugs project. Migration guide. If you were using custom  findbugs config before then rename its folder to <code>spotbugs</code>.</p> <p>Warning</p> <p>In contrast to other plugins, spotbugs plugin is not bundled with gradle and must be applied manually:</p> <pre><code>plugins {\n    id 'com.github.spotbugs' version '6.2.5'\n}\n</code></pre> <p>On multi-module projects it would be enough to declare spotbugs in the root project  (quality plugin will detect its presence in build classpath and apply in modules):</p> <p>``` plugins {     id 'com.github.spotbugs' version '6.2.5' apply false }</p> <p>Warning</p> <p>Spotbugs plugin 6.x requires java 11 (same as spotbugs 4.9.x itself) Spotbugs support will be disabled on lower java version, but spotbugs plugin itself might break your project on a lower java version (see java compatibility notes).</p> <p>This is the reson why its not bundled as a tansitive dependency as before:  keeping it as a transitive dependency would mean java 8 compatibility loose, even for groovy projects (not requiring spotbugs at all).</p> <p>By default, plugin is applied (if found in build classpath) if java sources available (<code>src/main/java</code>).    </p> <p>SpotBugs configuration differ from other tools (checkstyle, pmd): instead of exact rules configuration it uses efforts level. Deeper level could reveal more bugs, but with higher mistake possibility.  Default settings (<code>max</code> effort and <code>medium</code> level) are perfect for most cases. Some checks were disabled in the default  filter file</p>"},{"location":"tool/spotbugs/#output","title":"Output","text":"<pre><code>2 (0 / 2 / 0) SpotBugs violations were found in 2 files\n\n[Performance | URF_UNREAD_FIELD] sample.(Sample.java:8) [priority 2 / rank 14]\n    &gt;&gt; Unread field: sample.Sample.sample\n  This field is never read. Consider removing it from the class.\n\n...  \n</code></pre> <p>Counts in braces show priorities (p1/p2/p3).</p> <p>Note</p> <p>There is no link to spotbugs site (like other tools), because report already contains everything from there. </p> <p>Tip</p> <p>Both priority  and rank are shown for violations: <code>[priority 2 / rank 14]</code>.  Priority relates to <code>spotbugsLevel</code> setting and rank to <code>spotbugsMaxRank</code>.   </p>"},{"location":"tool/spotbugs/#config","title":"Config","text":"<p>Tool config options with defaults:</p> <pre><code>quality {\n    spotbugsVersion = '4.9.4'\n    spotbugs = true // false to disable automatic plugin activation\n    spotbugsEffort = 'max'  // min, less, more or max\n    spotbugsLevel = 'medium' // low, medium, high\n    spotbugsMaxRank = 20 // 1-4 scariest, 5-9 scary, 10-14 troubling, 15-20 of concern  \n    spotbugsMaxHeapSize = '1g'\n    spotbugsQuiet = false\n    spotbugsAnnotations = true // false to not register spotbugs-annotations\n}\n</code></pre> <p>Attention</p> <p>Gradle 5 reduced default memory settings and so default memory for  spotbugs task become <code>512mb</code> (instead of <code>1/4 of physical memory</code> as it was before).  To reduce the impact (as spotbugs task is memory-consuming), quality plugin sets now default memory to <code>1g</code>. If your project requires more memory for spotbugs, increase it with <code>spotbugsMaxHeapSize</code> option: <code>spotbugsMaxHeapSize='2g'</code> </p> <p>Note that quality pligin setting is applied only if sotbugs task was not configured manually, for example, with <code>spotbugsMain.maxHeapSize = '2g'</code>.</p>"},{"location":"tool/spotbugs/#quiet-mode","title":"Quiet mode","text":"<p>Sometimes spotbugs produce nasty warnings like:</p> <pre><code>The following classes needed for analysis were missing:\n  org.junit.Before\n  org.junit.After\n</code></pre> <p>Moreover, you will see it 2 times (for each generated report).</p> <p>There is nothing you could do about it, so using spotbugs -quiet option is a good choice. To automatically apply quiet for all spotbugs tasks:</p> <pre><code>quality.spotbugsQuiet = true\n</code></pre>"},{"location":"tool/spotbugs/#suppress","title":"Suppress","text":"<p>To suppress violations you can use filter file. In this case you need to override default filter file.</p> <p>Plugin applies <code>com.github.spotbugs:spotbugs-annotations:4.9.4</code> dependency automatically in <code>compileOnly</code> scope in order to use special suppressing annotation:</p> <pre><code>@SuppressFBWarnings(\"URF_UNREAD_FIELD\")\n</code></pre> <p>Abstract</p> <p>Spotbugs can't use default <code>@SuppressWarnings</code> annotation because it's a source annotation and not available in bytecode. </p> <p>Note</p> <p>To disable automatic annotations dependency applying: <pre><code>quality.spotbugsAnnotations = false\n</code></pre></p>"},{"location":"tool/spotbugs/#excludes","title":"Excludes","text":"<p>Spotbugs is the only quality tool which works on classes rather than on sources. By default, spotbugs task configured with all compiles classes which may include auto-generated sources too (more than just a source set).</p> <p>Generic exclusions mechanism configures source exclusions and, in order to properly apply these exclusions to spotbugs, quality plugin generates extended exclusions (xml) file. So spotbugs should (seem to) work the same as other plugins.</p> <p>Note</p> <p>Apt-generated sources excluded automatically (if you use gradle's <code>annotationProcessor</code> configuration).</p> <p>Tip</p> <p>If you need to customize default exclusions file, just put custom file in the configs directory and plugin will extend it with additional excludes if required.</p> <p>But do not set custom excludes file directly (with <code>spotbugs.excludeFilter</code>)!</p>"},{"location":"tool/spotbugs/#manual-exclusion","title":"Manual exclusion","text":"<p>If, for some reason, exclusions, configured in quality extension not applied (for example, due to implementation bug),  you can always put exclusions directly into exclusions filter file (tip above) or filter compiled classes:</p> <pre><code>afterEvaluate {\n    tasks.withType(com.github.spotbugs.snom.SpotBugsTask).configureEach {\n        classes = classes.filter { \n            !it.path.contains('com/mycompany/serialize/protobuf/gen/') \n        }\n    }\n}\n</code></pre> <p>Pay attention that this trick filters compiled files (.class), not sources! Whatever custom  filtering logic could be used.</p>"},{"location":"tool/spotbugs/#plugins","title":"Plugins","text":"<p>You may add additional spotbugs checks by declaring spotbugs plugins.</p> <p>Warning</p> <p>As, by default, spotbugs plugin applied automatically after configuration read, <code>spotbugsPlugins</code> configuration can't be used directly</p> <p>You can register plugins using quality extension shortcut:</p> <pre><code>quality {\n    spotbugsPlugin 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.0'\n    spotbugsPlugin 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7'        \n}\n</code></pre> <p>Note</p> <p>Rules from plugins would be identified in console output:</p> <pre><code>[fb-contrib project | Correctness | FCBL_FIELD_COULD_BE_LOCAL] sample.(Sample.java:11)  [priority 2 / rank 7]\n    &gt;&gt; Class sample.Sample defines fields that are used only as locals\n  This class defines fields that are used in a locals only fashion,\n  specifically private fields or protected fields in final classes that are accessed\n  first in each method with a store vs. a load. This field could be replaced by one\n  or more local variables.\n</code></pre> <p>Alternatively, you can use <code>afterEvaluate</code> to register directly in <code>spotbugsPlugins</code> configuration:</p> <pre><code>afterEvaluate {\n    dependencies {\n        spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7'\n    }\n}\n</code></pre>"},{"location":"tool/spotbugs/#available-plugins","title":"Available plugins","text":"<p>Find Security Bugs (site)</p> <pre><code>quality {\n    spotbugsPlugin 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.14.0'\n}\n</code></pre> <p>fb-contrib: A FindBugs auxiliary detector plugin (site)</p> <pre><code>qualtiy {\n    spotbugsPlugin 'com.mebigfatguy.fb-contrib:fb-contrib:7.6.13'\n}\n</code></pre>"},{"location":"tool/spotbugs/#annotations","title":"Annotations","text":"<p>Use spotbugs-annotations to guide spotbugs nullability checks (<code>@NonNull</code> and <code>@Nullable</code>). Add <code>com.github.spotbugs:spotbugs-annotations:3.1.2</code> dependency (with provided scope if possible).</p> <p>Warning</p> <p>Before,  annotations from Jsr-305 were used  (<code>com.google.code.findbugs:jsr305</code>), but now it is dead. Remove jsr-305 jar if it were used and use undeprecated <code>@edu.umd.cs.findbugs.annotations.NonNull</code> and <code>@edu.umd.cs.findbugs.annotations.Nullable</code></p> <p>Pay attention becuase libraries still bring-in jsr-305 jar (e.g. guava does): do not use <code>javax.annotation.Nullable</code> because it may lead to split package problem on java9 and above (not always)  </p> <p>Another alternative is chaker framework annotations: <code>org.checkerframework:checker-qual:3.0.0</code>. Guava already switched  to use them, so if you use it you may already have these annotations.</p> <p>Using checker framework annotations should be preferable because it's on the track to community acceptance as default jsr-305 replacement. Besides, it's the only advanced java types system extension and validation tool. </p> <p>Hint</p> <p>Even if you will use other annotations, people using checker framework with your library would still benefit from your annotations because checker framework understands almost all of them. </p> <p>Summary:</p> <ul> <li>If checker framework available (<code>org.checkerframework:checker-qual</code>) use it:      <code>org.checkerframework.checker.nullness.qual.Nullable</code></li> <li>Otherwise, use spotbugs-annotations (<code>com.github.spotbugs:spotbugs-annotations</code>):     <code>edu.umd.cs.findbugs.annotations.Nullable</code> </li> <li>Avoid using jsr-305 directly (<code>com.google.code.findbugs:jsr305</code>): <code>javax.annotation.Nullable</code> </li> </ul>"},{"location":"tool/spotbugs/#example","title":"Example","text":"<p>Here is an example, which will force you to use nullability annotations.</p> <p>When you use guava functions or predicates you may receive this:</p> <pre><code>[NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE] input must be nonnull but is marked as nullable \n</code></pre> <p>The reason for this is that guava use <code>@Nullable</code> annotation, which is <code>@Inherited</code>, so even if you not set annotation on your own function or predicate it will still be visible.</p> <p>The simplest workaround is to set <code>@NonNull</code> annotation on your function or predicate:</p> <pre><code>public boolean apply(@NonNull final Object input) {\n</code></pre> <p>Hint</p> <p><code>NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION</code> check was disabled because it does not allow this workaround to work</p>"},{"location":"tool/spotbugs/#spotbugs-plugin-issues","title":"Spotbugs plugin issues","text":"<p>Spotbugs plugin always throws an exception when violations found, so even in non strict mode (<code>quality.strict = false</code>) you will see an exception in logs when violations found (build will not be failed). Not critical, just confusing.</p>"},{"location":"tool/spotbugs/#problems-resolution","title":"Problems resolution","text":"<p>Most problems appear with <code>spotbugs</code> configuration. Plugin by default configures only default dependencies for it, so if you modify this configuration you will have to specify dependencies explicitly:</p> <pre><code>afterEvaluate {\n    dependencies {\n        spotbugs \"com.github.spotbugs:spotbugs:${quality.spotbugsVersion}\"\n    }\n}\n</code></pre> <p>Important</p> <p>Gradle will not show you dependencies tree for spotbugs configuration (because it doesn't show default  dependencies) so to be able to see conflicts, configure it manually (as shown above). After that you can investigate with: <pre><code>gradlew dependencies --configuration spotbugs\n</code></pre> or (for exact dependency tracking) <pre><code>gradlew dependencyInsight --configuration spotbugs --dependency asm\n</code></pre></p>"},{"location":"tool/spotbugs/#asm","title":"Asm","text":"<p>If you have problems executing spotbugs tasks like</p> <pre><code>Execution failed for task ':spotbugsMain'.\n&gt; Failed to run Gradle SpotBugs Worker\n   &gt; org/objectweb/asm/RecordComponentVisitor\n</code></pre> <p>(NoClassDefFoundException in stacktrace)</p> <p>Then it is possible that you have incorrect asm:</p> <pre><code>gradlew dependencyInsight --configuration spotbugs --dependency org.ow2.asm:asm\n\norg.ow2.asm:asm:7.2 (selected by rule)\n...\norg.ow2.asm:asm:7.3.1 -&gt; 7.2\n</code></pre> <p>This may be caused by incorrect BOM usage. For example, spring dependency-management plugin  configured like this:</p> <pre><code>dependencyManagement {\n    imports {\n        mavenBom \"com.google.inject:guice-bom:4.2.3\"\n    }        \n}\n</code></pre> <p>would apply to ALL configurations, including \"spotbugs\". In this example, guice bom will force asm 7.2 which will lead to fail.</p> <p>To fix this apply BOM only to some configurations:</p> <pre><code>dependencyManagement {\n    configurations(implementation, testImplementation, provided) {\n        imports {\n            mavenBom \"com.google.inject:guice-bom:4.2.3\"\n        }        \n    }\n}\n</code></pre> <p>Warning</p> <p>But, in this case, generated pom will lack \"dependencyManagement\" section (as it use only globally applied BOMs), so if resulted pom is important for you, then simply force correct asm version for spotbugs: <pre><code>afterEvaluate {\n    dependencies {\n        spotbugs \"com.github.spotbugs:spotbugs:${quality.spotbugsVersion}\"\n        spotbugs \"org.ow2.asm:asm:9.0\"\n    }  \n}  \n</code></pre></p>"},{"location":"tool/spotbugs/#build-dashboard-plugin","title":"Build dashboard plugin","text":"<p>If you use build-dashboard plugin, you may face an error:</p> <pre><code>Execution failed for task ':buildDashboard'.\n&gt; Could not create task ':spotbugsTest'.\n   &gt; Cannot change dependencies of dependency configuration ':spotbugs' after it has been resolved.\n</code></pre> <p>This is due to a bug in build-dashboard plugin, forcing initialization of all project tasks. Spotbugs create lazy tasks for all source sets and each task configures defaults for <code>spotbugs</code> configuration. So when build-dashboard force initialization of not used tasks, they can't apply configurations.</p> <p>To workaround this simply initialize all not used spotbugs tasks manually:</p> <pre><code>afterEvaluate {\n    tasks.findByName('spotbugsTest')\n}\n</code></pre> <p><code>afterEvaluate</code> required because spotbugs plugin applied after configuration and <code>findByName</code>  forces task initialization (for lazy tasks). </p>"}]}