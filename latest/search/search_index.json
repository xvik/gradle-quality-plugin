{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to gradle quality plugin \u00b6 Plugin activates and configures quality tools for java and groovy projects using Checkstyle , PMD , CPD , SpotBugs , CodeNarc . Plugin unifies console output for all quality plugins, which greatly simplifies developer workflow: only console required for working with violations and makes it feel the same as java compiler errors. Note Google's error-prone is not included because checkstyle and pmd covers all error-prone checks and quality plugin makes all tools behave the same way as error-prone, but without java compiler modifications and environment specific setup . Release notes - License Main Features \u00b6 Zero configuration by default: provided opinionated configs applied to all quality plugins Default configuration files may be customized Adds extra javac lint options to see more warnings Complete console output for all quality plugins Html and xml reports for all plugins (custom xsl used for findbugs html report because it can't generate both xml and html reports) Grouping tasks to run registered quality plugins for exact source set (e.g. checkQualityMain) How to use docs \u00b6 Getting started covers installation and main usage info. Ideal for introduction. User guide section contain detailed behavior description. Good to read, but if no time, read as you need it. Configuration - configuration reference Tools section describes exact quality tool configuration and usage aspects. Use it as a hand book . Tasks section describes custom tasks.","title":"Home"},{"location":"#welcome-to-gradle-quality-plugin","text":"Plugin activates and configures quality tools for java and groovy projects using Checkstyle , PMD , CPD , SpotBugs , CodeNarc . Plugin unifies console output for all quality plugins, which greatly simplifies developer workflow: only console required for working with violations and makes it feel the same as java compiler errors. Note Google's error-prone is not included because checkstyle and pmd covers all error-prone checks and quality plugin makes all tools behave the same way as error-prone, but without java compiler modifications and environment specific setup . Release notes - License","title":"Welcome to gradle quality plugin"},{"location":"#main-features","text":"Zero configuration by default: provided opinionated configs applied to all quality plugins Default configuration files may be customized Adds extra javac lint options to see more warnings Complete console output for all quality plugins Html and xml reports for all plugins (custom xsl used for findbugs html report because it can't generate both xml and html reports) Grouping tasks to run registered quality plugins for exact source set (e.g. checkQualityMain)","title":"Main Features"},{"location":"#how-to-use-docs","text":"Getting started covers installation and main usage info. Ideal for introduction. User guide section contain detailed behavior description. Good to read, but if no time, read as you need it. Configuration - configuration reference Tools section describes exact quality tool configuration and usage aspects. Use it as a hand book . Tasks section describes custom tasks.","title":"How to use docs"},{"location":"getting-started/","text":"Getting started \u00b6 Installation \u00b6 Note When updating plugin version in your project don't forget to call clean task to remove cached configs from previous plugin version Plugin is available from maven central , bintray jcenter and gradle plugins portal . plugins { id 'ru.vyarus.quality' version '4.7.0' } OR buildscript { repositories { mavenCentral () gradlePluginPortal () } dependencies { classpath 'ru.vyarus:gradle-quality-plugin:4.7.0' } } apply plugin: 'ru.vyarus.quality' Warning Plugin must be applied after java , java-library or groovy plugins. Otherwise, it will do nothing. Note Requires java 8 and gradle >= 5.6 If you are using lower java versions use previous plugin releases. Usage \u00b6 Plugin will auto detect java and groovy sources and activate required quality plugins. All tools will be configured with the default opinionated configs. See init configs task to modify default configs $ gradlew check Will execute all quality plugins. Alternatively, you can use grouping task to run checks without tests. If any violations were found then build will fail with all violations printed to console. For example like this: 23 PMD rule violations were found in 2 files [Comments | CommentRequired] sample.(Sample.java:3) headerCommentRequirement Required https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired ... Or you can use build task (which also calls check): $ gradlew build Tip It's better to fix all quality issues before commit. Non strict mode \u00b6 You can switch off strict mode to avoid build failure when quality violations are found: quality { strict = false } You will still see all violations in the output. Suppress \u00b6 Sometimes tool could be wrong, or your specific situation could imply such code as normal. In this case violation could be suppressed: see exact tool page for suppression hints (e.g. checstyle suppress ). It is completely normal to suppress some warnings! But don't do it too much often. Note that check name is always printed in square braces: [Comments | CommentRequired] sample.(Sample.java:3) Use it for suppression (e.g. @SuppressWarnings(\"PMD.CommentRequired\") in case of PMD.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Note When updating plugin version in your project don't forget to call clean task to remove cached configs from previous plugin version Plugin is available from maven central , bintray jcenter and gradle plugins portal . plugins { id 'ru.vyarus.quality' version '4.7.0' } OR buildscript { repositories { mavenCentral () gradlePluginPortal () } dependencies { classpath 'ru.vyarus:gradle-quality-plugin:4.7.0' } } apply plugin: 'ru.vyarus.quality' Warning Plugin must be applied after java , java-library or groovy plugins. Otherwise, it will do nothing. Note Requires java 8 and gradle >= 5.6 If you are using lower java versions use previous plugin releases.","title":"Installation"},{"location":"getting-started/#usage","text":"Plugin will auto detect java and groovy sources and activate required quality plugins. All tools will be configured with the default opinionated configs. See init configs task to modify default configs $ gradlew check Will execute all quality plugins. Alternatively, you can use grouping task to run checks without tests. If any violations were found then build will fail with all violations printed to console. For example like this: 23 PMD rule violations were found in 2 files [Comments | CommentRequired] sample.(Sample.java:3) headerCommentRequirement Required https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired ... Or you can use build task (which also calls check): $ gradlew build Tip It's better to fix all quality issues before commit.","title":"Usage"},{"location":"getting-started/#non-strict-mode","text":"You can switch off strict mode to avoid build failure when quality violations are found: quality { strict = false } You will still see all violations in the output.","title":"Non strict mode"},{"location":"getting-started/#suppress","text":"Sometimes tool could be wrong, or your specific situation could imply such code as normal. In this case violation could be suppressed: see exact tool page for suppression hints (e.g. checstyle suppress ). It is completely normal to suppress some warnings! But don't do it too much often. Note that check name is always printed in square braces: [Comments | CommentRequired] sample.(Sample.java:3) Use it for suppression (e.g. @SuppressWarnings(\"PMD.CommentRequired\") in case of PMD.","title":"Suppress"},{"location":"about/compatibility/","text":"Gradle compatibility \u00b6 Plugin compiled for java 8, compatible with java 11 Gradle Version 5.6 4.7.0 5.1 4.2.2 4.1 3.4.0 older 2.4.0 Java tools require sourceCompatibility=1.8 (or above). Version 3.3.0 is the latest supporting sourceCompatibility=1.6","title":"Compatibility"},{"location":"about/compatibility/#gradle-compatibility","text":"Plugin compiled for java 8, compatible with java 11 Gradle Version 5.6 4.7.0 5.1 4.2.2 4.1 3.4.0 older 2.4.0 Java tools require sourceCompatibility=1.8 (or above). Version 3.3.0 is the latest supporting sourceCompatibility=1.6","title":"Gradle compatibility"},{"location":"about/history/","text":"4.7.0 (2021-11-10) \u00b6 Fix gradle 7 deprecation warnings (#30) Update spotbugs plugin 4.7.1 -> 4.7.9 (maven group changed: gradle.plugin.com.github.spotbugs.snom -> com.github.spotbugs.snom) Add spotbugsShowStackTraces option with default to false. Option introduced to change the default for spotbug's showStackTraces option to avoid additional stacktrace in logs in non-strict mode (when plugin not fails on errors) Update spotbugs 4.2.3 -> 4.4.2 Update spotbugs exclusions: Exclude EI_EXPOSE_REP due to confusing false positives Exclude EI_EXPOSE_REP2 due to confusing false positives Update codenarc 2.1.0 -> 2.2.0 Deprecate quality.pmdIncremental property because incremental analysis is enabled by default since gradle 6.4 (property only useful for enabling it in gradle 5.6 - 6.3) Update checkstyle 8.42 -> 9.1 Update checkstyle config: Add NoWhitespaceBeforeCaseDefaultColon 4.6.0 (2021-05-01) \u00b6 Fix gradle 7 compatibility (for checkstyle plugin) Fix console output on windows (remove special unicode separator characters, appearing incorrectly) Update checkstyle 8.39 -> 8.42 Update checkstyle config: Add RecordComponentName Disable Indentation as causing problems too often (currently in regression since 8.40) Disable UnnecessaryParentheses due to often false complains in if statements (especially many misses in 8.42) Update pmd 6.31 -> 6.34 (java 16 support) Update pmd config: Disable deprecated UnusedImports , DuplicateImports , ImportFromSamePackage , DontImportJavaLang (replaced by new UnnecessaryImport rule) Update spotbugs 4.2.1 -> 4.2.3 Update spotbugs plugin 4.6.0 -> 4.7.1 Update codenarc 2.0.0 -> 2.1.0 4.5.0 (2021-02-06) \u00b6 Fix report separating lines disappear in intellij IDEA output (appears when gradle output recognized as junit test output). Extra zero-width space symbol used to prevent trims. Update checkstyle 8.36.2 -> 8.39 (not 8.40 due to Indentation check regression) Update checkstyle config: Add JavadocMissingLeadingAsterisk Disable LambdaBodyLength as method length check is enough Add optional external suppressions file support : just create gradle/config/checkstyle/suppressions.xml and it will be used automatically with the default config Update pmd 6.28 -> 6.31 Update pmd config: Remove AvoidInstantiatingObjectsInLoops because its useless most of the time Remove AssignmentInOperand because its quite common technique Remove AvoidUsingVolatile because it's not an issue but attention pointer Update NcssCount methodReportLevel from 30 to 40, classReportLevel from 300 to 500 Update spotbugs 4.1.3 -> 4.2.1 Update spotbugs plugin 4.5.1 -> 4.6.0 Set checkstyle.configDirectory property: required for ${config_loc} variable (#29) 4.4.0 (2020-10-11) \u00b6 Update codenarc 1.5 -> 2.0.0 (groovy 3 and java 14 support, requires java 7) Update codenarc config: Disable new rule ImplicitReturnStatement because it will cause too many warnings on typical projects and sometimes don't see existing return Update pmd 6.23 -> 6.28 (java 15 support, text block syntax) Update checkstyle 8.32 -> 8.36.2 (java 14 records support, text block syntax) Update checkstyle config Add NoCodeInFile Add IllegalIdentifierName Add RecordComponentNumber Add RecordTypeParameterName Add PatternVariableName Update spotbugs 4.0.3 -> 4.1.3 Update spotbugs plugin 4.1.0 -> 4.5.1 Fix exclusions apply for spotbugs (#27) Automatically exclude apt-generated sources for spotbugs (apt processor(s) assumed to be specified with annotationProcessor configuration) 4.3.0 (2020-05-13) \u00b6 Update spotbugs plugin to 4.1.0 (#26) Fixes gradle 6.4 compatibility. The new plugin is a re-write of the original spotbugs plugin. But quality plugin makes it work as before, so you shouldn't see any difference. Minimal supported gradle is now 5.6 (due to spotbugs plugin) New spotbugs plugin can generate html report itself, but this option is not used Update spotbugs 4.0.2 -> 4.0.3 Update checkstyle 8.31 -> 8.32 Update checkstyle config: New rule JavadocMissingWhitespaceAfterAsterisk Update pmd 6.22 -> 6.23 NOTE: * New spotbugs plugin does not support build cache (https://github.com/spotbugs/spotbugs-gradle-plugin/issues/244) * Spotbugs task always show an exception when violations found (not a problem, just confusing) 4.2.2 (2020-04-23) \u00b6 Remove spotbugs configuration \"tuning\" (added in the last version) because it eventually works incorrectly (causing warnings). Spotbugs 4.0.2 depends on slf4j 1.8 which should avoid compatiblity problems (at least for some time). 4.2.1 (2020-04-16) \u00b6 Update spotbugs 4.0.1 -> 4.0.2 Revert (and change) spotbugs configuration customizations: Remove explicit asm dependency for \"spotbugs\" configuration It was added by mistake: dependency-management plugin applied for all configurations was actually guilty of incorrect asm version (case description added to documentation) Force correct version of sl4j-simple instead of removing dependency (nasty warnings introduced in previous release will disappear now) Warnings from the previous version are no more actual (except new plugin version (4)). 4.2.0 (2020-04-15) \u00b6 Fix gradle configuration fail: \"Cannot access last() element from an empty List\" (project with explicit quality configuration fails to open in the new IDEA) Fix concurrent default configs initialization clash (#22) Update spotbugs 3.1.12 -> 4.0.1 Spotbugs classpath changes (\"spotbugs\" configuration): Removed sl4j-simple dependency: you will see default slf4j warnings but everything will work in all cases and will no more fail due to sl4j version class with gradle's own sl4j (#20) asm 7.3.1 is directly specified to force 7.3.1 because otherwise gradle (5.6) downgrades it to 7.2 (which leads to execution fails \"no class def found\"). Update codenarc 1.4 -> 1.5 Update codenarc config: Disable new rule ImplicitClosureParameter Fix codenarc link in console report (docs moved from sourceforge to github) Update checkstyle 8.29 -> 8.31 Update checkstyle rules: New rule UnnecessarySemicolonAfterOuterTypeDeclaration Disable new rule AvoidDoubleBraceInitialization Update NewlineAtEndOfFile lineSeparator configuration to default (lf_cr_crlf) because rule fixed in 8.30 and now may cause too many violations Fix checkstyle link in console report (sourceforge.net changed to sourceforge.io to avoid redirect) Update pmd 6.21 -> 6.22 WARNING (spotbugs related): 1. If you want to downgrade spotbugs version (with quality.spotbugsVersion = .. ) then you'll have to also force correct asm version on spotbugs configuration. 2. If you need to see spotbugs logs, then manually add slf4j-simple dependency to spotbugs configuration. (normally, spotbugs logs are not important and removing dependency fixes some environments) 3. If you don't want to see sl4j default warnings then simply put slf4j-nop dependency into spotbugs configuration. I can't do it automatically because I may introduce new sl4j compatibility problems due to incorrect version. 4. I know, there is a new spotbugs plugin 4.0.5, but it is conceptually different, so old version would be used for some time. (I tried to upgrade, but it requires time to resolve all issues) 5. BUT with all this, spotbugs 4 should work without problems for everyone! 4.1.0 (2020-02-15) \u00b6 Fix disabled plugin execution with no-tasks gradle run (pure initialization) (#21) Update checkstyle 8.26 -> 8.29 Update checkstyle config: Add new checks: AvoidNoArgumentSuperConstructorCall NoEnumTrailingComma NoArrayTrailingComma JavadocContentLocation Update pmd 6.17.0 -> 6.21.0 Update pmd config: Disabled rule InvalidSlf4jMessageFormat name changed to InvalidLogMessageFormat 4.0.0 (2019-11-16) \u00b6 Gradle 6.0 compatibility (breaking) Removed findbugs plugin support because it was removed in gradle 6 (breaking) Minimal required gradle is now 5.1 Update spotbugs 3.1.11 -> 3.1.12 Update com.github.spotbugs plugin: 1.6.5 -> 2.0.1 Note that plugin group changed: gradle.plugin.com.github.spotbugs -> com.github.spotbugs Add spotbugs-related options: spotbugsMaxHeapSize setting may be used to increase default spotbugs memory ( reduced to 512mb in gradle 5 ). Option does not override maxHeapSize manually set on spotbugs task (to not break working builds) (#12) spotbugsMaxRank setting allows to filter low-ranked rules (ranks are different from priorities!) (#15) Option modifies excludes.xml file (the only way to apply rank threshold) spotbugsPlugin shortcut method to simplify plugins declaration (without afterEvaluate block or manual spotbugs plugin declaration) Spotbugs console report changes: Show both rule rank and priority : [priority 2 / rank 14] Identify rules from plugins: [fb-contrib project | Correctness | FCBL_FIELD_COULD_BE_LOCAL] Update codenarc 1.3 -> 1.4 Update checkstyle 8.17 -> 8.26 Update checkstyle config: Disable TrailingComment as not useful and contradicting with PMD suppression syntax ( // NOPMD ) Add new checks: MissingJavadocPackage MissingJavadocType UnnecessarySemicolonInTryWithResources UnnecessarySemicolonInEnumeration UnnecessarySemicolonAfterTypeMemberDeclaration InvalidJavadocPosition JavadocBlockTagLocation Disable new checks: OrderedProperties MissingJavadocMethod Update pmd 6.11.0 -> 6.17.0 NOTE: 6.18 or 6.19 can't be used due to regression (should be fixed in 6.20) Update pmd config: Add 1 as allowed \"magic number\" for AvoidLiteralsInIfCondition Disable new rule AvoidUncheckedExceptionsInSignatures because it produces false positives for implemented interfaces (and generally not useful) Remove java.lang.AutoCloseable in CloseResource rule because it produces too many false positives Add pmdIncremental option - shortcut for gradle's pmd.incrementalAnalysis option. Disabled by default. Add PMD's CPD tool support through de.aaschmid.cpd plugin. (#4) CPD gradle plugin must be applied manually: no automatic plugin enabling Sets pmd version and silent mode. Sources configured according to quality configuration. Exclusions (source and pattern) are supported too Html report generated (using style recommended by pmd; style file added as overridable config) Full console report (like for other quality plugins) Support for multi-module projects (where cpd plugin applied in root project and quality in subprojects) Use gradle configuration avoidance to prevent not used quality tasks creation Use compilerArgumentProviders instead of direct options modification ( JavaCompile.options.compilerArgs ) to workaround possible immutable list usage in options (#19) 3.4.0 (2019-02-16) \u00b6 Fix source files root detection (#13) Set spotbugs tasks default heap size to 1g to mimic old behaviour in gradle 5 (#12) Update pmd 6.9.0 -> 6.11.0 Update checkstyle 8.14 -> 8.17 Update spotbugs 3.1.9 -> 3.1.11 Update codenarc 1.2.1 -> 1.3 Update codenarc config: Add new ruleset Comments Disable new rule ClassStartsWithBlankLine Disable new rule ClassEndsWithBlankLine 3.3.0 (2018-11-23) \u00b6 Update pmd config: Allow camel cased enum constants for FieldNamingConventions Update spotbugs 3.1.6 -> 3.1.9 Update com.github.spotbugs plugin 1.6.3 -> 1.6.5 Update checkstyle 8.12 -> 8.14 Update pmd 6.7.0 -> 6.9.0 3.2.0 (2018-09-11) \u00b6 Gradle 4.10 compatibility: updated com.github.spotbugs plugin 1.6.2 -> 1.6.3 Update checkstyle 8.11 -> 8.12 Update pmd 6.5.0 -> 6.7.0 Update codenarc 1.2 -> 1.2.1 3.1.1 (2018-07-22) \u00b6 Fix maven central and jcenter artifacts (missed dependency) (#9) Update spotbugs 3.1.5 -> 3.1.6 3.1.0 (2018-07-13) \u00b6 Gradle 4.8 compatibility: updated com.github.spotbugs plugin 1.6.1 -> 1.6.2 fix exclusions support Update checkstyle 8.8 -> 8.11 Update checkstyle config: New check LambdaParameterName Update pmd 6.1.0 -> 6.5.0 Update pmd config: Disable ClassNamingConventions Update spotbugs 3.1.2 -> 3.1.5 Update codenarc 1.1 -> 1.2 Update codenarc config: Disable new check NoJavaUtilDate Option to disable html reports: quality.htmlReports=false (#5) 3.0.0 (2018-03-25) \u00b6 Update codenarc 1.0 -> 1.1 Update checkstyle 8.2 -> 8.8 Update pmd 5.8.1 -> 6.1.0 Update pmd config: (breaking) All rules reordered according to new groups Disable CommentDefaultAccessModifier as not useful Disable ExcessiveClassLength and ExcessiveMethodLength in favor of new rule NcssCount (which counts lengths without empty lines and comments) Defaults for NcssCount (which counts length without empty lines and comments) changed: 30 lines for method and 300 for class (with previous Excessive* rules it was 50 and 500 accordingly) Disable new rule DataClass as too strict for general cases Switch from ModifiedCyclomaticComplexity (deprecated) to CyclomaticComplexity with ignoreBooleanPaths option (breaking) use Spotbugs (3.1.2) instead of Findbugs by default (as successor ) com.github.spotbugs external plugin applied (quality plugin brings it as a dependency) Spotbugs plugin will use configs from different folder (spotbugs/), so if custom findbugs configs were used move them to spotbugs/ folder Findbugs support is deprecated and will be removed someday (but not soon). To use findbugs (as before): disable spotbugs support (quality.spotbugs = false) or enable findbugs plugin manually (in this case spotbugs plugin will not be registered) Update spotbugs exclusions: Exclude NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION check as it prevents @Nullable override, which may be required for guava functions Exclude NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE check as misleading and not useful 2.4.0 (2017-09-21) \u00b6 Support gradle 4.2 (#3) Update checkstyle 8.0 -> 8.2 Update codenarc 0.27.0 -> 1.0 Update checkstyle config: Move SuppressionCommentFilter inside TreeWalker (8.1 breaking change) Remove FileContentsHolder (8.2 breaking change) New check AnnotationOnSameLine (added in 8.2) added to config, but disabled 2.3.0 (2017-07-24) \u00b6 Update checkstyle 7.6 -> 8.0 Update pmd 5.5.4 -> 5.8.1 Update pmd config: Add description to avoid warning Disable AccessorMethodGeneration check as it makes sense for android projects and not so important for java. Moreover, possible fixes will contradict with checkstyle's VisibilityModifier 2.2.0 (2017-03-21) \u00b6 Update checkstyle 7.4 -> 7.6 Update pmd 5.5.2 -> 5.5.4 Update codenarc 0.26.0 -> 0.27.0 Update pmd config: Disable NullAssignment check due to false positives Add unified exclusion patterns (glob) configuration: exclude (#2) Does not affect animalsniffer because it's a different type of check Findbugs did not support direct exclusions, so plugin resolves excluded classes and adds them to exclusion xml (default or user defined) Add configuration to directly exclude source files from check (for exceptional cases when pattern exclusion cant help): excludeSources Does not affect animalsniffer For findbugs excluded classes will be added to exclusions xml filter 2.1.0 (2017-01-24) \u00b6 Update checkstyle 7.1 -> 7.4 Update pmd 5.5.1 -> 5.5.2 Update codenarc 0.25.2 -> 0.26.0 Update pmd config: Disable junit4 migration rules which cause false positives for non test code: JUnit4TestShouldUseBeforeAnnotation , JUnit4TestShouldUseAfterAnnotation , JUnit4TestShouldUseTestAnnotation 2.0.0 (2016-09-03) \u00b6 Update checkstyle 6.17 -> 7.1 (requires min jdk 8) Update checkstyle config: Add SingleSpaceSeparator check (since 6.19) Disable FileLength check in favour of more correct PMD ExcessiveClassLength check (which checks actual class length not file) Enable ReturnCount to replace pmd OnlyOneReturn check Update pmd 5.4.1 -> 5.5.1 (requires min jdk 7) Update pmd config: Disable UselessParentheses because of too many false positives Disable OnlyOneReturn in favour of checkstyle ReturnCount Disable InvalidSlf4jMessageFormat due to known bug Disable CyclomaticComplexity and StdCyclomaticComplexity as duplicate rules for ModifiedCyclomaticComplexity Update codenarc 0.25.1 -> 0.25.2 (breaking) quality.lintOptions configuration now applies to all JavaCompile tasks (not only to compileJava as before) Fix multi-module projects reporting (remove duplicate reports) Fix generated html reports links (redundant slash on linux) Fix newline in reporters (use platform specific) Change reporting format so intelliJ IDEA can recognize class reference and show link (eclipse will probably too). Reference line ranges are not shown anymore (pmd, findbugs and column in checkstyle) - always exact line. (breaking) configure manually registered plugins, even if plugin not supposed to be used due to sources auto detection. Configuration may be disabled using quality configuration flags. Add ability to disable automatic plugins registration: quality.autoRegistration = false. Only manually registered plugins will be configured. Add ability to disable quality tasks with configuration property: quality.enabled = false. Quality tasks will still work if called directly or through grouping task (e.g. checkQualityMain). (breaking) Remove checkstyle html report generation: gradle can generate html report since 2.10 and when gradle generates html report, it puts link to it into main error message Findbugs html report is always generated (not only when errors found like before) Add ability to disable console reporting with configuration property: quality.consoleReporting = false Add grouping tasks for registered quality plugins: checkQualityMain, checkQualityTest (per source set). Allows running quality tasks for exact source set or run quality tasks not enabled for 'check' task. 1.3.0 (2016-03-30) \u00b6 Update checkstyle 6.14.1 -> 6.17 Update codenarc 0.24.1 -> 0.25.1 Disable default checkstyle html report (enabled in gradle >=2.10) to avoid duplicate report generation Add reporting execution time logging (visible with --info option) Update default checkstyle config: Disable Misc/UncommentedMain 1.2.0 (2016-01-01) \u00b6 Update default configs: Disable Pmd/Controversial/AvoidFinalLocalVariable Pmd/Design/AvoidDeeplyNestedIfStmts default set to 4 Checkstyle/Coding/NestedIfDepth default set to 3 Add disabled check in config Checkstyle/Naming/CatchParameterName Update checkstyle 6.13 -> 6.14.1 1.1.1 (2015-12-24) \u00b6 Fix AnimalSniffer version configuration 1.1.0 (2015-12-21) \u00b6 Add ru.vyarus.animalsniffer plugin configuration support Improve FindBugs console output 1.0.3 (2015-12-11) \u00b6 Delay default configs copying to actual task execution to avoid problems with clean task 1.0.2 (2015-12-06) \u00b6 Unescape CodeNarc messages Update checkstyle 6.12.1 -> 6.13 Update pmd 5.4.0 -> 5.4.1 1.0.1 (2015-12-04) \u00b6 Don't activate CodeNarc if groovy plugin enabled but no groovy sources folder exists 1.0.0 (2015-11-19) \u00b6 Initial release","title":"Release notes"},{"location":"about/history/#470-2021-11-10","text":"Fix gradle 7 deprecation warnings (#30) Update spotbugs plugin 4.7.1 -> 4.7.9 (maven group changed: gradle.plugin.com.github.spotbugs.snom -> com.github.spotbugs.snom) Add spotbugsShowStackTraces option with default to false. Option introduced to change the default for spotbug's showStackTraces option to avoid additional stacktrace in logs in non-strict mode (when plugin not fails on errors) Update spotbugs 4.2.3 -> 4.4.2 Update spotbugs exclusions: Exclude EI_EXPOSE_REP due to confusing false positives Exclude EI_EXPOSE_REP2 due to confusing false positives Update codenarc 2.1.0 -> 2.2.0 Deprecate quality.pmdIncremental property because incremental analysis is enabled by default since gradle 6.4 (property only useful for enabling it in gradle 5.6 - 6.3) Update checkstyle 8.42 -> 9.1 Update checkstyle config: Add NoWhitespaceBeforeCaseDefaultColon","title":"4.7.0 (2021-11-10)"},{"location":"about/history/#460-2021-05-01","text":"Fix gradle 7 compatibility (for checkstyle plugin) Fix console output on windows (remove special unicode separator characters, appearing incorrectly) Update checkstyle 8.39 -> 8.42 Update checkstyle config: Add RecordComponentName Disable Indentation as causing problems too often (currently in regression since 8.40) Disable UnnecessaryParentheses due to often false complains in if statements (especially many misses in 8.42) Update pmd 6.31 -> 6.34 (java 16 support) Update pmd config: Disable deprecated UnusedImports , DuplicateImports , ImportFromSamePackage , DontImportJavaLang (replaced by new UnnecessaryImport rule) Update spotbugs 4.2.1 -> 4.2.3 Update spotbugs plugin 4.6.0 -> 4.7.1 Update codenarc 2.0.0 -> 2.1.0","title":"4.6.0 (2021-05-01)"},{"location":"about/history/#450-2021-02-06","text":"Fix report separating lines disappear in intellij IDEA output (appears when gradle output recognized as junit test output). Extra zero-width space symbol used to prevent trims. Update checkstyle 8.36.2 -> 8.39 (not 8.40 due to Indentation check regression) Update checkstyle config: Add JavadocMissingLeadingAsterisk Disable LambdaBodyLength as method length check is enough Add optional external suppressions file support : just create gradle/config/checkstyle/suppressions.xml and it will be used automatically with the default config Update pmd 6.28 -> 6.31 Update pmd config: Remove AvoidInstantiatingObjectsInLoops because its useless most of the time Remove AssignmentInOperand because its quite common technique Remove AvoidUsingVolatile because it's not an issue but attention pointer Update NcssCount methodReportLevel from 30 to 40, classReportLevel from 300 to 500 Update spotbugs 4.1.3 -> 4.2.1 Update spotbugs plugin 4.5.1 -> 4.6.0 Set checkstyle.configDirectory property: required for ${config_loc} variable (#29)","title":"4.5.0 (2021-02-06)"},{"location":"about/history/#440-2020-10-11","text":"Update codenarc 1.5 -> 2.0.0 (groovy 3 and java 14 support, requires java 7) Update codenarc config: Disable new rule ImplicitReturnStatement because it will cause too many warnings on typical projects and sometimes don't see existing return Update pmd 6.23 -> 6.28 (java 15 support, text block syntax) Update checkstyle 8.32 -> 8.36.2 (java 14 records support, text block syntax) Update checkstyle config Add NoCodeInFile Add IllegalIdentifierName Add RecordComponentNumber Add RecordTypeParameterName Add PatternVariableName Update spotbugs 4.0.3 -> 4.1.3 Update spotbugs plugin 4.1.0 -> 4.5.1 Fix exclusions apply for spotbugs (#27) Automatically exclude apt-generated sources for spotbugs (apt processor(s) assumed to be specified with annotationProcessor configuration)","title":"4.4.0 (2020-10-11)"},{"location":"about/history/#430-2020-05-13","text":"Update spotbugs plugin to 4.1.0 (#26) Fixes gradle 6.4 compatibility. The new plugin is a re-write of the original spotbugs plugin. But quality plugin makes it work as before, so you shouldn't see any difference. Minimal supported gradle is now 5.6 (due to spotbugs plugin) New spotbugs plugin can generate html report itself, but this option is not used Update spotbugs 4.0.2 -> 4.0.3 Update checkstyle 8.31 -> 8.32 Update checkstyle config: New rule JavadocMissingWhitespaceAfterAsterisk Update pmd 6.22 -> 6.23 NOTE: * New spotbugs plugin does not support build cache (https://github.com/spotbugs/spotbugs-gradle-plugin/issues/244) * Spotbugs task always show an exception when violations found (not a problem, just confusing)","title":"4.3.0 (2020-05-13)"},{"location":"about/history/#422-2020-04-23","text":"Remove spotbugs configuration \"tuning\" (added in the last version) because it eventually works incorrectly (causing warnings). Spotbugs 4.0.2 depends on slf4j 1.8 which should avoid compatiblity problems (at least for some time).","title":"4.2.2 (2020-04-23)"},{"location":"about/history/#421-2020-04-16","text":"Update spotbugs 4.0.1 -> 4.0.2 Revert (and change) spotbugs configuration customizations: Remove explicit asm dependency for \"spotbugs\" configuration It was added by mistake: dependency-management plugin applied for all configurations was actually guilty of incorrect asm version (case description added to documentation) Force correct version of sl4j-simple instead of removing dependency (nasty warnings introduced in previous release will disappear now) Warnings from the previous version are no more actual (except new plugin version (4)).","title":"4.2.1 (2020-04-16)"},{"location":"about/history/#420-2020-04-15","text":"Fix gradle configuration fail: \"Cannot access last() element from an empty List\" (project with explicit quality configuration fails to open in the new IDEA) Fix concurrent default configs initialization clash (#22) Update spotbugs 3.1.12 -> 4.0.1 Spotbugs classpath changes (\"spotbugs\" configuration): Removed sl4j-simple dependency: you will see default slf4j warnings but everything will work in all cases and will no more fail due to sl4j version class with gradle's own sl4j (#20) asm 7.3.1 is directly specified to force 7.3.1 because otherwise gradle (5.6) downgrades it to 7.2 (which leads to execution fails \"no class def found\"). Update codenarc 1.4 -> 1.5 Update codenarc config: Disable new rule ImplicitClosureParameter Fix codenarc link in console report (docs moved from sourceforge to github) Update checkstyle 8.29 -> 8.31 Update checkstyle rules: New rule UnnecessarySemicolonAfterOuterTypeDeclaration Disable new rule AvoidDoubleBraceInitialization Update NewlineAtEndOfFile lineSeparator configuration to default (lf_cr_crlf) because rule fixed in 8.30 and now may cause too many violations Fix checkstyle link in console report (sourceforge.net changed to sourceforge.io to avoid redirect) Update pmd 6.21 -> 6.22 WARNING (spotbugs related): 1. If you want to downgrade spotbugs version (with quality.spotbugsVersion = .. ) then you'll have to also force correct asm version on spotbugs configuration. 2. If you need to see spotbugs logs, then manually add slf4j-simple dependency to spotbugs configuration. (normally, spotbugs logs are not important and removing dependency fixes some environments) 3. If you don't want to see sl4j default warnings then simply put slf4j-nop dependency into spotbugs configuration. I can't do it automatically because I may introduce new sl4j compatibility problems due to incorrect version. 4. I know, there is a new spotbugs plugin 4.0.5, but it is conceptually different, so old version would be used for some time. (I tried to upgrade, but it requires time to resolve all issues) 5. BUT with all this, spotbugs 4 should work without problems for everyone!","title":"4.2.0 (2020-04-15)"},{"location":"about/history/#410-2020-02-15","text":"Fix disabled plugin execution with no-tasks gradle run (pure initialization) (#21) Update checkstyle 8.26 -> 8.29 Update checkstyle config: Add new checks: AvoidNoArgumentSuperConstructorCall NoEnumTrailingComma NoArrayTrailingComma JavadocContentLocation Update pmd 6.17.0 -> 6.21.0 Update pmd config: Disabled rule InvalidSlf4jMessageFormat name changed to InvalidLogMessageFormat","title":"4.1.0 (2020-02-15)"},{"location":"about/history/#400-2019-11-16","text":"Gradle 6.0 compatibility (breaking) Removed findbugs plugin support because it was removed in gradle 6 (breaking) Minimal required gradle is now 5.1 Update spotbugs 3.1.11 -> 3.1.12 Update com.github.spotbugs plugin: 1.6.5 -> 2.0.1 Note that plugin group changed: gradle.plugin.com.github.spotbugs -> com.github.spotbugs Add spotbugs-related options: spotbugsMaxHeapSize setting may be used to increase default spotbugs memory ( reduced to 512mb in gradle 5 ). Option does not override maxHeapSize manually set on spotbugs task (to not break working builds) (#12) spotbugsMaxRank setting allows to filter low-ranked rules (ranks are different from priorities!) (#15) Option modifies excludes.xml file (the only way to apply rank threshold) spotbugsPlugin shortcut method to simplify plugins declaration (without afterEvaluate block or manual spotbugs plugin declaration) Spotbugs console report changes: Show both rule rank and priority : [priority 2 / rank 14] Identify rules from plugins: [fb-contrib project | Correctness | FCBL_FIELD_COULD_BE_LOCAL] Update codenarc 1.3 -> 1.4 Update checkstyle 8.17 -> 8.26 Update checkstyle config: Disable TrailingComment as not useful and contradicting with PMD suppression syntax ( // NOPMD ) Add new checks: MissingJavadocPackage MissingJavadocType UnnecessarySemicolonInTryWithResources UnnecessarySemicolonInEnumeration UnnecessarySemicolonAfterTypeMemberDeclaration InvalidJavadocPosition JavadocBlockTagLocation Disable new checks: OrderedProperties MissingJavadocMethod Update pmd 6.11.0 -> 6.17.0 NOTE: 6.18 or 6.19 can't be used due to regression (should be fixed in 6.20) Update pmd config: Add 1 as allowed \"magic number\" for AvoidLiteralsInIfCondition Disable new rule AvoidUncheckedExceptionsInSignatures because it produces false positives for implemented interfaces (and generally not useful) Remove java.lang.AutoCloseable in CloseResource rule because it produces too many false positives Add pmdIncremental option - shortcut for gradle's pmd.incrementalAnalysis option. Disabled by default. Add PMD's CPD tool support through de.aaschmid.cpd plugin. (#4) CPD gradle plugin must be applied manually: no automatic plugin enabling Sets pmd version and silent mode. Sources configured according to quality configuration. Exclusions (source and pattern) are supported too Html report generated (using style recommended by pmd; style file added as overridable config) Full console report (like for other quality plugins) Support for multi-module projects (where cpd plugin applied in root project and quality in subprojects) Use gradle configuration avoidance to prevent not used quality tasks creation Use compilerArgumentProviders instead of direct options modification ( JavaCompile.options.compilerArgs ) to workaround possible immutable list usage in options (#19)","title":"4.0.0  (2019-11-16)"},{"location":"about/history/#340-2019-02-16","text":"Fix source files root detection (#13) Set spotbugs tasks default heap size to 1g to mimic old behaviour in gradle 5 (#12) Update pmd 6.9.0 -> 6.11.0 Update checkstyle 8.14 -> 8.17 Update spotbugs 3.1.9 -> 3.1.11 Update codenarc 1.2.1 -> 1.3 Update codenarc config: Add new ruleset Comments Disable new rule ClassStartsWithBlankLine Disable new rule ClassEndsWithBlankLine","title":"3.4.0  (2019-02-16)"},{"location":"about/history/#330-2018-11-23","text":"Update pmd config: Allow camel cased enum constants for FieldNamingConventions Update spotbugs 3.1.6 -> 3.1.9 Update com.github.spotbugs plugin 1.6.3 -> 1.6.5 Update checkstyle 8.12 -> 8.14 Update pmd 6.7.0 -> 6.9.0","title":"3.3.0 (2018-11-23)"},{"location":"about/history/#320-2018-09-11","text":"Gradle 4.10 compatibility: updated com.github.spotbugs plugin 1.6.2 -> 1.6.3 Update checkstyle 8.11 -> 8.12 Update pmd 6.5.0 -> 6.7.0 Update codenarc 1.2 -> 1.2.1","title":"3.2.0 (2018-09-11)"},{"location":"about/history/#311-2018-07-22","text":"Fix maven central and jcenter artifacts (missed dependency) (#9) Update spotbugs 3.1.5 -> 3.1.6","title":"3.1.1 (2018-07-22)"},{"location":"about/history/#310-2018-07-13","text":"Gradle 4.8 compatibility: updated com.github.spotbugs plugin 1.6.1 -> 1.6.2 fix exclusions support Update checkstyle 8.8 -> 8.11 Update checkstyle config: New check LambdaParameterName Update pmd 6.1.0 -> 6.5.0 Update pmd config: Disable ClassNamingConventions Update spotbugs 3.1.2 -> 3.1.5 Update codenarc 1.1 -> 1.2 Update codenarc config: Disable new check NoJavaUtilDate Option to disable html reports: quality.htmlReports=false (#5)","title":"3.1.0 (2018-07-13)"},{"location":"about/history/#300-2018-03-25","text":"Update codenarc 1.0 -> 1.1 Update checkstyle 8.2 -> 8.8 Update pmd 5.8.1 -> 6.1.0 Update pmd config: (breaking) All rules reordered according to new groups Disable CommentDefaultAccessModifier as not useful Disable ExcessiveClassLength and ExcessiveMethodLength in favor of new rule NcssCount (which counts lengths without empty lines and comments) Defaults for NcssCount (which counts length without empty lines and comments) changed: 30 lines for method and 300 for class (with previous Excessive* rules it was 50 and 500 accordingly) Disable new rule DataClass as too strict for general cases Switch from ModifiedCyclomaticComplexity (deprecated) to CyclomaticComplexity with ignoreBooleanPaths option (breaking) use Spotbugs (3.1.2) instead of Findbugs by default (as successor ) com.github.spotbugs external plugin applied (quality plugin brings it as a dependency) Spotbugs plugin will use configs from different folder (spotbugs/), so if custom findbugs configs were used move them to spotbugs/ folder Findbugs support is deprecated and will be removed someday (but not soon). To use findbugs (as before): disable spotbugs support (quality.spotbugs = false) or enable findbugs plugin manually (in this case spotbugs plugin will not be registered) Update spotbugs exclusions: Exclude NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION check as it prevents @Nullable override, which may be required for guava functions Exclude NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE check as misleading and not useful","title":"3.0.0 (2018-03-25)"},{"location":"about/history/#240-2017-09-21","text":"Support gradle 4.2 (#3) Update checkstyle 8.0 -> 8.2 Update codenarc 0.27.0 -> 1.0 Update checkstyle config: Move SuppressionCommentFilter inside TreeWalker (8.1 breaking change) Remove FileContentsHolder (8.2 breaking change) New check AnnotationOnSameLine (added in 8.2) added to config, but disabled","title":"2.4.0 (2017-09-21)"},{"location":"about/history/#230-2017-07-24","text":"Update checkstyle 7.6 -> 8.0 Update pmd 5.5.4 -> 5.8.1 Update pmd config: Add description to avoid warning Disable AccessorMethodGeneration check as it makes sense for android projects and not so important for java. Moreover, possible fixes will contradict with checkstyle's VisibilityModifier","title":"2.3.0 (2017-07-24)"},{"location":"about/history/#220-2017-03-21","text":"Update checkstyle 7.4 -> 7.6 Update pmd 5.5.2 -> 5.5.4 Update codenarc 0.26.0 -> 0.27.0 Update pmd config: Disable NullAssignment check due to false positives Add unified exclusion patterns (glob) configuration: exclude (#2) Does not affect animalsniffer because it's a different type of check Findbugs did not support direct exclusions, so plugin resolves excluded classes and adds them to exclusion xml (default or user defined) Add configuration to directly exclude source files from check (for exceptional cases when pattern exclusion cant help): excludeSources Does not affect animalsniffer For findbugs excluded classes will be added to exclusions xml filter","title":"2.2.0 (2017-03-21)"},{"location":"about/history/#210-2017-01-24","text":"Update checkstyle 7.1 -> 7.4 Update pmd 5.5.1 -> 5.5.2 Update codenarc 0.25.2 -> 0.26.0 Update pmd config: Disable junit4 migration rules which cause false positives for non test code: JUnit4TestShouldUseBeforeAnnotation , JUnit4TestShouldUseAfterAnnotation , JUnit4TestShouldUseTestAnnotation","title":"2.1.0 (2017-01-24)"},{"location":"about/history/#200-2016-09-03","text":"Update checkstyle 6.17 -> 7.1 (requires min jdk 8) Update checkstyle config: Add SingleSpaceSeparator check (since 6.19) Disable FileLength check in favour of more correct PMD ExcessiveClassLength check (which checks actual class length not file) Enable ReturnCount to replace pmd OnlyOneReturn check Update pmd 5.4.1 -> 5.5.1 (requires min jdk 7) Update pmd config: Disable UselessParentheses because of too many false positives Disable OnlyOneReturn in favour of checkstyle ReturnCount Disable InvalidSlf4jMessageFormat due to known bug Disable CyclomaticComplexity and StdCyclomaticComplexity as duplicate rules for ModifiedCyclomaticComplexity Update codenarc 0.25.1 -> 0.25.2 (breaking) quality.lintOptions configuration now applies to all JavaCompile tasks (not only to compileJava as before) Fix multi-module projects reporting (remove duplicate reports) Fix generated html reports links (redundant slash on linux) Fix newline in reporters (use platform specific) Change reporting format so intelliJ IDEA can recognize class reference and show link (eclipse will probably too). Reference line ranges are not shown anymore (pmd, findbugs and column in checkstyle) - always exact line. (breaking) configure manually registered plugins, even if plugin not supposed to be used due to sources auto detection. Configuration may be disabled using quality configuration flags. Add ability to disable automatic plugins registration: quality.autoRegistration = false. Only manually registered plugins will be configured. Add ability to disable quality tasks with configuration property: quality.enabled = false. Quality tasks will still work if called directly or through grouping task (e.g. checkQualityMain). (breaking) Remove checkstyle html report generation: gradle can generate html report since 2.10 and when gradle generates html report, it puts link to it into main error message Findbugs html report is always generated (not only when errors found like before) Add ability to disable console reporting with configuration property: quality.consoleReporting = false Add grouping tasks for registered quality plugins: checkQualityMain, checkQualityTest (per source set). Allows running quality tasks for exact source set or run quality tasks not enabled for 'check' task.","title":"2.0.0 (2016-09-03)"},{"location":"about/history/#130-2016-03-30","text":"Update checkstyle 6.14.1 -> 6.17 Update codenarc 0.24.1 -> 0.25.1 Disable default checkstyle html report (enabled in gradle >=2.10) to avoid duplicate report generation Add reporting execution time logging (visible with --info option) Update default checkstyle config: Disable Misc/UncommentedMain","title":"1.3.0 (2016-03-30)"},{"location":"about/history/#120-2016-01-01","text":"Update default configs: Disable Pmd/Controversial/AvoidFinalLocalVariable Pmd/Design/AvoidDeeplyNestedIfStmts default set to 4 Checkstyle/Coding/NestedIfDepth default set to 3 Add disabled check in config Checkstyle/Naming/CatchParameterName Update checkstyle 6.13 -> 6.14.1","title":"1.2.0 (2016-01-01)"},{"location":"about/history/#111-2015-12-24","text":"Fix AnimalSniffer version configuration","title":"1.1.1 (2015-12-24)"},{"location":"about/history/#110-2015-12-21","text":"Add ru.vyarus.animalsniffer plugin configuration support Improve FindBugs console output","title":"1.1.0 (2015-12-21)"},{"location":"about/history/#103-2015-12-11","text":"Delay default configs copying to actual task execution to avoid problems with clean task","title":"1.0.3 (2015-12-11)"},{"location":"about/history/#102-2015-12-06","text":"Unescape CodeNarc messages Update checkstyle 6.12.1 -> 6.13 Update pmd 5.4.0 -> 5.4.1","title":"1.0.2 (2015-12-06)"},{"location":"about/history/#101-2015-12-04","text":"Don't activate CodeNarc if groovy plugin enabled but no groovy sources folder exists","title":"1.0.1 (2015-12-04)"},{"location":"about/history/#100-2015-11-19","text":"Initial release","title":"1.0.0 (2015-11-19)"},{"location":"about/license/","text":"The MIT License (MIT) Copyright \u00a9 2015-2021 Vyacheslav Rusakov Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"guide/automatic/","text":"Automatic mode \u00b6 By default, plugin works in automatic mode and does not require configuration to run. Plugins \u00b6 Java quality tool plugins will be activated if java sources are present ( src/main/java ): Checkstyle , PMD and SpotBugs . Groovy quality plugins will be activated if groovy sources are present ( src/main/groovy ): CodeNarc If you have both java and groovy sources then all plugins will be enabled (and they will not conflict). If animalsniffer plugin was manually registered then it would be configured the same way as other quality plugins (quality configuration unification). If cpd plugin was manually registered then it would be configured (but note that cpd plugin differ from other plugins in behaviour) Scope \u00b6 All quality plugins register a check task per source set. For example, checkstyleMain , checkstyleTest . But check task depend only on quality tasks from configured scopes. By default, all activated plugins will check only main source set: only *Main quality tasks will be executed during check (or build ). You can call quality task for not configured source set manually (e.g. checkstyleTest ). Hint To enable test sources check: quality.sourceSets = [sourceSets.main, sourceSets.test] Hint To run all checks for source set use grouping task Configs \u00b6 Plugin provides default configs for all tools. These configs are opinionated: not all possible checks are enabled, just the sane majority of them. Also, some defaults were changed. Anyway, all disabled checks are commented in config files, so it would be clear what was disabled. You can modify one or more configs with initConfigsTask . Manually registered plugins configuration \u00b6 If you register any quality plugin manually then it will be configured even if it's not supposed to be registered by project sources. For example, project contains only java sources ( /src/main/java ) and codenarc plugin registered manually: plugins { id 'groovy' id 'codenarc' id 'ru.vyarus.quality' } Then quality plugin will register checkstyle, pmd and spotbugs plugins and configure codenarc plugin (which is not supposed to be used according to current sources). To prevent manually registered plugin configuration use referenced quality option. For example, to prevent codenarc plugin configuration in example above: quality { codenarc = false }","title":"Automatic mode"},{"location":"guide/automatic/#automatic-mode","text":"By default, plugin works in automatic mode and does not require configuration to run.","title":"Automatic mode"},{"location":"guide/automatic/#plugins","text":"Java quality tool plugins will be activated if java sources are present ( src/main/java ): Checkstyle , PMD and SpotBugs . Groovy quality plugins will be activated if groovy sources are present ( src/main/groovy ): CodeNarc If you have both java and groovy sources then all plugins will be enabled (and they will not conflict). If animalsniffer plugin was manually registered then it would be configured the same way as other quality plugins (quality configuration unification). If cpd plugin was manually registered then it would be configured (but note that cpd plugin differ from other plugins in behaviour)","title":"Plugins"},{"location":"guide/automatic/#scope","text":"All quality plugins register a check task per source set. For example, checkstyleMain , checkstyleTest . But check task depend only on quality tasks from configured scopes. By default, all activated plugins will check only main source set: only *Main quality tasks will be executed during check (or build ). You can call quality task for not configured source set manually (e.g. checkstyleTest ). Hint To enable test sources check: quality.sourceSets = [sourceSets.main, sourceSets.test] Hint To run all checks for source set use grouping task","title":"Scope"},{"location":"guide/automatic/#configs","text":"Plugin provides default configs for all tools. These configs are opinionated: not all possible checks are enabled, just the sane majority of them. Also, some defaults were changed. Anyway, all disabled checks are commented in config files, so it would be clear what was disabled. You can modify one or more configs with initConfigsTask .","title":"Configs"},{"location":"guide/automatic/#manually-registered-plugins-configuration","text":"If you register any quality plugin manually then it will be configured even if it's not supposed to be registered by project sources. For example, project contains only java sources ( /src/main/java ) and codenarc plugin registered manually: plugins { id 'groovy' id 'codenarc' id 'ru.vyarus.quality' } Then quality plugin will register checkstyle, pmd and spotbugs plugins and configure codenarc plugin (which is not supposed to be used according to current sources). To prevent manually registered plugin configuration use referenced quality option. For example, to prevent codenarc plugin configuration in example above: quality { codenarc = false }","title":"Manually registered plugins configuration"},{"location":"guide/config/","text":"Configuration \u00b6 Use quality closure to configure plugin. Defaults: quality { // Tools versions checkstyleVersion = '9.1' pmdVersion = '6.34.0' spotbugsVersion = '4.4.2' codenarcVersion = '2.2.0' // works only if animalsniffer plugin applied animalsnifferVersion /** * When disabled, quality plugins will not be registered automatically (according to sources). * Only manually registered quality plugins will be configured. */ autoRegistration = true // Enable/disable tools (when auto registration disabled control configuration appliance) checkstyle = true pmd = true cpd = true spotbugs = true codenarc = true /** * Enable PMD incremental analysis (cache results between builds to speed up processing). * This is a shortcut for pmd plugin's {@code pmd.incrementalAnalysis } configuration option. * Option is disabled by default due to possible side effects with build gradle cache or incremental builds. * @deprecated from gradle 6.4 incremental analysis is enabled by default in pmd plugin! This option will not * disable it (property is useful only for enabling it in gradle 5.6 - 6.3). */ pmdIncremental = false /** * By default, cpd looks in all sources (cpd gradle plugin behaviour). When option enabled, quality plugin will * exclude all not configured source sets from cpd task sources. In case of multi-module build, where * cpd project declared in root project, all subprojects with quality plugin will exclude their sourceSets not * configured for quality checks. Also, all custom exclusions ({@link #exclude}, {@link #excludeSources}) * will also be excluded. */ cpdUnifySources = true /** * Shortcut for spotbugs.showStackTraces. Original spotbugs property is enabled by default, causing * not pretty exception logs in non strict mode (when not fails on errors). This option was introduced to change * the default to false and not show that nasty stacktrace, but still provide an easy way to revert default back. */ spotbugsShowStackTraces = false /** * The analysis effort level. The value specified should be one of min, default, or max. * Higher levels increase precision and find more bugs at the expense of running time and * memory consumption. Default is 'max'. */ spotbugsEffort = 'max' /** * The priority threshold for reporting bugs. If set to low, all bugs are reported. * If set to medium, medium and high priority bugs are reported. * If set to high, only high priority bugs are reported. Default is 'medium'. */ spotbugsLevel = 'medium' /** * Spotbugs rank should be an integer value between 1 and 20, where 1 to 4 are scariest, 5 to 9 scary, * 10 to 14 troubling, and 15 to 20 of concern bugs. * <p> * This option allows you to filter low-priority ranks: for example, setting {@code spotbugsMaxRank=15} will * filter all bugs with ranks 16-20. Note that this is not the same as {@link #spotbugsLevel}: * it has a bit different meaning (note that both priority and rank are shown for each spotbugs * violation in console). * <p> * The only way to apply rank filtering is through exclude filter. Plugin will automatically generate * additional rule in your exclude filter or in default one. But it may conflict with manual rank rule declaration * (in case if you edit exclude filter manually), so be careful when enabling this option. */ spotbugsMaxRank = 20 /** * Max memory available for spotbugs task. Note that in gradle 4 spotbugs task maximum memory was * 1/4 of physical memory, but in gradle 5 it become only 512mb (default for workers api). * To minify impact of this gradle 5 change, default value in extension is 1g now, but it may be not * enough for large projects (and so you will have to increase it manually). * <p> * IMPORTANT: setting will not work if heap size configured directly in spotbugs task (for example, with * <code>spotbugsMain.maxHeapSize = '2g'</code>. This was done in order to not break current behaviour * (when task memory is already configured) and affect only default cases (mostly caused by gradle 5 transition). * <p> * See: https://github.com/gradle/gradle/issues/6216 (Reduce default memory settings for daemon and * workers). */ spotbugsMaxHeapSize = '1g' /** * Javac lint options to show compiler warnings, not visible by default. * Applies to all CompileJava tasks. * Options will be added as -Xlint:option * Full list of options: http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCJCABJ */ lintOptions = [ 'deprecation' , 'unchecked' ] /** * Strict quality leads to build fail on any violation found. If disabled, all violation * are just printed to console. */ strict = true /** * When false, disables quality tasks execution. Allows disabling tasks without removing plugins. * Quality tasks are still registered, but skip execution, except when task called directly or through * checkQualityMain (or other source set) grouping task. */ enabled = true /** * When false, disables reporting quality issues to console. Only gradle general error messages will * remain in logs. This may be useful in cases when project contains too many warnings. * Also, console reporting require xml reports parsing, which could be time consuming in case of too * many errors (large xml reports). * True by default. */ consoleReporting = true /** * When false, no html reports will be built. True by default. */ htmlReports = true /** * Source sets to apply checks on. * Default is [sourceSets.main] to apply only for project sources, excluding tests. */ sourceSets = [ project . sourceSets . main ] /** * Source patterns (relative to source dir) to exclude from checks. Simply sets exclusions to quality tasks. * * Animalsniffer is not affected because * it's a different kind of check (and, also, it operates on classes so source patterns may not comply). * * Spotbugs does not support exclusion directly, but plugin will resolve excluded classes and apply * them to xml exclude file (default one or provided by user). * * By default nothing is excluded. * * IMPORTANT: Patterns are checked relatively to source set dirs (not including them). So you can only * match source files and packages, but not absolute file path (this is gradle specific, not plugin). * * @see org.gradle.api.tasks.SourceTask#exclude(java.lang.Iterable) (base class for all quality tasks) */ exclude = [] /** * Direct sources to exclude from checks (except animalsniffer). * This is useful as last resort, when extension or package is not enough for filtering. * Use {@link Project#files(java.lang.Object)} or {@link Project#fileTree(java.lang.Object)} * to create initial collections and apply filter on it (using * {@link org.gradle.api.file.FileTree#matching(groovy.lang.Closure)}). * * Plugin will include files into spotbugs exclusion filter xml (default one or provided by user). * * Note: this must be used when excluded classes can't be extracted to different source set and * filter by package and filename is not sufficient. */ FileCollection excludeSources /** * User configuration files directory. Files in this directory will be used instead of default (bundled) configs. */ configDir = 'gradle/config/' } Manual mode \u00b6 You can disable automatic quality plugins registration (guided by source detection) and register required plugins manually: plugins { id 'groovy' id 'checkstyle' id 'pmd' } quality { autoRegistration = false } Here checkstyle and pmd plugins will be configured and no other plugins will be registered. Disable console output \u00b6 In some cases it may not be desired to see errors in console. For example, when quality control applied on existing project and you have thousands of warnings. quality { consoleReporting = false } Warning Don't turn off console warnings in other cases: people tend to ignore problems they didn't see (practice shows that normally almost no one looks html reports of quality tools). You must see warnings for each build to finally fix them all someday (or fix them as they appear). Console reporting use xml reports, produced by quality plugins. In case of too many errors, xml parsing could slow down build. You may use reporting disabling to speed up build a bit. In most cases (when you don't have thousands of errors) console reporting will be fast . Html reports \u00b6 By default, all plugins are configured to generate both xml and html reports. Xml report is required for console output and html report preserved for consultation. If you don't need html reports (e.g. on ci server) they could be disabled: quality { htmlReports = false } Disable quality plugins \u00b6 If you want to disable all quality checks: quality { enabled = false } This will disable all quality tasks (by setting task.enabled = false for each quality task). Quality tasks will still be visible, but marked as SKIPPED on execution. Note enable state will not affect tasks called directly. For example, you set quality.enabled = false and call checkstyleMain - it will be executed. Motivation is simple - if you call task directly then you want it to work. Also, enabled state not affects quality tasks when quality grouping tasks called. For example, if you call checkQualityMain - all quality plugins will be executed, even if disabled in configuration. Motivation is the same as with direct call - you obviously want to perform quality checks. Note if quality grouping task called as dependency of other task, quality plugins will be skipped. Exceptions applies only to direct cases when expected behaviour is obvious. Configuration override \u00b6 It is still possible to configure quality plugins, but direct configuration closures will not work: Fail checkstyle { // will not work, because plugin will override it ... } But will work like this: Success afterEvaluate { checkstyle { // will be applied after plugin and override configuration ... } } For plugins configuration options look: CheckstyleExtension PmdExtension SpotBugsExtension CodeNarcExtension","title":"Configuration"},{"location":"guide/config/#configuration","text":"Use quality closure to configure plugin. Defaults: quality { // Tools versions checkstyleVersion = '9.1' pmdVersion = '6.34.0' spotbugsVersion = '4.4.2' codenarcVersion = '2.2.0' // works only if animalsniffer plugin applied animalsnifferVersion /** * When disabled, quality plugins will not be registered automatically (according to sources). * Only manually registered quality plugins will be configured. */ autoRegistration = true // Enable/disable tools (when auto registration disabled control configuration appliance) checkstyle = true pmd = true cpd = true spotbugs = true codenarc = true /** * Enable PMD incremental analysis (cache results between builds to speed up processing). * This is a shortcut for pmd plugin's {@code pmd.incrementalAnalysis } configuration option. * Option is disabled by default due to possible side effects with build gradle cache or incremental builds. * @deprecated from gradle 6.4 incremental analysis is enabled by default in pmd plugin! This option will not * disable it (property is useful only for enabling it in gradle 5.6 - 6.3). */ pmdIncremental = false /** * By default, cpd looks in all sources (cpd gradle plugin behaviour). When option enabled, quality plugin will * exclude all not configured source sets from cpd task sources. In case of multi-module build, where * cpd project declared in root project, all subprojects with quality plugin will exclude their sourceSets not * configured for quality checks. Also, all custom exclusions ({@link #exclude}, {@link #excludeSources}) * will also be excluded. */ cpdUnifySources = true /** * Shortcut for spotbugs.showStackTraces. Original spotbugs property is enabled by default, causing * not pretty exception logs in non strict mode (when not fails on errors). This option was introduced to change * the default to false and not show that nasty stacktrace, but still provide an easy way to revert default back. */ spotbugsShowStackTraces = false /** * The analysis effort level. The value specified should be one of min, default, or max. * Higher levels increase precision and find more bugs at the expense of running time and * memory consumption. Default is 'max'. */ spotbugsEffort = 'max' /** * The priority threshold for reporting bugs. If set to low, all bugs are reported. * If set to medium, medium and high priority bugs are reported. * If set to high, only high priority bugs are reported. Default is 'medium'. */ spotbugsLevel = 'medium' /** * Spotbugs rank should be an integer value between 1 and 20, where 1 to 4 are scariest, 5 to 9 scary, * 10 to 14 troubling, and 15 to 20 of concern bugs. * <p> * This option allows you to filter low-priority ranks: for example, setting {@code spotbugsMaxRank=15} will * filter all bugs with ranks 16-20. Note that this is not the same as {@link #spotbugsLevel}: * it has a bit different meaning (note that both priority and rank are shown for each spotbugs * violation in console). * <p> * The only way to apply rank filtering is through exclude filter. Plugin will automatically generate * additional rule in your exclude filter or in default one. But it may conflict with manual rank rule declaration * (in case if you edit exclude filter manually), so be careful when enabling this option. */ spotbugsMaxRank = 20 /** * Max memory available for spotbugs task. Note that in gradle 4 spotbugs task maximum memory was * 1/4 of physical memory, but in gradle 5 it become only 512mb (default for workers api). * To minify impact of this gradle 5 change, default value in extension is 1g now, but it may be not * enough for large projects (and so you will have to increase it manually). * <p> * IMPORTANT: setting will not work if heap size configured directly in spotbugs task (for example, with * <code>spotbugsMain.maxHeapSize = '2g'</code>. This was done in order to not break current behaviour * (when task memory is already configured) and affect only default cases (mostly caused by gradle 5 transition). * <p> * See: https://github.com/gradle/gradle/issues/6216 (Reduce default memory settings for daemon and * workers). */ spotbugsMaxHeapSize = '1g' /** * Javac lint options to show compiler warnings, not visible by default. * Applies to all CompileJava tasks. * Options will be added as -Xlint:option * Full list of options: http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javac.html#BHCJCABJ */ lintOptions = [ 'deprecation' , 'unchecked' ] /** * Strict quality leads to build fail on any violation found. If disabled, all violation * are just printed to console. */ strict = true /** * When false, disables quality tasks execution. Allows disabling tasks without removing plugins. * Quality tasks are still registered, but skip execution, except when task called directly or through * checkQualityMain (or other source set) grouping task. */ enabled = true /** * When false, disables reporting quality issues to console. Only gradle general error messages will * remain in logs. This may be useful in cases when project contains too many warnings. * Also, console reporting require xml reports parsing, which could be time consuming in case of too * many errors (large xml reports). * True by default. */ consoleReporting = true /** * When false, no html reports will be built. True by default. */ htmlReports = true /** * Source sets to apply checks on. * Default is [sourceSets.main] to apply only for project sources, excluding tests. */ sourceSets = [ project . sourceSets . main ] /** * Source patterns (relative to source dir) to exclude from checks. Simply sets exclusions to quality tasks. * * Animalsniffer is not affected because * it's a different kind of check (and, also, it operates on classes so source patterns may not comply). * * Spotbugs does not support exclusion directly, but plugin will resolve excluded classes and apply * them to xml exclude file (default one or provided by user). * * By default nothing is excluded. * * IMPORTANT: Patterns are checked relatively to source set dirs (not including them). So you can only * match source files and packages, but not absolute file path (this is gradle specific, not plugin). * * @see org.gradle.api.tasks.SourceTask#exclude(java.lang.Iterable) (base class for all quality tasks) */ exclude = [] /** * Direct sources to exclude from checks (except animalsniffer). * This is useful as last resort, when extension or package is not enough for filtering. * Use {@link Project#files(java.lang.Object)} or {@link Project#fileTree(java.lang.Object)} * to create initial collections and apply filter on it (using * {@link org.gradle.api.file.FileTree#matching(groovy.lang.Closure)}). * * Plugin will include files into spotbugs exclusion filter xml (default one or provided by user). * * Note: this must be used when excluded classes can't be extracted to different source set and * filter by package and filename is not sufficient. */ FileCollection excludeSources /** * User configuration files directory. Files in this directory will be used instead of default (bundled) configs. */ configDir = 'gradle/config/' }","title":"Configuration"},{"location":"guide/config/#manual-mode","text":"You can disable automatic quality plugins registration (guided by source detection) and register required plugins manually: plugins { id 'groovy' id 'checkstyle' id 'pmd' } quality { autoRegistration = false } Here checkstyle and pmd plugins will be configured and no other plugins will be registered.","title":"Manual mode"},{"location":"guide/config/#disable-console-output","text":"In some cases it may not be desired to see errors in console. For example, when quality control applied on existing project and you have thousands of warnings. quality { consoleReporting = false } Warning Don't turn off console warnings in other cases: people tend to ignore problems they didn't see (practice shows that normally almost no one looks html reports of quality tools). You must see warnings for each build to finally fix them all someday (or fix them as they appear). Console reporting use xml reports, produced by quality plugins. In case of too many errors, xml parsing could slow down build. You may use reporting disabling to speed up build a bit. In most cases (when you don't have thousands of errors) console reporting will be fast .","title":"Disable console output"},{"location":"guide/config/#html-reports","text":"By default, all plugins are configured to generate both xml and html reports. Xml report is required for console output and html report preserved for consultation. If you don't need html reports (e.g. on ci server) they could be disabled: quality { htmlReports = false }","title":"Html reports"},{"location":"guide/config/#disable-quality-plugins","text":"If you want to disable all quality checks: quality { enabled = false } This will disable all quality tasks (by setting task.enabled = false for each quality task). Quality tasks will still be visible, but marked as SKIPPED on execution. Note enable state will not affect tasks called directly. For example, you set quality.enabled = false and call checkstyleMain - it will be executed. Motivation is simple - if you call task directly then you want it to work. Also, enabled state not affects quality tasks when quality grouping tasks called. For example, if you call checkQualityMain - all quality plugins will be executed, even if disabled in configuration. Motivation is the same as with direct call - you obviously want to perform quality checks. Note if quality grouping task called as dependency of other task, quality plugins will be skipped. Exceptions applies only to direct cases when expected behaviour is obvious.","title":"Disable quality plugins"},{"location":"guide/config/#configuration-override","text":"It is still possible to configure quality plugins, but direct configuration closures will not work: Fail checkstyle { // will not work, because plugin will override it ... } But will work like this: Success afterEvaluate { checkstyle { // will be applied after plugin and override configuration ... } } For plugins configuration options look: CheckstyleExtension PmdExtension SpotBugsExtension CodeNarcExtension","title":"Configuration override"},{"location":"guide/exclusion/","text":"Exclusions \u00b6 Exclude files from check \u00b6 All quality tasks are based on SourceTask which allows excluding sources using ant patterns. To apply exclusion to all plugins at once use: quality { exclude '**/sample/**' } Note This will not affect animalsniffer plugin, because it checks different thing (binary compatibility) and use it's own configuration to configure exclusions . Info Spotbugs task does not support exclusions on task level, so plugin manually resolve all excluded classes and add them to spotbugs excludes filter xml file (default or custom user file). As a result, exclusion works the same way for all plugins. Note Exclusion patterns are resolved on relative paths (relative to source dir), so absolute file path matching will not work. Your pattern must match just \"package\" and file name parts. If you need to exclude on full paths then use direct source exclusion . Alternative configurations \u00b6 All of the following configurations are allowed: quality { exclude '**/Sample.java' , 'com/foo/**' } quality { exclude '**/Sample.java' exclude 'com/foo/**' } quality { exclude = [ '**/Sample.java' , 'com/foo/**' ] } Direct source exclusions \u00b6 When you need to exclude sources from check, you should consider: Extract such sources into it's own source set and exclude this set from check. (generated classes case) Use pattern excludes (see above) to exclude sources based on package and (or) file name If non of the above works for you, then you did sources configuration not according to best practices. Anyway, there is last resort option for such cases (when it could not be done the right way). Suppose we have generated sources, added to main source set: sourceSets . main { java { srcDir 'build/generated/java' } } Here we have two source dirs for java sources: src/main/java and build/generated/java . We want to exclude them from quality check, so we try: Fail quality { exclude '**/generated/**' } which WILL NOT WORK because gradle applies patterns relatively to build/generated/java directory and so our patter will never match. Instead, specify ignored files directly, using rich gradle files api : Success quality { excludeSources = fileTree ( 'build/generated' ) } This will exclude all files in 'generated' directory from quality tools checks. Note As with patterns exclude, this will not affect animalsniffer. For spotbugs, plugin will add excluded classes to exclude filter. Another example, just to show how flexible it could be configured: quality { excludeSources = fileTree ( 'build/generated' ). matching { include '**/sample/**/*.java' } } Exclude all java sources in sample package (in generated directory). Include pattern here will work relatively to build/generated directory. You can use even single files: quality { excludeSources = files ( 'build/generated/java/com/mypkg/Bad.java' ) } Exclude options could be used together (exclude files and patterns).","title":"Exclusion"},{"location":"guide/exclusion/#exclusions","text":"","title":"Exclusions"},{"location":"guide/exclusion/#exclude-files-from-check","text":"All quality tasks are based on SourceTask which allows excluding sources using ant patterns. To apply exclusion to all plugins at once use: quality { exclude '**/sample/**' } Note This will not affect animalsniffer plugin, because it checks different thing (binary compatibility) and use it's own configuration to configure exclusions . Info Spotbugs task does not support exclusions on task level, so plugin manually resolve all excluded classes and add them to spotbugs excludes filter xml file (default or custom user file). As a result, exclusion works the same way for all plugins. Note Exclusion patterns are resolved on relative paths (relative to source dir), so absolute file path matching will not work. Your pattern must match just \"package\" and file name parts. If you need to exclude on full paths then use direct source exclusion .","title":"Exclude files from check"},{"location":"guide/exclusion/#alternative-configurations","text":"All of the following configurations are allowed: quality { exclude '**/Sample.java' , 'com/foo/**' } quality { exclude '**/Sample.java' exclude 'com/foo/**' } quality { exclude = [ '**/Sample.java' , 'com/foo/**' ] }","title":"Alternative configurations"},{"location":"guide/exclusion/#direct-source-exclusions","text":"When you need to exclude sources from check, you should consider: Extract such sources into it's own source set and exclude this set from check. (generated classes case) Use pattern excludes (see above) to exclude sources based on package and (or) file name If non of the above works for you, then you did sources configuration not according to best practices. Anyway, there is last resort option for such cases (when it could not be done the right way). Suppose we have generated sources, added to main source set: sourceSets . main { java { srcDir 'build/generated/java' } } Here we have two source dirs for java sources: src/main/java and build/generated/java . We want to exclude them from quality check, so we try: Fail quality { exclude '**/generated/**' } which WILL NOT WORK because gradle applies patterns relatively to build/generated/java directory and so our patter will never match. Instead, specify ignored files directly, using rich gradle files api : Success quality { excludeSources = fileTree ( 'build/generated' ) } This will exclude all files in 'generated' directory from quality tools checks. Note As with patterns exclude, this will not affect animalsniffer. For spotbugs, plugin will add excluded classes to exclude filter. Another example, just to show how flexible it could be configured: quality { excludeSources = fileTree ( 'build/generated' ). matching { include '**/sample/**/*.java' } } Exclude all java sources in sample package (in generated directory). Include pattern here will work relatively to build/generated directory. You can use even single files: quality { excludeSources = files ( 'build/generated/java/com/mypkg/Bad.java' ) } Exclude options could be used together (exclude files and patterns).","title":"Direct source exclusions"},{"location":"guide/profile/","text":"Profiling \u00b6 Gradle profile report ( --profile option ) shows quality tools tasks time (checkstyleMain, pmdMain etc), which includes both tool execution time and console reporting (performed by quality plugin). If you need to know exact console reporting time use --info option. Plugin writes reporting execution time as info log (see log messages starting with [plugin:quality] just after quality tools logs). Alternatively, you can disable console reporting and run quality tasks with --profile again to see \"pure\" quality plugins time.","title":"Profile"},{"location":"guide/profile/#profiling","text":"Gradle profile report ( --profile option ) shows quality tools tasks time (checkstyleMain, pmdMain etc), which includes both tool execution time and console reporting (performed by quality plugin). If you need to know exact console reporting time use --info option. Plugin writes reporting execution time as info log (see log messages starting with [plugin:quality] just after quality tools logs). Alternatively, you can disable console reporting and run quality tasks with --profile again to see \"pure\" quality plugins time.","title":"Profiling"},{"location":"task/config/","text":"Copy configs task \u00b6 initQualityConfig task Plugin contains predefined configurations for all plugins. During execution default files are copied into $buildDir/quality-configs (if no custom user configs provided). If you want to customize default configs then use the following task to copy everything into project: $ gradlew initQualityConfig It will copy all configs into configured ( quality.configDir ) folder (will not override existing configs). gradle\\ config\\ checkstyle\\ checkstyle.xml suppressions.xml codenarc\\ codenarc.xml cpd\\ cpdhtml.xslt pmd\\ pmd.xml spotbugs\\ exclude.xml html-report-style.xsl Task copies all configs, but you may remove all files you don't want to customize (plugin will use default versions for them). File names are important: if you rename files plugin will not find them and use defaults. Configuration files contain all possible rules. Not used rules are commented (or excluded).","title":"Copy config"},{"location":"task/config/#copy-configs-task","text":"initQualityConfig task Plugin contains predefined configurations for all plugins. During execution default files are copied into $buildDir/quality-configs (if no custom user configs provided). If you want to customize default configs then use the following task to copy everything into project: $ gradlew initQualityConfig It will copy all configs into configured ( quality.configDir ) folder (will not override existing configs). gradle\\ config\\ checkstyle\\ checkstyle.xml suppressions.xml codenarc\\ codenarc.xml cpd\\ cpdhtml.xslt pmd\\ pmd.xml spotbugs\\ exclude.xml html-report-style.xsl Task copies all configs, but you may remove all files you don't want to customize (plugin will use default versions for them). File names are important: if you rename files plugin will not find them and use defaults. Configuration files contain all possible rules. Not used rules are commented (or excluded).","title":"Copy configs task"},{"location":"task/group/","text":"Grouping tasks \u00b6 checkQuality[Main] task Each quality plugin (checkstyle, pmd, spotbugs etc) registers separate quality task for each source set. For example, checkstyleMain and checkstyleTest . But check task will only depend on tasks for configured source sets ( quality.sourceSets ). For example, by default, only main source set is configured, so only checkstyleMain assigned to check . Anyway, checkstyleTest task is registered and may be called directly (even if it's not used for project validation). By analogy, quality plugin register grouping task for each available source set: checkQualityMain , checkQualityTest etc. These tasks simply calls all quality tasks relative to source set. For example, if we have java quality plugins registered then calling checkQualityMain will call checkstyleMain , pmdMain and spotbugsMain . This is just a handy shortcut to run quality check tasks for exact source set without running tests (like main check ). Generally usable to periodically check code violations.","title":"Group"},{"location":"task/group/#grouping-tasks","text":"checkQuality[Main] task Each quality plugin (checkstyle, pmd, spotbugs etc) registers separate quality task for each source set. For example, checkstyleMain and checkstyleTest . But check task will only depend on tasks for configured source sets ( quality.sourceSets ). For example, by default, only main source set is configured, so only checkstyleMain assigned to check . Anyway, checkstyleTest task is registered and may be called directly (even if it's not used for project validation). By analogy, quality plugin register grouping task for each available source set: checkQualityMain , checkQualityTest etc. These tasks simply calls all quality tasks relative to source set. For example, if we have java quality plugins registered then calling checkQualityMain will call checkstyleMain , pmdMain and spotbugsMain . This is just a handy shortcut to run quality check tasks for exact source set without running tests (like main check ). Generally usable to periodically check code violations.","title":"Grouping tasks"},{"location":"tool/animalsniffer/","text":"Animalsniffer \u00b6 Java, Groovy | Home | Plugin In contrast to other tools, animalsniffer plugin is never activated automatically. Plugin will only apply common configuration (used source sets, strict mode) if ru.vyarus.animalsniffer plugin manually applied: plugins { id 'ru.vyarus.animalsniffer' version '1.5.4' } Config \u00b6 Animalsniffer version could be defined through quality config: quality { animalsnifferVersion = '1.16' } Default version is not declared and animalsniffer plugin driven version will be used by default. Quality configuration is applied to animalsniffer configuration like this: animalsniffer { toolVersion = extension . animalsnifferVersion ignoreFailures = ! extension . strict sourceSets = extension . sourceSets }","title":"Animalsniffer"},{"location":"tool/animalsniffer/#animalsniffer","text":"Java, Groovy | Home | Plugin In contrast to other tools, animalsniffer plugin is never activated automatically. Plugin will only apply common configuration (used source sets, strict mode) if ru.vyarus.animalsniffer plugin manually applied: plugins { id 'ru.vyarus.animalsniffer' version '1.5.4' }","title":"Animalsniffer"},{"location":"tool/animalsniffer/#config","text":"Animalsniffer version could be defined through quality config: quality { animalsnifferVersion = '1.16' } Default version is not declared and animalsniffer plugin driven version will be used by default. Quality configuration is applied to animalsniffer configuration like this: animalsniffer { toolVersion = extension . animalsnifferVersion ignoreFailures = ! extension . strict sourceSets = extension . sourceSets }","title":"Config"},{"location":"tool/checkstyle/","text":"Checkstyle \u00b6 Java | Home | Release Notes | Plugin By default, plugin activates if java sources available ( src/main/java ). Default config contains all possible checks, but some of them are disabled (note that some checkstyle rules are opposite and never intended to be used together). Uncomment check to enable it. In case you will use a custom config: checkstyle config must describe all used rules. So when new version release with new rules, config must be manually updated to add new rules (otherwise they would not be used). Output \u00b6 8 Checkstyle rule violations were found in 2 files [Misc | NewlineAtEndOfFile] sample.(Sample.java:1) File does not end with a newline. http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile ... Config \u00b6 Tool config options with defaults: quality { checkstyleVersion = '9.1' checkstyle = true // false to disable automatic plugin activation } Suppress \u00b6 To suppress violation : @SuppressWarnings ( \"NewlineAtEndOfFile\" ) Or with prefix (but require lower cased name): @SuppressWarnings ( \"checkstyle:newlineatendoffile\" ) To suppress all violations: @SuppressWarnings ( \"all\" ) Or using comments : // CHECKSTYLE:OFF .. anything .. // CHECKSTYLE:ON Suppressions file \u00b6 You can also use external suppressions file . It may be a good option for disabling entire rules without overriding the default config file. Suppressions config could: 1. disable some checks in all files 2. disable checks only in some files (or file pattern) 3. disable checks in exact file and under exact lines 4. disable checks by error message The default config already configures optional suppressions file usage, so to use it just drop in suppressions file into checkstyle configurations dir: gradle/config/checkstyle/suppressions.xml Alternatively, you can use configs init task which will bring the default (empty) suppressions.xml: <?xml version=\"1.0\"?> <!DOCTYPE suppressions PUBLIC \"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN\" \"https://checkstyle.org/dtds/suppressions_1_2.dtd\"> <!-- Empty suppressions file: copy it into gradle/config/checkstyle and specify required suppressions (https://checkstyle.sourceforge.io/config_filters.html#SuppressionFilter)--> <suppressions> <!--<suppress checks=\"NewlineAtEndOfFileCheck\" files=\"Sample.java\"/>--> <!--<suppress message=\"Missing a Javadoc comment.\"/>--> </suppressions> Warning Pay attention that check names in the file are all have postfix 'Check', whereas violations in the console omit this postfix. There are many configuration examples in the checkstyle documentation","title":"Checkstyle"},{"location":"tool/checkstyle/#checkstyle","text":"Java | Home | Release Notes | Plugin By default, plugin activates if java sources available ( src/main/java ). Default config contains all possible checks, but some of them are disabled (note that some checkstyle rules are opposite and never intended to be used together). Uncomment check to enable it. In case you will use a custom config: checkstyle config must describe all used rules. So when new version release with new rules, config must be manually updated to add new rules (otherwise they would not be used).","title":"Checkstyle"},{"location":"tool/checkstyle/#output","text":"8 Checkstyle rule violations were found in 2 files [Misc | NewlineAtEndOfFile] sample.(Sample.java:1) File does not end with a newline. http://checkstyle.sourceforge.net/config_misc.html#NewlineAtEndOfFile ...","title":"Output"},{"location":"tool/checkstyle/#config","text":"Tool config options with defaults: quality { checkstyleVersion = '9.1' checkstyle = true // false to disable automatic plugin activation }","title":"Config"},{"location":"tool/checkstyle/#suppress","text":"To suppress violation : @SuppressWarnings ( \"NewlineAtEndOfFile\" ) Or with prefix (but require lower cased name): @SuppressWarnings ( \"checkstyle:newlineatendoffile\" ) To suppress all violations: @SuppressWarnings ( \"all\" ) Or using comments : // CHECKSTYLE:OFF .. anything .. // CHECKSTYLE:ON","title":"Suppress"},{"location":"tool/checkstyle/#suppressions-file","text":"You can also use external suppressions file . It may be a good option for disabling entire rules without overriding the default config file. Suppressions config could: 1. disable some checks in all files 2. disable checks only in some files (or file pattern) 3. disable checks in exact file and under exact lines 4. disable checks by error message The default config already configures optional suppressions file usage, so to use it just drop in suppressions file into checkstyle configurations dir: gradle/config/checkstyle/suppressions.xml Alternatively, you can use configs init task which will bring the default (empty) suppressions.xml: <?xml version=\"1.0\"?> <!DOCTYPE suppressions PUBLIC \"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN\" \"https://checkstyle.org/dtds/suppressions_1_2.dtd\"> <!-- Empty suppressions file: copy it into gradle/config/checkstyle and specify required suppressions (https://checkstyle.sourceforge.io/config_filters.html#SuppressionFilter)--> <suppressions> <!--<suppress checks=\"NewlineAtEndOfFileCheck\" files=\"Sample.java\"/>--> <!--<suppress message=\"Missing a Javadoc comment.\"/>--> </suppressions> Warning Pay attention that check names in the file are all have postfix 'Check', whereas violations in the console omit this postfix. There are many configuration examples in the checkstyle documentation","title":"Suppressions file"},{"location":"tool/codenarc/","text":"Checkstyle \u00b6 Groovy | Home | Release Notes | Plugin By default, plugin activates if groovy sources available ( src/main/groovy ). Output \u00b6 24 (0 / 10 / 14) CodeNarc violations were found in 2 files [Formatting | ClassJavadoc] sample.(GSample.groovy:3) [priority 2] >> class GSample { Class sample.GSample missing Javadoc Makes sure each class and interface definition is preceded by javadoc. Enum definitions are not checked, due to strange behavior in the Groovy AST. http://codenarc.sourceforge.net/codenarc-rules-formatting.html#ClassJavadoc ... Counts in braces show priorities (p1/p2/p3). Config \u00b6 Tool config options with defaults: quality { codenarcVersion = '2.2.0' codenarc = true // false to disable automatic plugin activation } Suppress \u00b6 To suppress violation : @SuppressWarnings ( \"ClassJavadoc\" ) Since codenarc 2.2 CodeNarc. prefix could be used to differentiate with pure java suppressions: @SuppressWarnings ( \"CodeNarc.ClassJavadoc\" ) To suppress all violations use: @SuppressWarnings ( ' CodeNarc ' ) Also, comments may be used for disabling blocks of file.","title":"CodeNarc"},{"location":"tool/codenarc/#checkstyle","text":"Groovy | Home | Release Notes | Plugin By default, plugin activates if groovy sources available ( src/main/groovy ).","title":"Checkstyle"},{"location":"tool/codenarc/#output","text":"24 (0 / 10 / 14) CodeNarc violations were found in 2 files [Formatting | ClassJavadoc] sample.(GSample.groovy:3) [priority 2] >> class GSample { Class sample.GSample missing Javadoc Makes sure each class and interface definition is preceded by javadoc. Enum definitions are not checked, due to strange behavior in the Groovy AST. http://codenarc.sourceforge.net/codenarc-rules-formatting.html#ClassJavadoc ... Counts in braces show priorities (p1/p2/p3).","title":"Output"},{"location":"tool/codenarc/#config","text":"Tool config options with defaults: quality { codenarcVersion = '2.2.0' codenarc = true // false to disable automatic plugin activation }","title":"Config"},{"location":"tool/codenarc/#suppress","text":"To suppress violation : @SuppressWarnings ( \"ClassJavadoc\" ) Since codenarc 2.2 CodeNarc. prefix could be used to differentiate with pure java suppressions: @SuppressWarnings ( \"CodeNarc.ClassJavadoc\" ) To suppress all violations use: @SuppressWarnings ( ' CodeNarc ' ) Also, comments may be used for disabling blocks of file.","title":"Suppress"},{"location":"tool/cpd/","text":"CPD (Copy/Paste Detector) \u00b6 Java by default, suitable for anything (groovy, jsp, simple text etc.) | Home | Plugin CPD support activates only when de.aaschmid.cpd gradle plugin applied manually: plugins { id 'de.aaschmid.cpd' version '3.3' id 'ru.vyarus.quality' version '4.7.0' } CPD is a part of PMD project and so there is no need for additional version configuration (pmd version used). Note Special xsl file used for manual html report generation because plugin does not support html report. This is official pmd style , but modified to show all duplicates (original script shows only duplicates > 30 lines). Output \u00b6 2 java duplicates were found by CPD sample.cpd.(OtherStruct1.java:3) [16 lines / 75 tokens] sample.cpd.(OtherStruct2.java:3) \u2502 3\u2502 public class OtherStruct1 { 4\u2502 5\u2502 public static void main(String[] args) { 6\u2502 Math.sqrt(12); 7\u2502 Math.sqrt(12); 8\u2502 Math.sqrt(12); 9\u2502 Math.sqrt(12); 10\u2502 Math.sqrt(12); 11\u2502 Math.sqrt(12); 12\u2502 Math.sqrt(12); 13\u2502 Math.sqrt(12); 14\u2502 Math.sqrt(12); 15\u2502 Math.sqrt(12); 16\u2502 } 17\u2502 18\u2502 public void differentMethod1() { Shows all files with duplicate parts and source sample from the first file. Note Order of files may vary on different environments and so you may see sources from different files in the resulted report. It doesn't matter much, just don't be surprised. Warning Tool does not search for exact matches, instead it tries to find very common blocks: for example, some code block could be copied and slightly modified and cpd will be able to match it. Config \u00b6 Config options with defaults: quality { cpd = true // false to disable plugin configuration cpdUnifySources = true // false to not modify cpdCheck task sources } Note CPD itself may be configured with plugin's cpd closure Configurations applied by plugin: cpd { toolVersion = quality . pmdVersion ignoreFailures = ! extension . strict } If only groovy sources available, then cpd.language automatically set to groovy (but only if cpd task declared in the same module with quality plugin!). Cpd tasks \u00b6 In contrast to other quality tools CPD plugin registers only one task cpdCheck instead of task per source set (otherwise it would be impossible to find duplicates between source sets or even between different modules). By default, cpdCheck task configured to check all available source sets. But quality plugin will modify chpdCheck.source : All files from source sets, not configured for quality checks ( quality.sourceSets ) are removed. This way cpd scope is unified with other quality plugins scope. Global excludes are also applied. Source modifications could be disabled with quality.cpdUnifySources = false If multiple cpd tasks would be registered (other tasks declared manually), sources would be modified only for default cpdCheck task. But console reporting and HTML report will be added for all tasks. Also, all cpd tasks would be disabled with quality.enabled = false Note By default, CPD configured for java sources check. To change target language use: cpd { language = 'groovy' } Warning CPD will try to check all files in enabled source sets. For example, if you have both java and groovy sources in main source set then CPD will try to check both and, most likely, will fail with groovy parse error (as language is java by default). To solve such cases either manually exclude additional sources: cpdCheck . exclude ' * . groovy ' Or split check in multiple tasks, where each task checks only one language (see below), Multiple file types support \u00b6 If you need to check more than one type of files (for example, java and groovy sources), you'll need to configure separate tasks per each required type. For example: cpdCheck . exclude '*.groovy' task groovyCpdCheck ( type: de . aaschmid . gradle . plugins . cpd . Cpd ) { language = 'groovy' source = sourceSets . main . allGroovy } Here groovy sources excluded from default cpdCheck task (because cpd plugin by default covers all source sets). Now the default task will search duplicates only in java files (and only within sources configured in quality plugin). New task declared for searching groovy duplicates (groovyCpdCheck). Both tasks will be assigned to check , so by calling gradlew check you'll run both checks. Console report will be shown for both tasks (and HTML reports generated). Note that task language will be also mentioned in console report: :check :cpdCheck 2 java duplicates were found by CPD ... :groovyCpdCheck 2 groovy duplicates were found by CPD ... Tip CPD understands many source languages . But if specified language cannot be found, a fallback mechanism uses net.sourceforge.pmd.cpd.AnyLanguage instead. This fallback language does not run ANTLR and therefore also checks duplicates in comments. This way you can use cpd for searching for duplicates even in pure text files, web templates or other resources. Multi-module projects \u00b6 For multi-module projects, it is recommended to apply cpd plugin in the root project. This way only one cpdCheck task is created (in the root project), which will check sources from all modules (it's the only way to find duplicates between different modules). But quality plugin, should be applied on module level (because all other quality tasks are source set scoped). Expected root project configuration looks like this: plugins { id 'de.aaschmid.cpd' version '3.1' id 'ru.vyarus.quality' version '4.5.0' apply false } cpd { // cpd configuration, if required } // possibly other cpd tasks subprojects { apply plugin: 'java' apply plugin: 'ru.vyarus.quality' quality { // plugin configuration, if required } } This way each module have its own quality plugin, but quality configuration is the same in all modules. Quality plugin will detect cpd plugin in the root project and configure it the same way as in single module case. But as quality plugin will apply in each module, only first configured module will apply cpd modifications of toolVersion and ignoreFailures (assuming this settings are the same for all modules). Each module will exclude cpdCheck task sources, not covered by quality plugin configuration. For example, if only main source set configured, each module will exclude test sources. This way, each module control sources only related to its module and overall cpdCheck sources configuration would be correct. Each module will attach all root project's cpd tasks to its check (sub module's check depend on root project tasks). Imagine if you work in one module you may call check only on module level. With common quality tasks its clear - all configured module's source sets must be validated. But you may introduce duplicates (e.g. copied method from other module) and the only way to detect it is to call root project tasks (so its completely logical to assign root cpd check to module checks). As an example, suppose we have 2 modules mod1 and mod2 with root project configuration as described above: root project's cpd plugin will be configured mod1 will exclude mod1/src/test/java from crpCheck.sources :mod1:check depends on :cpdCheck mod2 will exclude mod2/src/test/java from crpCheck.sources :mod2:check depends on :cpdCheck You will also notice, that in the multi-module setup console output will identify class module: mod1/sample.cpd.(OtherStruct1.java:3) [16 lines / 75 tokens] mod2/sample.cpd.(OtherStruct2.java:3) \u2502 3\u2502 public class OtherStruct1 { 4\u2502 5\u2502 public static void main(String[] args) { 6\u2502 Math.sqrt(12); Tip Quality plugin actually search CPD plugin not in the root-most project but in entire parent chain. So if you have complex gradle project and cpd plugin declared somewhere in the middle of projects hierarchy, everything will still be properly configured. Suppress \u00b6 CPD violations could be suppressed only for some languages (Java, C/C++, Dart, Go, Javascript, Kotlin, Lua, Matlab, Objective-C, PL/SQL, Python and Swift) with comments containing CPD-OFF and CPD-ON: public Object someParameterizedFactoryMethod ( int x ) throws Exception { // some unignored code // tell cpd to start ignoring code - CPD-OFF // mission critical code, manually loop unroll goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); // resume CPD analysis - CPD-ON // further code will *not* be ignored } Java sources could be also suppressed with annotations: //enable suppression @SuppressWarnings ( \"CPD-START\" ) public Object someParameterizedFactoryMethod ( int x ) throws Exception { // any code here will be ignored for the duplication detection } //disable suppression @SuppressWarnings ( \"CPD-END) public void nextMethod() { }","title":"CPD"},{"location":"tool/cpd/#cpd-copypaste-detector","text":"Java by default, suitable for anything (groovy, jsp, simple text etc.) | Home | Plugin CPD support activates only when de.aaschmid.cpd gradle plugin applied manually: plugins { id 'de.aaschmid.cpd' version '3.3' id 'ru.vyarus.quality' version '4.7.0' } CPD is a part of PMD project and so there is no need for additional version configuration (pmd version used). Note Special xsl file used for manual html report generation because plugin does not support html report. This is official pmd style , but modified to show all duplicates (original script shows only duplicates > 30 lines).","title":"CPD (Copy/Paste Detector)"},{"location":"tool/cpd/#output","text":"2 java duplicates were found by CPD sample.cpd.(OtherStruct1.java:3) [16 lines / 75 tokens] sample.cpd.(OtherStruct2.java:3) \u2502 3\u2502 public class OtherStruct1 { 4\u2502 5\u2502 public static void main(String[] args) { 6\u2502 Math.sqrt(12); 7\u2502 Math.sqrt(12); 8\u2502 Math.sqrt(12); 9\u2502 Math.sqrt(12); 10\u2502 Math.sqrt(12); 11\u2502 Math.sqrt(12); 12\u2502 Math.sqrt(12); 13\u2502 Math.sqrt(12); 14\u2502 Math.sqrt(12); 15\u2502 Math.sqrt(12); 16\u2502 } 17\u2502 18\u2502 public void differentMethod1() { Shows all files with duplicate parts and source sample from the first file. Note Order of files may vary on different environments and so you may see sources from different files in the resulted report. It doesn't matter much, just don't be surprised. Warning Tool does not search for exact matches, instead it tries to find very common blocks: for example, some code block could be copied and slightly modified and cpd will be able to match it.","title":"Output"},{"location":"tool/cpd/#config","text":"Config options with defaults: quality { cpd = true // false to disable plugin configuration cpdUnifySources = true // false to not modify cpdCheck task sources } Note CPD itself may be configured with plugin's cpd closure Configurations applied by plugin: cpd { toolVersion = quality . pmdVersion ignoreFailures = ! extension . strict } If only groovy sources available, then cpd.language automatically set to groovy (but only if cpd task declared in the same module with quality plugin!).","title":"Config"},{"location":"tool/cpd/#cpd-tasks","text":"In contrast to other quality tools CPD plugin registers only one task cpdCheck instead of task per source set (otherwise it would be impossible to find duplicates between source sets or even between different modules). By default, cpdCheck task configured to check all available source sets. But quality plugin will modify chpdCheck.source : All files from source sets, not configured for quality checks ( quality.sourceSets ) are removed. This way cpd scope is unified with other quality plugins scope. Global excludes are also applied. Source modifications could be disabled with quality.cpdUnifySources = false If multiple cpd tasks would be registered (other tasks declared manually), sources would be modified only for default cpdCheck task. But console reporting and HTML report will be added for all tasks. Also, all cpd tasks would be disabled with quality.enabled = false Note By default, CPD configured for java sources check. To change target language use: cpd { language = 'groovy' } Warning CPD will try to check all files in enabled source sets. For example, if you have both java and groovy sources in main source set then CPD will try to check both and, most likely, will fail with groovy parse error (as language is java by default). To solve such cases either manually exclude additional sources: cpdCheck . exclude ' * . groovy ' Or split check in multiple tasks, where each task checks only one language (see below),","title":"Cpd tasks"},{"location":"tool/cpd/#multiple-file-types-support","text":"If you need to check more than one type of files (for example, java and groovy sources), you'll need to configure separate tasks per each required type. For example: cpdCheck . exclude '*.groovy' task groovyCpdCheck ( type: de . aaschmid . gradle . plugins . cpd . Cpd ) { language = 'groovy' source = sourceSets . main . allGroovy } Here groovy sources excluded from default cpdCheck task (because cpd plugin by default covers all source sets). Now the default task will search duplicates only in java files (and only within sources configured in quality plugin). New task declared for searching groovy duplicates (groovyCpdCheck). Both tasks will be assigned to check , so by calling gradlew check you'll run both checks. Console report will be shown for both tasks (and HTML reports generated). Note that task language will be also mentioned in console report: :check :cpdCheck 2 java duplicates were found by CPD ... :groovyCpdCheck 2 groovy duplicates were found by CPD ... Tip CPD understands many source languages . But if specified language cannot be found, a fallback mechanism uses net.sourceforge.pmd.cpd.AnyLanguage instead. This fallback language does not run ANTLR and therefore also checks duplicates in comments. This way you can use cpd for searching for duplicates even in pure text files, web templates or other resources.","title":"Multiple file types support"},{"location":"tool/cpd/#multi-module-projects","text":"For multi-module projects, it is recommended to apply cpd plugin in the root project. This way only one cpdCheck task is created (in the root project), which will check sources from all modules (it's the only way to find duplicates between different modules). But quality plugin, should be applied on module level (because all other quality tasks are source set scoped). Expected root project configuration looks like this: plugins { id 'de.aaschmid.cpd' version '3.1' id 'ru.vyarus.quality' version '4.5.0' apply false } cpd { // cpd configuration, if required } // possibly other cpd tasks subprojects { apply plugin: 'java' apply plugin: 'ru.vyarus.quality' quality { // plugin configuration, if required } } This way each module have its own quality plugin, but quality configuration is the same in all modules. Quality plugin will detect cpd plugin in the root project and configure it the same way as in single module case. But as quality plugin will apply in each module, only first configured module will apply cpd modifications of toolVersion and ignoreFailures (assuming this settings are the same for all modules). Each module will exclude cpdCheck task sources, not covered by quality plugin configuration. For example, if only main source set configured, each module will exclude test sources. This way, each module control sources only related to its module and overall cpdCheck sources configuration would be correct. Each module will attach all root project's cpd tasks to its check (sub module's check depend on root project tasks). Imagine if you work in one module you may call check only on module level. With common quality tasks its clear - all configured module's source sets must be validated. But you may introduce duplicates (e.g. copied method from other module) and the only way to detect it is to call root project tasks (so its completely logical to assign root cpd check to module checks). As an example, suppose we have 2 modules mod1 and mod2 with root project configuration as described above: root project's cpd plugin will be configured mod1 will exclude mod1/src/test/java from crpCheck.sources :mod1:check depends on :cpdCheck mod2 will exclude mod2/src/test/java from crpCheck.sources :mod2:check depends on :cpdCheck You will also notice, that in the multi-module setup console output will identify class module: mod1/sample.cpd.(OtherStruct1.java:3) [16 lines / 75 tokens] mod2/sample.cpd.(OtherStruct2.java:3) \u2502 3\u2502 public class OtherStruct1 { 4\u2502 5\u2502 public static void main(String[] args) { 6\u2502 Math.sqrt(12); Tip Quality plugin actually search CPD plugin not in the root-most project but in entire parent chain. So if you have complex gradle project and cpd plugin declared somewhere in the middle of projects hierarchy, everything will still be properly configured.","title":"Multi-module projects"},{"location":"tool/cpd/#suppress","text":"CPD violations could be suppressed only for some languages (Java, C/C++, Dart, Go, Javascript, Kotlin, Lua, Matlab, Objective-C, PL/SQL, Python and Swift) with comments containing CPD-OFF and CPD-ON: public Object someParameterizedFactoryMethod ( int x ) throws Exception { // some unignored code // tell cpd to start ignoring code - CPD-OFF // mission critical code, manually loop unroll goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); goDoSomethingAwesome ( x + x / 2 ); // resume CPD analysis - CPD-ON // further code will *not* be ignored } Java sources could be also suppressed with annotations: //enable suppression @SuppressWarnings ( \"CPD-START\" ) public Object someParameterizedFactoryMethod ( int x ) throws Exception { // any code here will be ignored for the duplication detection } //disable suppression @SuppressWarnings ( \"CPD-END) public void nextMethod() { }","title":"Suppress"},{"location":"tool/lint/","text":"Javac lint \u00b6 Java | Home Javac linter could show more useful warnings (not visible by default). See the list of all options . Configuration \u00b6 By default, plugin will enable deprecation and unchecked warnings (as the most useful): quality { lintOptions = [ 'deprecation' , 'unchecked' ] } These lint options are applied to all registered CompileJava tasks.","title":"Javac lint"},{"location":"tool/lint/#javac-lint","text":"Java | Home Javac linter could show more useful warnings (not visible by default). See the list of all options .","title":"Javac lint"},{"location":"tool/lint/#configuration","text":"By default, plugin will enable deprecation and unchecked warnings (as the most useful): quality { lintOptions = [ 'deprecation' , 'unchecked' ] } These lint options are applied to all registered CompileJava tasks.","title":"Configuration"},{"location":"tool/pmd/","text":"PMD \u00b6 Java | Home | Release Notes | Plugin By default, plugin activates if java sources available ( src/main/java ). Default config contains all java checks, but some of them are disabled. Remove exclusion to enable disabled rule. Warning Pmd 6.0 changed rule groups . Default config was rewritten accordingly. Output \u00b6 23 PMD rule violations were found in 2 files [Comments | CommentRequired] sample.(Sample.java:3) headerCommentRequirement Required https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired ... Config \u00b6 Tool config options with defaults: quality { pmdVersion = '6.34.0' pmd = true // false to disable automatic plugin activation // @deprecated enabled by default since gradle 6.4 (property only useful for enabling it in gradle 5.6 - 6.3) pmdIncremental = false // true to enable pmd incremental analysis } Suppress \u00b6 To suppress violation : @SuppressWarnings ( \"PMD.CommentRequired\" ) To suppress all violations: @SuppressWarnings ( \"PMD\" ) Single line could be suppressed with comment: if ( x > 5 ) { // NOPMD }","title":"PMD"},{"location":"tool/pmd/#pmd","text":"Java | Home | Release Notes | Plugin By default, plugin activates if java sources available ( src/main/java ). Default config contains all java checks, but some of them are disabled. Remove exclusion to enable disabled rule. Warning Pmd 6.0 changed rule groups . Default config was rewritten accordingly.","title":"PMD"},{"location":"tool/pmd/#output","text":"23 PMD rule violations were found in 2 files [Comments | CommentRequired] sample.(Sample.java:3) headerCommentRequirement Required https://pmd.github.io/pmd-5.4.0/pmd-java/rules/java/comments.html#CommentRequired ...","title":"Output"},{"location":"tool/pmd/#config","text":"Tool config options with defaults: quality { pmdVersion = '6.34.0' pmd = true // false to disable automatic plugin activation // @deprecated enabled by default since gradle 6.4 (property only useful for enabling it in gradle 5.6 - 6.3) pmdIncremental = false // true to enable pmd incremental analysis }","title":"Config"},{"location":"tool/pmd/#suppress","text":"To suppress violation : @SuppressWarnings ( \"PMD.CommentRequired\" ) To suppress all violations: @SuppressWarnings ( \"PMD\" ) Single line could be suppressed with comment: if ( x > 5 ) { // NOPMD }","title":"Suppress"},{"location":"tool/spotbugs/","text":"SpotBugs \u00b6 Java | Home | Release Notes | Plugin Info SpotBugs is a successor project to deprecated FindBugs project. Migration guide . If you were using custom findbugs config before then rename its folder to spotbugs . Warning In contrast to other plugins, spotbugs plugin is not bundled with gradle, but quality plugin will bring it as a dependency (v 4.7.10) and activate automatically. If you will activate newer spotbugs plugin manually behaviour may change . By default, plugin activates if java sources available ( src/main/java ). SpotBugs configuration differ from other tools (checkstyle, pmd): instead of exact rules configuration it uses efforts level . Deeper level could reveal more bugs, but with higher mistake possibility. Default settings ( max effort and medium level) are perfect for most cases. Some checks were disabled in the default filter file Note Special xsl file used for manual html report generation. Spotbugs plugin can generate both xml and html reports, but this ability is not used (for more stable and legacy-compatible behaviour). Output \u00b6 2 (0 / 2 / 0) SpotBugs violations were found in 2 files [Performance | URF_UNREAD_FIELD] sample.(Sample.java:8) [priority 2 / rank 14] >> Unread field: sample.Sample.sample This field is never read. Consider removing it from the class. ... Counts in braces show priorities (p1/p2/p3). Note There is no link to spotbugs site (like other tools), because report already contains everything from there . Tip Both priority and rank are shown for violations: [priority 2 / rank 14] . Priority relates to spotbugsLevel setting and rank to spotbugsMaxRank . Config \u00b6 Tool config options with defaults: quality { spotbugsVersion = '4.4.2' spotbugs = true // false to disable automatic plugin activation spotbugsShowStackTraces = false // changes default for spotbugs.showStackTraces spotbugsEffort = 'max' // min, less, more or max spotbugsLevel = 'medium' // low, medium, high spotbugsMaxRank = 20 // 1-4 scariest, 5-9 scary, 10-14 troubling, 15-20 of concern spotbugsMaxHeapSize = '1g' } Attention Gradle 5 reduced default memory settings and so default memory for spotbugs task become 512mb (instead of 1/4 of physical memory as it was before). To reduce the impact (as spotbugs task is memory-consuming), quality plugin sets now default memory to 1g . If your project requires more memory for spotbugs, increase it with spotbugsMaxHeapSize option: spotbugsMaxHeapSize='2g' Note that quality pligin setting is applied only if sotbugs task was not configured manually, for example, with spotbugsMain.maxHeapSize = '2g' . Suppress \u00b6 To suppress violations you can use filter file . In this case you need to override default filter file . Or you can use annotations. SpotBugs use custom annotations and so you need to add com.github.spotbugs:spotbugs-annotations:3.1.2 dependency (with provided scope if possible) and use: @SuppressFBWarnings ( \"URF_UNREAD_FIELD\" ) Abstract Spotbugs can't use default @SuppressWarnings annotation because it's a source annotation and not available in bytecode. Excludes \u00b6 Spotbugs is the only quality tool which works on classes rather than on sources. By default, spotbugs task configured with all compiles classes which may include auto-generated sources too (more than just a source set). Generic exclusions mechanism configures source exclusions and, in order to properly apply these exclusions to spotbugs, quality plugin generates extended exclusions (xml) file. So spotbugs should (seem to) work the same as other plugins. Note Apt-generated sources excluded automatically (if you use gradle's annotationProcessor configuration). Tip If you need to customize default exclusions file, just put custom file in the configs directory and plugin will extend it with additional excludes if required. But do not set custom excludes file directly (with spotbugs.excludeFilter )! Manual exclusion \u00b6 If, for some reason, exclusions, configured in quality extension not applied (for example, due to implementation bug), you can always put exclusions directly into exclusions filter file (tip above) or filter compiled classes: afterEvaluate { tasks . withType ( com . github . spotbugs . snom . SpotBugsTask ). configureEach { classes = classes . filter { ! it . path . contains ( 'com/mycompany/serialize/protobuf/gen/' ) } } } Pay attention that this trick filters compiled files (.class), not sources! Whatever custom filtering logic could be used. Plugins \u00b6 You may add additional spotbugs checks by declaring spotbugs plugins . Warning As, by default, spotbugs plugin applied automatically after configuration read, spotbugsPlugins configuration can't be used directly You can register plugins using quality extension shortcut: quality { spotbugsPlugin 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.0' spotbugsPlugin 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7' } Note Rules from plugins would be identified in console output: [fb-contrib project | Correctness | FCBL_FIELD_COULD_BE_LOCAL] sample.(Sample.java:11) [priority 2 / rank 7] >> Class sample.Sample defines fields that are used only as locals This class defines fields that are used in a locals only fashion, specifically private fields or protected fields in final classes that are accessed first in each method with a store vs. a load. This field could be replaced by one or more local variables. Alternatively, you can use afterEvaluate to register directly in spotbugsPlugins configuration: afterEvaluate { dependencies { spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7' } } Available plugins \u00b6 Find Security Bugs ( site ) quality { spotbugsPlugin 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.0' } fb-contrib: A FindBugs auxiliary detector plugin ( site ) qualtiy { spotbugsPlugin 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7' } Annotations \u00b6 Use spotbugs-annotations to guide spotbugs nullability checks ( @NonNull and @Nullable ). Add com.github.spotbugs:spotbugs-annotations:3.1.2 dependency (with provided scope if possible). Warning Before, annotations from Jsr-305 were used ( com.google.code.findbugs:jsr305 ), but now it is dead. Remove jsr-305 jar if it were used and use undeprecated @edu.umd.cs.findbugs.annotations.NonNull and @edu.umd.cs.findbugs.annotations.Nullable Pay attention becuase libraries still bring-in jsr-305 jar (e.g. guava does): do not use javax.annotation.Nullable because it may lead to split package problem on java9 and above ( not always ) Another alternative is chaker framework annotations: org.checkerframework:checker-qual:3.0.0 . Guava already switched to use them, so if you use it you may already have these annotations. Using checker framework annotations should be preferable because it's on the track to community acceptance as default jsr-305 replacement. Besides, it's the only advanced java types system extension and validation tool. Hint Even if you will use other annotations, people using checker framework with your library would still benefit from your annotations because checker framework understands almost all of them . Summary: If checker framework available ( org.checkerframework:checker-qual ) use it: org.checkerframework.checker.nullness.qual.Nullable Otherwise, use spotbugs-annotations ( com.github.spotbugs:spotbugs-annotations ): edu.umd.cs.findbugs.annotations.Nullable Avoid using jsr-305 directly ( com.google.code.findbugs:jsr305 ): javax.annotation.Nullable Example \u00b6 Here is an example, which will force you to use nullability annotations. When you use guava functions or predicates you may receive this: [NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE] input must be nonnull but is marked as nullable The reason for this is that guava use @Nullable annotation, which is @Inherited , so even if you not set annotation on your own function or predicate it will still be visible. The simplest workaround is to set @NonNull annotation on your function or predicate: public boolean apply ( @NonNull final Object input ) { Hint NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION check was disabled because it does not allow this workaround to work Spotbugs plugin specifics \u00b6 Spotbugs plugin 4 is a plugin re-write. Now it does not follow other gradle quality plugin conventions. The main difference is: there is no target source sets configuration anymore, so by default, all spotbugs tasks will be executed with check . To recover old spotbugs plugin behaviour (and unify it with other plugins) quality plugin activates customized spotbugs plugin with legacy behaviour (the difference is only in what tasks attached to check ). Warning If you will activate spotbugs plugin manually plugins { id 'com.github.spotbugs' version '4.1.0' } Then default spotbugs plugin will be used and so check will call all spotbugs tasks ( spotbugsMain , spotbugsTest ). Still, everything else will work as before: the difference is only in check task dependencies. If you would like to update bundled spotbugs plugin version use: plugins { id 'com.github.spotbugs' version '4.1.0' apply false } If you want to apply plugin manually to activtate it earlier and be able to apply configurations without afterEvaluate block: apply plugin: ru . vyarus . gradle . plugin . quality . spotbugs . CustomSpotBugsPlugin Spotbugs plugin issues \u00b6 New spotbugs plugin does not support build cache , so spotbugs tasks will always run, even with enabled build cache. Spotbugs plugin always throws an exception when violations found, so even in non strict mode ( quality.strict = false ) you will see an exception in logs when violations found (build will not be failed). Not critical, just confusing. Problems resolution \u00b6 Most problems appear with spotbugs configuration. Plugin by default configures only default dependencies for it, so if you modify this configuration you will have to specify dependencies explicitly: afterEvaluate { dependencies { spotbugs \"com.github.spotbugs:spotbugs:${quality.spotbugsVersion}\" } } Important Gradle will not show you dependencies tree for spotbugs configuration (because it doesn't show default dependencies) so to be able to see conflicts, configure it manually (as shown above). After that you can investigate with: gradlew dependencies --configuration spotbugs or (for exact dependency tracking) gradlew dependencyInsight --configuration spotbugs --dependency asm Asm \u00b6 If you have problems executing spotbugs tasks like Execution failed for task ':spotbugsMain'. > Failed to run Gradle SpotBugs Worker > org/objectweb/asm/RecordComponentVisitor (NoClassDefFoundException in stacktrace) Then it is possible that you have incorrect asm: gradlew dependencyInsight --configuration spotbugs --dependency org.ow2.asm:asm org.ow2.asm:asm:7.2 (selected by rule) ... org.ow2.asm:asm:7.3.1 -> 7.2 This may be caused by incorrect BOM usage. For example, spring dependency-management plugin configured like this: dependencyManagement { imports { mavenBom \"com.google.inject:guice-bom:4.2.3\" } } would apply to ALL configurations, including \"spotbugs\". In this example, guice bom will force asm 7.2 which will lead to fail. To fix this apply BOM only to some configurations: dependencyManagement { configurations ( implementation , testImplementation , provided ) { imports { mavenBom \"com.google.inject:guice-bom:4.2.3\" } } } Warning But, in this case, generated pom will lack \"dependencyManagement\" section (as it use only globally applied BOMs), so if resulted pom is important for you, then simply force correct asm version for spotbugs: afterEvaluate { dependencies { spotbugs \"com.github.spotbugs:spotbugs:${quality.spotbugsVersion}\" spotbugs \"org.ow2.asm:asm:9.0\" } } Build dashboard plugin \u00b6 If you use build-dashboard plugin, you may face an error : Execution failed for task ':buildDashboard'. > Could not create task ':spotbugsTest'. > Cannot change dependencies of dependency configuration ':spotbugs' after it has been resolved. This is due to a bug in build-dashboard plugin, forcing initialization of all project tasks. Spotbugs create lazy tasks for all source sets and each task configures defaults for spotbugs configuration. So when build-dashboard force initialization of not used tasks, they can't apply configurations. To workaround this simply initialize all not used spotbugs tasks manually: afterEvaluate { tasks . findByName ( 'spotbugsTest' ) } afterEvaluate required because spotbugs plugin applied after configuration and findByName forces task initialization (for lazy tasks).","title":"SpotBugs"},{"location":"tool/spotbugs/#spotbugs","text":"Java | Home | Release Notes | Plugin Info SpotBugs is a successor project to deprecated FindBugs project. Migration guide . If you were using custom findbugs config before then rename its folder to spotbugs . Warning In contrast to other plugins, spotbugs plugin is not bundled with gradle, but quality plugin will bring it as a dependency (v 4.7.10) and activate automatically. If you will activate newer spotbugs plugin manually behaviour may change . By default, plugin activates if java sources available ( src/main/java ). SpotBugs configuration differ from other tools (checkstyle, pmd): instead of exact rules configuration it uses efforts level . Deeper level could reveal more bugs, but with higher mistake possibility. Default settings ( max effort and medium level) are perfect for most cases. Some checks were disabled in the default filter file Note Special xsl file used for manual html report generation. Spotbugs plugin can generate both xml and html reports, but this ability is not used (for more stable and legacy-compatible behaviour).","title":"SpotBugs"},{"location":"tool/spotbugs/#output","text":"2 (0 / 2 / 0) SpotBugs violations were found in 2 files [Performance | URF_UNREAD_FIELD] sample.(Sample.java:8) [priority 2 / rank 14] >> Unread field: sample.Sample.sample This field is never read. Consider removing it from the class. ... Counts in braces show priorities (p1/p2/p3). Note There is no link to spotbugs site (like other tools), because report already contains everything from there . Tip Both priority and rank are shown for violations: [priority 2 / rank 14] . Priority relates to spotbugsLevel setting and rank to spotbugsMaxRank .","title":"Output"},{"location":"tool/spotbugs/#config","text":"Tool config options with defaults: quality { spotbugsVersion = '4.4.2' spotbugs = true // false to disable automatic plugin activation spotbugsShowStackTraces = false // changes default for spotbugs.showStackTraces spotbugsEffort = 'max' // min, less, more or max spotbugsLevel = 'medium' // low, medium, high spotbugsMaxRank = 20 // 1-4 scariest, 5-9 scary, 10-14 troubling, 15-20 of concern spotbugsMaxHeapSize = '1g' } Attention Gradle 5 reduced default memory settings and so default memory for spotbugs task become 512mb (instead of 1/4 of physical memory as it was before). To reduce the impact (as spotbugs task is memory-consuming), quality plugin sets now default memory to 1g . If your project requires more memory for spotbugs, increase it with spotbugsMaxHeapSize option: spotbugsMaxHeapSize='2g' Note that quality pligin setting is applied only if sotbugs task was not configured manually, for example, with spotbugsMain.maxHeapSize = '2g' .","title":"Config"},{"location":"tool/spotbugs/#suppress","text":"To suppress violations you can use filter file . In this case you need to override default filter file . Or you can use annotations. SpotBugs use custom annotations and so you need to add com.github.spotbugs:spotbugs-annotations:3.1.2 dependency (with provided scope if possible) and use: @SuppressFBWarnings ( \"URF_UNREAD_FIELD\" ) Abstract Spotbugs can't use default @SuppressWarnings annotation because it's a source annotation and not available in bytecode.","title":"Suppress"},{"location":"tool/spotbugs/#excludes","text":"Spotbugs is the only quality tool which works on classes rather than on sources. By default, spotbugs task configured with all compiles classes which may include auto-generated sources too (more than just a source set). Generic exclusions mechanism configures source exclusions and, in order to properly apply these exclusions to spotbugs, quality plugin generates extended exclusions (xml) file. So spotbugs should (seem to) work the same as other plugins. Note Apt-generated sources excluded automatically (if you use gradle's annotationProcessor configuration). Tip If you need to customize default exclusions file, just put custom file in the configs directory and plugin will extend it with additional excludes if required. But do not set custom excludes file directly (with spotbugs.excludeFilter )!","title":"Excludes"},{"location":"tool/spotbugs/#manual-exclusion","text":"If, for some reason, exclusions, configured in quality extension not applied (for example, due to implementation bug), you can always put exclusions directly into exclusions filter file (tip above) or filter compiled classes: afterEvaluate { tasks . withType ( com . github . spotbugs . snom . SpotBugsTask ). configureEach { classes = classes . filter { ! it . path . contains ( 'com/mycompany/serialize/protobuf/gen/' ) } } } Pay attention that this trick filters compiled files (.class), not sources! Whatever custom filtering logic could be used.","title":"Manual exclusion"},{"location":"tool/spotbugs/#plugins","text":"You may add additional spotbugs checks by declaring spotbugs plugins . Warning As, by default, spotbugs plugin applied automatically after configuration read, spotbugsPlugins configuration can't be used directly You can register plugins using quality extension shortcut: quality { spotbugsPlugin 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.0' spotbugsPlugin 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7' } Note Rules from plugins would be identified in console output: [fb-contrib project | Correctness | FCBL_FIELD_COULD_BE_LOCAL] sample.(Sample.java:11) [priority 2 / rank 7] >> Class sample.Sample defines fields that are used only as locals This class defines fields that are used in a locals only fashion, specifically private fields or protected fields in final classes that are accessed first in each method with a store vs. a load. This field could be replaced by one or more local variables. Alternatively, you can use afterEvaluate to register directly in spotbugsPlugins configuration: afterEvaluate { dependencies { spotbugsPlugins 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7' } }","title":"Plugins"},{"location":"tool/spotbugs/#available-plugins","text":"Find Security Bugs ( site ) quality { spotbugsPlugin 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.10.0' } fb-contrib: A FindBugs auxiliary detector plugin ( site ) qualtiy { spotbugsPlugin 'com.mebigfatguy.fb-contrib:fb-contrib:7.4.7' }","title":"Available plugins"},{"location":"tool/spotbugs/#annotations","text":"Use spotbugs-annotations to guide spotbugs nullability checks ( @NonNull and @Nullable ). Add com.github.spotbugs:spotbugs-annotations:3.1.2 dependency (with provided scope if possible). Warning Before, annotations from Jsr-305 were used ( com.google.code.findbugs:jsr305 ), but now it is dead. Remove jsr-305 jar if it were used and use undeprecated @edu.umd.cs.findbugs.annotations.NonNull and @edu.umd.cs.findbugs.annotations.Nullable Pay attention becuase libraries still bring-in jsr-305 jar (e.g. guava does): do not use javax.annotation.Nullable because it may lead to split package problem on java9 and above ( not always ) Another alternative is chaker framework annotations: org.checkerframework:checker-qual:3.0.0 . Guava already switched to use them, so if you use it you may already have these annotations. Using checker framework annotations should be preferable because it's on the track to community acceptance as default jsr-305 replacement. Besides, it's the only advanced java types system extension and validation tool. Hint Even if you will use other annotations, people using checker framework with your library would still benefit from your annotations because checker framework understands almost all of them . Summary: If checker framework available ( org.checkerframework:checker-qual ) use it: org.checkerframework.checker.nullness.qual.Nullable Otherwise, use spotbugs-annotations ( com.github.spotbugs:spotbugs-annotations ): edu.umd.cs.findbugs.annotations.Nullable Avoid using jsr-305 directly ( com.google.code.findbugs:jsr305 ): javax.annotation.Nullable","title":"Annotations"},{"location":"tool/spotbugs/#example","text":"Here is an example, which will force you to use nullability annotations. When you use guava functions or predicates you may receive this: [NP_PARAMETER_MUST_BE_NONNULL_BUT_MARKED_AS_NULLABLE] input must be nonnull but is marked as nullable The reason for this is that guava use @Nullable annotation, which is @Inherited , so even if you not set annotation on your own function or predicate it will still be visible. The simplest workaround is to set @NonNull annotation on your function or predicate: public boolean apply ( @NonNull final Object input ) { Hint NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION check was disabled because it does not allow this workaround to work","title":"Example"},{"location":"tool/spotbugs/#spotbugs-plugin-specifics","text":"Spotbugs plugin 4 is a plugin re-write. Now it does not follow other gradle quality plugin conventions. The main difference is: there is no target source sets configuration anymore, so by default, all spotbugs tasks will be executed with check . To recover old spotbugs plugin behaviour (and unify it with other plugins) quality plugin activates customized spotbugs plugin with legacy behaviour (the difference is only in what tasks attached to check ). Warning If you will activate spotbugs plugin manually plugins { id 'com.github.spotbugs' version '4.1.0' } Then default spotbugs plugin will be used and so check will call all spotbugs tasks ( spotbugsMain , spotbugsTest ). Still, everything else will work as before: the difference is only in check task dependencies. If you would like to update bundled spotbugs plugin version use: plugins { id 'com.github.spotbugs' version '4.1.0' apply false } If you want to apply plugin manually to activtate it earlier and be able to apply configurations without afterEvaluate block: apply plugin: ru . vyarus . gradle . plugin . quality . spotbugs . CustomSpotBugsPlugin","title":"Spotbugs plugin specifics"},{"location":"tool/spotbugs/#spotbugs-plugin-issues","text":"New spotbugs plugin does not support build cache , so spotbugs tasks will always run, even with enabled build cache. Spotbugs plugin always throws an exception when violations found, so even in non strict mode ( quality.strict = false ) you will see an exception in logs when violations found (build will not be failed). Not critical, just confusing.","title":"Spotbugs plugin issues"},{"location":"tool/spotbugs/#problems-resolution","text":"Most problems appear with spotbugs configuration. Plugin by default configures only default dependencies for it, so if you modify this configuration you will have to specify dependencies explicitly: afterEvaluate { dependencies { spotbugs \"com.github.spotbugs:spotbugs:${quality.spotbugsVersion}\" } } Important Gradle will not show you dependencies tree for spotbugs configuration (because it doesn't show default dependencies) so to be able to see conflicts, configure it manually (as shown above). After that you can investigate with: gradlew dependencies --configuration spotbugs or (for exact dependency tracking) gradlew dependencyInsight --configuration spotbugs --dependency asm","title":"Problems resolution"},{"location":"tool/spotbugs/#asm","text":"If you have problems executing spotbugs tasks like Execution failed for task ':spotbugsMain'. > Failed to run Gradle SpotBugs Worker > org/objectweb/asm/RecordComponentVisitor (NoClassDefFoundException in stacktrace) Then it is possible that you have incorrect asm: gradlew dependencyInsight --configuration spotbugs --dependency org.ow2.asm:asm org.ow2.asm:asm:7.2 (selected by rule) ... org.ow2.asm:asm:7.3.1 -> 7.2 This may be caused by incorrect BOM usage. For example, spring dependency-management plugin configured like this: dependencyManagement { imports { mavenBom \"com.google.inject:guice-bom:4.2.3\" } } would apply to ALL configurations, including \"spotbugs\". In this example, guice bom will force asm 7.2 which will lead to fail. To fix this apply BOM only to some configurations: dependencyManagement { configurations ( implementation , testImplementation , provided ) { imports { mavenBom \"com.google.inject:guice-bom:4.2.3\" } } } Warning But, in this case, generated pom will lack \"dependencyManagement\" section (as it use only globally applied BOMs), so if resulted pom is important for you, then simply force correct asm version for spotbugs: afterEvaluate { dependencies { spotbugs \"com.github.spotbugs:spotbugs:${quality.spotbugsVersion}\" spotbugs \"org.ow2.asm:asm:9.0\" } }","title":"Asm"},{"location":"tool/spotbugs/#build-dashboard-plugin","text":"If you use build-dashboard plugin, you may face an error : Execution failed for task ':buildDashboard'. > Could not create task ':spotbugsTest'. > Cannot change dependencies of dependency configuration ':spotbugs' after it has been resolved. This is due to a bug in build-dashboard plugin, forcing initialization of all project tasks. Spotbugs create lazy tasks for all source sets and each task configures defaults for spotbugs configuration. So when build-dashboard force initialization of not used tasks, they can't apply configurations. To workaround this simply initialize all not used spotbugs tasks manually: afterEvaluate { tasks . findByName ( 'spotbugsTest' ) } afterEvaluate required because spotbugs plugin applied after configuration and findByName forces task initialization (for lazy tasks).","title":"Build dashboard plugin"}]}